
nucelo-f446re-freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051d4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080053a4  080053a4  000063a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800542c  0800542c  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800542c  0800542c  0000642c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005434  08005434  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005434  08005434  00006434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005438  08005438  00006438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800543c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a08  20000010  0800544c  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a18  0800544c  00007a18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016e0f  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000323d  00000000  00000000  0001de4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001428  00000000  00000000  00021090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fb3  00000000  00000000  000224b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002f93  00000000  00000000  0002346b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000165b3  00000000  00000000  000263fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000daca6  00000000  00000000  0003c9b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00117657  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005548  00000000  00000000  0011769c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0011cbe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800538c 	.word	0x0800538c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	0800538c 	.word	0x0800538c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b988 	b.w	8000538 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	468e      	mov	lr, r1
 8000248:	4604      	mov	r4, r0
 800024a:	4688      	mov	r8, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d962      	bls.n	800031c <__udivmoddi4+0xdc>
 8000256:	fab2 f682 	clz	r6, r2
 800025a:	b14e      	cbz	r6, 8000270 <__udivmoddi4+0x30>
 800025c:	f1c6 0320 	rsb	r3, r6, #32
 8000260:	fa01 f806 	lsl.w	r8, r1, r6
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	40b7      	lsls	r7, r6
 800026a:	ea43 0808 	orr.w	r8, r3, r8
 800026e:	40b4      	lsls	r4, r6
 8000270:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000274:	fa1f fc87 	uxth.w	ip, r7
 8000278:	fbb8 f1fe 	udiv	r1, r8, lr
 800027c:	0c23      	lsrs	r3, r4, #16
 800027e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000282:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000286:	fb01 f20c 	mul.w	r2, r1, ip
 800028a:	429a      	cmp	r2, r3
 800028c:	d909      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028e:	18fb      	adds	r3, r7, r3
 8000290:	f101 30ff 	add.w	r0, r1, #4294967295
 8000294:	f080 80ea 	bcs.w	800046c <__udivmoddi4+0x22c>
 8000298:	429a      	cmp	r2, r3
 800029a:	f240 80e7 	bls.w	800046c <__udivmoddi4+0x22c>
 800029e:	3902      	subs	r1, #2
 80002a0:	443b      	add	r3, r7
 80002a2:	1a9a      	subs	r2, r3, r2
 80002a4:	b2a3      	uxth	r3, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b6:	459c      	cmp	ip, r3
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0x8e>
 80002ba:	18fb      	adds	r3, r7, r3
 80002bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c0:	f080 80d6 	bcs.w	8000470 <__udivmoddi4+0x230>
 80002c4:	459c      	cmp	ip, r3
 80002c6:	f240 80d3 	bls.w	8000470 <__udivmoddi4+0x230>
 80002ca:	443b      	add	r3, r7
 80002cc:	3802      	subs	r0, #2
 80002ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d2:	eba3 030c 	sub.w	r3, r3, ip
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11d      	cbz	r5, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40f3      	lsrs	r3, r6
 80002dc:	2200      	movs	r2, #0
 80002de:	e9c5 3200 	strd	r3, r2, [r5]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d905      	bls.n	80002f6 <__udivmoddi4+0xb6>
 80002ea:	b10d      	cbz	r5, 80002f0 <__udivmoddi4+0xb0>
 80002ec:	e9c5 0100 	strd	r0, r1, [r5]
 80002f0:	2100      	movs	r1, #0
 80002f2:	4608      	mov	r0, r1
 80002f4:	e7f5      	b.n	80002e2 <__udivmoddi4+0xa2>
 80002f6:	fab3 f183 	clz	r1, r3
 80002fa:	2900      	cmp	r1, #0
 80002fc:	d146      	bne.n	800038c <__udivmoddi4+0x14c>
 80002fe:	4573      	cmp	r3, lr
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xc8>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 8105 	bhi.w	8000512 <__udivmoddi4+0x2d2>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb6e 0203 	sbc.w	r2, lr, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4690      	mov	r8, r2
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e5      	beq.n	80002e2 <__udivmoddi4+0xa2>
 8000316:	e9c5 4800 	strd	r4, r8, [r5]
 800031a:	e7e2      	b.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	2a00      	cmp	r2, #0
 800031e:	f000 8090 	beq.w	8000442 <__udivmoddi4+0x202>
 8000322:	fab2 f682 	clz	r6, r2
 8000326:	2e00      	cmp	r6, #0
 8000328:	f040 80a4 	bne.w	8000474 <__udivmoddi4+0x234>
 800032c:	1a8a      	subs	r2, r1, r2
 800032e:	0c03      	lsrs	r3, r0, #16
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	b280      	uxth	r0, r0
 8000336:	b2bc      	uxth	r4, r7
 8000338:	2101      	movs	r1, #1
 800033a:	fbb2 fcfe 	udiv	ip, r2, lr
 800033e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000346:	fb04 f20c 	mul.w	r2, r4, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d907      	bls.n	800035e <__udivmoddi4+0x11e>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x11c>
 8000356:	429a      	cmp	r2, r3
 8000358:	f200 80e0 	bhi.w	800051c <__udivmoddi4+0x2dc>
 800035c:	46c4      	mov	ip, r8
 800035e:	1a9b      	subs	r3, r3, r2
 8000360:	fbb3 f2fe 	udiv	r2, r3, lr
 8000364:	fb0e 3312 	mls	r3, lr, r2, r3
 8000368:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800036c:	fb02 f404 	mul.w	r4, r2, r4
 8000370:	429c      	cmp	r4, r3
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x144>
 8000374:	18fb      	adds	r3, r7, r3
 8000376:	f102 30ff 	add.w	r0, r2, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x142>
 800037c:	429c      	cmp	r4, r3
 800037e:	f200 80ca 	bhi.w	8000516 <__udivmoddi4+0x2d6>
 8000382:	4602      	mov	r2, r0
 8000384:	1b1b      	subs	r3, r3, r4
 8000386:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0x98>
 800038c:	f1c1 0620 	rsb	r6, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 f706 	lsr.w	r7, r2, r6
 8000396:	431f      	orrs	r7, r3
 8000398:	fa0e f401 	lsl.w	r4, lr, r1
 800039c:	fa20 f306 	lsr.w	r3, r0, r6
 80003a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	fa1f fc87 	uxth.w	ip, r7
 80003b2:	fbbe f0f9 	udiv	r0, lr, r9
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x1a0>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 3aff 	add.w	sl, r0, #4294967295
 80003d2:	f080 809c 	bcs.w	800050e <__udivmoddi4+0x2ce>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	f240 8099 	bls.w	800050e <__udivmoddi4+0x2ce>
 80003dc:	3802      	subs	r0, #2
 80003de:	443c      	add	r4, r7
 80003e0:	eba4 040e 	sub.w	r4, r4, lr
 80003e4:	fa1f fe83 	uxth.w	lr, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1ce>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f103 3eff 	add.w	lr, r3, #4294967295
 8000402:	f080 8082 	bcs.w	800050a <__udivmoddi4+0x2ca>
 8000406:	45a4      	cmp	ip, r4
 8000408:	d97f      	bls.n	800050a <__udivmoddi4+0x2ca>
 800040a:	3b02      	subs	r3, #2
 800040c:	443c      	add	r4, r7
 800040e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	fba0 ec02 	umull	lr, ip, r0, r2
 800041a:	4564      	cmp	r4, ip
 800041c:	4673      	mov	r3, lr
 800041e:	46e1      	mov	r9, ip
 8000420:	d362      	bcc.n	80004e8 <__udivmoddi4+0x2a8>
 8000422:	d05f      	beq.n	80004e4 <__udivmoddi4+0x2a4>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x1fe>
 8000426:	ebb8 0203 	subs.w	r2, r8, r3
 800042a:	eb64 0409 	sbc.w	r4, r4, r9
 800042e:	fa04 f606 	lsl.w	r6, r4, r6
 8000432:	fa22 f301 	lsr.w	r3, r2, r1
 8000436:	431e      	orrs	r6, r3
 8000438:	40cc      	lsrs	r4, r1
 800043a:	e9c5 6400 	strd	r6, r4, [r5]
 800043e:	2100      	movs	r1, #0
 8000440:	e74f      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000442:	fbb1 fcf2 	udiv	ip, r1, r2
 8000446:	0c01      	lsrs	r1, r0, #16
 8000448:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800044c:	b280      	uxth	r0, r0
 800044e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000452:	463b      	mov	r3, r7
 8000454:	4638      	mov	r0, r7
 8000456:	463c      	mov	r4, r7
 8000458:	46b8      	mov	r8, r7
 800045a:	46be      	mov	lr, r7
 800045c:	2620      	movs	r6, #32
 800045e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000462:	eba2 0208 	sub.w	r2, r2, r8
 8000466:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046a:	e766      	b.n	800033a <__udivmoddi4+0xfa>
 800046c:	4601      	mov	r1, r0
 800046e:	e718      	b.n	80002a2 <__udivmoddi4+0x62>
 8000470:	4610      	mov	r0, r2
 8000472:	e72c      	b.n	80002ce <__udivmoddi4+0x8e>
 8000474:	f1c6 0220 	rsb	r2, r6, #32
 8000478:	fa2e f302 	lsr.w	r3, lr, r2
 800047c:	40b7      	lsls	r7, r6
 800047e:	40b1      	lsls	r1, r6
 8000480:	fa20 f202 	lsr.w	r2, r0, r2
 8000484:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000488:	430a      	orrs	r2, r1
 800048a:	fbb3 f8fe 	udiv	r8, r3, lr
 800048e:	b2bc      	uxth	r4, r7
 8000490:	fb0e 3318 	mls	r3, lr, r8, r3
 8000494:	0c11      	lsrs	r1, r2, #16
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb08 f904 	mul.w	r9, r8, r4
 800049e:	40b0      	lsls	r0, r6
 80004a0:	4589      	cmp	r9, r1
 80004a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004a6:	b280      	uxth	r0, r0
 80004a8:	d93e      	bls.n	8000528 <__udivmoddi4+0x2e8>
 80004aa:	1879      	adds	r1, r7, r1
 80004ac:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b0:	d201      	bcs.n	80004b6 <__udivmoddi4+0x276>
 80004b2:	4589      	cmp	r9, r1
 80004b4:	d81f      	bhi.n	80004f6 <__udivmoddi4+0x2b6>
 80004b6:	eba1 0109 	sub.w	r1, r1, r9
 80004ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80004be:	fb09 f804 	mul.w	r8, r9, r4
 80004c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004c6:	b292      	uxth	r2, r2
 80004c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d229      	bcs.n	8000524 <__udivmoddi4+0x2e4>
 80004d0:	18ba      	adds	r2, r7, r2
 80004d2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004d6:	d2c4      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004d8:	4542      	cmp	r2, r8
 80004da:	d2c2      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004dc:	f1a9 0102 	sub.w	r1, r9, #2
 80004e0:	443a      	add	r2, r7
 80004e2:	e7be      	b.n	8000462 <__udivmoddi4+0x222>
 80004e4:	45f0      	cmp	r8, lr
 80004e6:	d29d      	bcs.n	8000424 <__udivmoddi4+0x1e4>
 80004e8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f0:	3801      	subs	r0, #1
 80004f2:	46e1      	mov	r9, ip
 80004f4:	e796      	b.n	8000424 <__udivmoddi4+0x1e4>
 80004f6:	eba7 0909 	sub.w	r9, r7, r9
 80004fa:	4449      	add	r1, r9
 80004fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000500:	fbb1 f9fe 	udiv	r9, r1, lr
 8000504:	fb09 f804 	mul.w	r8, r9, r4
 8000508:	e7db      	b.n	80004c2 <__udivmoddi4+0x282>
 800050a:	4673      	mov	r3, lr
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1ce>
 800050e:	4650      	mov	r0, sl
 8000510:	e766      	b.n	80003e0 <__udivmoddi4+0x1a0>
 8000512:	4608      	mov	r0, r1
 8000514:	e6fd      	b.n	8000312 <__udivmoddi4+0xd2>
 8000516:	443b      	add	r3, r7
 8000518:	3a02      	subs	r2, #2
 800051a:	e733      	b.n	8000384 <__udivmoddi4+0x144>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	443b      	add	r3, r7
 8000522:	e71c      	b.n	800035e <__udivmoddi4+0x11e>
 8000524:	4649      	mov	r1, r9
 8000526:	e79c      	b.n	8000462 <__udivmoddi4+0x222>
 8000528:	eba1 0109 	sub.w	r1, r1, r9
 800052c:	46c4      	mov	ip, r8
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fb09 f804 	mul.w	r8, r9, r4
 8000536:	e7c4      	b.n	80004c2 <__udivmoddi4+0x282>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000540:	f000 fab8 	bl	8000ab4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000544:	f000 f826 	bl	8000594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000548:	f000 f8bc 	bl	80006c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800054c:	f000 f890 	bl	8000670 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000550:	f002 f960 	bl	8002814 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 8000554:	4a09      	ldr	r2, [pc, #36]	@ (800057c <main+0x40>)
 8000556:	2100      	movs	r1, #0
 8000558:	4809      	ldr	r0, [pc, #36]	@ (8000580 <main+0x44>)
 800055a:	f002 f9a5 	bl	80028a8 <osThreadNew>
 800055e:	4603      	mov	r3, r0
 8000560:	4a08      	ldr	r2, [pc, #32]	@ (8000584 <main+0x48>)
 8000562:	6013      	str	r3, [r2, #0]

  /* creation of blink02 */
  blink02Handle = osThreadNew(StartBlink02, NULL, &blink02_attributes);
 8000564:	4a08      	ldr	r2, [pc, #32]	@ (8000588 <main+0x4c>)
 8000566:	2100      	movs	r1, #0
 8000568:	4808      	ldr	r0, [pc, #32]	@ (800058c <main+0x50>)
 800056a:	f002 f99d 	bl	80028a8 <osThreadNew>
 800056e:	4603      	mov	r3, r0
 8000570:	4a07      	ldr	r2, [pc, #28]	@ (8000590 <main+0x54>)
 8000572:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000574:	f002 f972 	bl	800285c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000578:	bf00      	nop
 800057a:	e7fd      	b.n	8000578 <main+0x3c>
 800057c:	080053cc 	.word	0x080053cc
 8000580:	080007a1 	.word	0x080007a1
 8000584:	20000074 	.word	0x20000074
 8000588:	080053f0 	.word	0x080053f0
 800058c:	080007c1 	.word	0x080007c1
 8000590:	20000078 	.word	0x20000078

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b094      	sub	sp, #80	@ 0x50
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	f107 031c 	add.w	r3, r7, #28
 800059e:	2234      	movs	r2, #52	@ 0x34
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f004 feb8 	bl	8005318 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a8:	f107 0308 	add.w	r3, r7, #8
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b8:	2300      	movs	r3, #0
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	4b2a      	ldr	r3, [pc, #168]	@ (8000668 <SystemClock_Config+0xd4>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c0:	4a29      	ldr	r2, [pc, #164]	@ (8000668 <SystemClock_Config+0xd4>)
 80005c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005c8:	4b27      	ldr	r3, [pc, #156]	@ (8000668 <SystemClock_Config+0xd4>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005d4:	2300      	movs	r3, #0
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	4b24      	ldr	r3, [pc, #144]	@ (800066c <SystemClock_Config+0xd8>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005e0:	4a22      	ldr	r2, [pc, #136]	@ (800066c <SystemClock_Config+0xd8>)
 80005e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	4b20      	ldr	r3, [pc, #128]	@ (800066c <SystemClock_Config+0xd8>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005f0:	603b      	str	r3, [r7, #0]
 80005f2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f4:	2302      	movs	r3, #2
 80005f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f8:	2301      	movs	r3, #1
 80005fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005fc:	2310      	movs	r3, #16
 80005fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000600:	2302      	movs	r3, #2
 8000602:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000604:	2300      	movs	r3, #0
 8000606:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000608:	2310      	movs	r3, #16
 800060a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800060c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000610:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000612:	2304      	movs	r3, #4
 8000614:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000616:	2302      	movs	r3, #2
 8000618:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800061a:	2302      	movs	r3, #2
 800061c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061e:	f107 031c 	add.w	r3, r7, #28
 8000622:	4618      	mov	r0, r3
 8000624:	f001 f8ae 	bl	8001784 <HAL_RCC_OscConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800062e:	f000 f8e9 	bl	8000804 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000632:	230f      	movs	r3, #15
 8000634:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000636:	2302      	movs	r3, #2
 8000638:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800063e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000642:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000648:	f107 0308 	add.w	r3, r7, #8
 800064c:	2102      	movs	r1, #2
 800064e:	4618      	mov	r0, r3
 8000650:	f000 fd1c 	bl	800108c <HAL_RCC_ClockConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800065a:	f000 f8d3 	bl	8000804 <Error_Handler>
  }
}
 800065e:	bf00      	nop
 8000660:	3750      	adds	r7, #80	@ 0x50
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40023800 	.word	0x40023800
 800066c:	40007000 	.word	0x40007000

08000670 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000674:	4b11      	ldr	r3, [pc, #68]	@ (80006bc <MX_USART2_UART_Init+0x4c>)
 8000676:	4a12      	ldr	r2, [pc, #72]	@ (80006c0 <MX_USART2_UART_Init+0x50>)
 8000678:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800067a:	4b10      	ldr	r3, [pc, #64]	@ (80006bc <MX_USART2_UART_Init+0x4c>)
 800067c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000680:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000682:	4b0e      	ldr	r3, [pc, #56]	@ (80006bc <MX_USART2_UART_Init+0x4c>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000688:	4b0c      	ldr	r3, [pc, #48]	@ (80006bc <MX_USART2_UART_Init+0x4c>)
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800068e:	4b0b      	ldr	r3, [pc, #44]	@ (80006bc <MX_USART2_UART_Init+0x4c>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000694:	4b09      	ldr	r3, [pc, #36]	@ (80006bc <MX_USART2_UART_Init+0x4c>)
 8000696:	220c      	movs	r2, #12
 8000698:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800069a:	4b08      	ldr	r3, [pc, #32]	@ (80006bc <MX_USART2_UART_Init+0x4c>)
 800069c:	2200      	movs	r2, #0
 800069e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a0:	4b06      	ldr	r3, [pc, #24]	@ (80006bc <MX_USART2_UART_Init+0x4c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006a6:	4805      	ldr	r0, [pc, #20]	@ (80006bc <MX_USART2_UART_Init+0x4c>)
 80006a8:	f001 fdac 	bl	8002204 <HAL_UART_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006b2:	f000 f8a7 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	2000002c 	.word	0x2000002c
 80006c0:	40004400 	.word	0x40004400

080006c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08a      	sub	sp, #40	@ 0x28
 80006c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ca:	f107 0314 	add.w	r3, r7, #20
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
 80006d8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	613b      	str	r3, [r7, #16]
 80006de:	4b2d      	ldr	r3, [pc, #180]	@ (8000794 <MX_GPIO_Init+0xd0>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e2:	4a2c      	ldr	r2, [pc, #176]	@ (8000794 <MX_GPIO_Init+0xd0>)
 80006e4:	f043 0304 	orr.w	r3, r3, #4
 80006e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ea:	4b2a      	ldr	r3, [pc, #168]	@ (8000794 <MX_GPIO_Init+0xd0>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	f003 0304 	and.w	r3, r3, #4
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	4b26      	ldr	r3, [pc, #152]	@ (8000794 <MX_GPIO_Init+0xd0>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fe:	4a25      	ldr	r2, [pc, #148]	@ (8000794 <MX_GPIO_Init+0xd0>)
 8000700:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000704:	6313      	str	r3, [r2, #48]	@ 0x30
 8000706:	4b23      	ldr	r3, [pc, #140]	@ (8000794 <MX_GPIO_Init+0xd0>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	4b1f      	ldr	r3, [pc, #124]	@ (8000794 <MX_GPIO_Init+0xd0>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	4a1e      	ldr	r2, [pc, #120]	@ (8000794 <MX_GPIO_Init+0xd0>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6313      	str	r3, [r2, #48]	@ 0x30
 8000722:	4b1c      	ldr	r3, [pc, #112]	@ (8000794 <MX_GPIO_Init+0xd0>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	4b18      	ldr	r3, [pc, #96]	@ (8000794 <MX_GPIO_Init+0xd0>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	4a17      	ldr	r2, [pc, #92]	@ (8000794 <MX_GPIO_Init+0xd0>)
 8000738:	f043 0302 	orr.w	r3, r3, #2
 800073c:	6313      	str	r3, [r2, #48]	@ 0x30
 800073e:	4b15      	ldr	r3, [pc, #84]	@ (8000794 <MX_GPIO_Init+0xd0>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	f003 0302 	and.w	r3, r3, #2
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	2120      	movs	r1, #32
 800074e:	4812      	ldr	r0, [pc, #72]	@ (8000798 <MX_GPIO_Init+0xd4>)
 8000750:	f000 fc68 	bl	8001024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000754:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000758:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800075a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800075e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	4619      	mov	r1, r3
 800076a:	480c      	ldr	r0, [pc, #48]	@ (800079c <MX_GPIO_Init+0xd8>)
 800076c:	f000 fac6 	bl	8000cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000770:	2320      	movs	r3, #32
 8000772:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000774:	2301      	movs	r3, #1
 8000776:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077c:	2300      	movs	r3, #0
 800077e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000780:	f107 0314 	add.w	r3, r7, #20
 8000784:	4619      	mov	r1, r3
 8000786:	4804      	ldr	r0, [pc, #16]	@ (8000798 <MX_GPIO_Init+0xd4>)
 8000788:	f000 fab8 	bl	8000cfc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800078c:	bf00      	nop
 800078e:	3728      	adds	r7, #40	@ 0x28
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40023800 	.word	0x40023800
 8000798:	40020000 	.word	0x40020000
 800079c:	40020800 	.word	0x40020800

080007a0 <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80007a8:	2120      	movs	r1, #32
 80007aa:	4804      	ldr	r0, [pc, #16]	@ (80007bc <StartBlink01+0x1c>)
 80007ac:	f000 fc53 	bl	8001056 <HAL_GPIO_TogglePin>
    osDelay(500);
 80007b0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007b4:	f002 f90a 	bl	80029cc <osDelay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80007b8:	bf00      	nop
 80007ba:	e7f5      	b.n	80007a8 <StartBlink01+0x8>
 80007bc:	40020000 	.word	0x40020000

080007c0 <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void *argument)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink02 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80007c8:	2120      	movs	r1, #32
 80007ca:	4804      	ldr	r0, [pc, #16]	@ (80007dc <StartBlink02+0x1c>)
 80007cc:	f000 fc43 	bl	8001056 <HAL_GPIO_TogglePin>
    osDelay(600);
 80007d0:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80007d4:	f002 f8fa 	bl	80029cc <osDelay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80007d8:	bf00      	nop
 80007da:	e7f5      	b.n	80007c8 <StartBlink02+0x8>
 80007dc:	40020000 	.word	0x40020000

080007e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a04      	ldr	r2, [pc, #16]	@ (8000800 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d101      	bne.n	80007f6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80007f2:	f000 f981 	bl	8000af8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40001000 	.word	0x40001000

08000804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000808:	b672      	cpsid	i
}
 800080a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800080c:	bf00      	nop
 800080e:	e7fd      	b.n	800080c <Error_Handler+0x8>

08000810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	4b12      	ldr	r3, [pc, #72]	@ (8000864 <HAL_MspInit+0x54>)
 800081c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800081e:	4a11      	ldr	r2, [pc, #68]	@ (8000864 <HAL_MspInit+0x54>)
 8000820:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000824:	6453      	str	r3, [r2, #68]	@ 0x44
 8000826:	4b0f      	ldr	r3, [pc, #60]	@ (8000864 <HAL_MspInit+0x54>)
 8000828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800082a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	603b      	str	r3, [r7, #0]
 8000836:	4b0b      	ldr	r3, [pc, #44]	@ (8000864 <HAL_MspInit+0x54>)
 8000838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800083a:	4a0a      	ldr	r2, [pc, #40]	@ (8000864 <HAL_MspInit+0x54>)
 800083c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000840:	6413      	str	r3, [r2, #64]	@ 0x40
 8000842:	4b08      	ldr	r3, [pc, #32]	@ (8000864 <HAL_MspInit+0x54>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	210f      	movs	r1, #15
 8000852:	f06f 0001 	mvn.w	r0, #1
 8000856:	f000 fa27 	bl	8000ca8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40023800 	.word	0x40023800

08000868 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08a      	sub	sp, #40	@ 0x28
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a19      	ldr	r2, [pc, #100]	@ (80008ec <HAL_UART_MspInit+0x84>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d12b      	bne.n	80008e2 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]
 800088e:	4b18      	ldr	r3, [pc, #96]	@ (80008f0 <HAL_UART_MspInit+0x88>)
 8000890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000892:	4a17      	ldr	r2, [pc, #92]	@ (80008f0 <HAL_UART_MspInit+0x88>)
 8000894:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000898:	6413      	str	r3, [r2, #64]	@ 0x40
 800089a:	4b15      	ldr	r3, [pc, #84]	@ (80008f0 <HAL_UART_MspInit+0x88>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800089e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	4b11      	ldr	r3, [pc, #68]	@ (80008f0 <HAL_UART_MspInit+0x88>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	4a10      	ldr	r2, [pc, #64]	@ (80008f0 <HAL_UART_MspInit+0x88>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b6:	4b0e      	ldr	r3, [pc, #56]	@ (80008f0 <HAL_UART_MspInit+0x88>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008c2:	230c      	movs	r3, #12
 80008c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ce:	2303      	movs	r3, #3
 80008d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008d2:	2307      	movs	r3, #7
 80008d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	4619      	mov	r1, r3
 80008dc:	4805      	ldr	r0, [pc, #20]	@ (80008f4 <HAL_UART_MspInit+0x8c>)
 80008de:	f000 fa0d 	bl	8000cfc <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80008e2:	bf00      	nop
 80008e4:	3728      	adds	r7, #40	@ 0x28
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40004400 	.word	0x40004400
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40020000 	.word	0x40020000

080008f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08e      	sub	sp, #56	@ 0x38
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000900:	2300      	movs	r3, #0
 8000902:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000904:	2300      	movs	r3, #0
 8000906:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000908:	2300      	movs	r3, #0
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	4b33      	ldr	r3, [pc, #204]	@ (80009dc <HAL_InitTick+0xe4>)
 800090e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000910:	4a32      	ldr	r2, [pc, #200]	@ (80009dc <HAL_InitTick+0xe4>)
 8000912:	f043 0310 	orr.w	r3, r3, #16
 8000916:	6413      	str	r3, [r2, #64]	@ 0x40
 8000918:	4b30      	ldr	r3, [pc, #192]	@ (80009dc <HAL_InitTick+0xe4>)
 800091a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800091c:	f003 0310 	and.w	r3, r3, #16
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000924:	f107 0210 	add.w	r2, r7, #16
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	4611      	mov	r1, r2
 800092e:	4618      	mov	r0, r3
 8000930:	f000 fcc6 	bl	80012c0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000934:	6a3b      	ldr	r3, [r7, #32]
 8000936:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800093a:	2b00      	cmp	r3, #0
 800093c:	d103      	bne.n	8000946 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800093e:	f000 fc97 	bl	8001270 <HAL_RCC_GetPCLK1Freq>
 8000942:	6378      	str	r0, [r7, #52]	@ 0x34
 8000944:	e004      	b.n	8000950 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000946:	f000 fc93 	bl	8001270 <HAL_RCC_GetPCLK1Freq>
 800094a:	4603      	mov	r3, r0
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000952:	4a23      	ldr	r2, [pc, #140]	@ (80009e0 <HAL_InitTick+0xe8>)
 8000954:	fba2 2303 	umull	r2, r3, r2, r3
 8000958:	0c9b      	lsrs	r3, r3, #18
 800095a:	3b01      	subs	r3, #1
 800095c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800095e:	4b21      	ldr	r3, [pc, #132]	@ (80009e4 <HAL_InitTick+0xec>)
 8000960:	4a21      	ldr	r2, [pc, #132]	@ (80009e8 <HAL_InitTick+0xf0>)
 8000962:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000964:	4b1f      	ldr	r3, [pc, #124]	@ (80009e4 <HAL_InitTick+0xec>)
 8000966:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800096a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800096c:	4a1d      	ldr	r2, [pc, #116]	@ (80009e4 <HAL_InitTick+0xec>)
 800096e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000970:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000972:	4b1c      	ldr	r3, [pc, #112]	@ (80009e4 <HAL_InitTick+0xec>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000978:	4b1a      	ldr	r3, [pc, #104]	@ (80009e4 <HAL_InitTick+0xec>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097e:	4b19      	ldr	r3, [pc, #100]	@ (80009e4 <HAL_InitTick+0xec>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000984:	4817      	ldr	r0, [pc, #92]	@ (80009e4 <HAL_InitTick+0xec>)
 8000986:	f001 f99b 	bl	8001cc0 <HAL_TIM_Base_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000990:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000994:	2b00      	cmp	r3, #0
 8000996:	d11b      	bne.n	80009d0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000998:	4812      	ldr	r0, [pc, #72]	@ (80009e4 <HAL_InitTick+0xec>)
 800099a:	f001 f9eb 	bl	8001d74 <HAL_TIM_Base_Start_IT>
 800099e:	4603      	mov	r3, r0
 80009a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80009a4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d111      	bne.n	80009d0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009ac:	2036      	movs	r0, #54	@ 0x36
 80009ae:	f000 f997 	bl	8000ce0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2b0f      	cmp	r3, #15
 80009b6:	d808      	bhi.n	80009ca <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80009b8:	2200      	movs	r2, #0
 80009ba:	6879      	ldr	r1, [r7, #4]
 80009bc:	2036      	movs	r0, #54	@ 0x36
 80009be:	f000 f973 	bl	8000ca8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009c2:	4a0a      	ldr	r2, [pc, #40]	@ (80009ec <HAL_InitTick+0xf4>)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	6013      	str	r3, [r2, #0]
 80009c8:	e002      	b.n	80009d0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80009ca:	2301      	movs	r3, #1
 80009cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80009d0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3738      	adds	r7, #56	@ 0x38
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40023800 	.word	0x40023800
 80009e0:	431bde83 	.word	0x431bde83
 80009e4:	2000007c 	.word	0x2000007c
 80009e8:	40001000 	.word	0x40001000
 80009ec:	20000004 	.word	0x20000004

080009f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <NMI_Handler+0x4>

080009f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <HardFault_Handler+0x4>

08000a00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <MemManage_Handler+0x4>

08000a08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <BusFault_Handler+0x4>

08000a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <UsageFault_Handler+0x4>

08000a18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
	...

08000a28 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a2c:	4802      	ldr	r0, [pc, #8]	@ (8000a38 <TIM6_DAC_IRQHandler+0x10>)
 8000a2e:	f001 fa11 	bl	8001e54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	2000007c 	.word	0x2000007c

08000a3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a40:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <SystemInit+0x20>)
 8000a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a46:	4a05      	ldr	r2, [pc, #20]	@ (8000a5c <SystemInit+0x20>)
 8000a48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a98 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a64:	f7ff ffea 	bl	8000a3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a68:	480c      	ldr	r0, [pc, #48]	@ (8000a9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a6a:	490d      	ldr	r1, [pc, #52]	@ (8000aa0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000aa4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a70:	e002      	b.n	8000a78 <LoopCopyDataInit>

08000a72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a76:	3304      	adds	r3, #4

08000a78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a7c:	d3f9      	bcc.n	8000a72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a80:	4c0a      	ldr	r4, [pc, #40]	@ (8000aac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a84:	e001      	b.n	8000a8a <LoopFillZerobss>

08000a86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a88:	3204      	adds	r2, #4

08000a8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a8c:	d3fb      	bcc.n	8000a86 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000a8e:	f004 fc4b 	bl	8005328 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a92:	f7ff fd53 	bl	800053c <main>
  bx  lr    
 8000a96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000aa4:	0800543c 	.word	0x0800543c
  ldr r2, =_sbss
 8000aa8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000aac:	20004a18 	.word	0x20004a18

08000ab0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ab0:	e7fe      	b.n	8000ab0 <ADC_IRQHandler>
	...

08000ab4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ab8:	4b0e      	ldr	r3, [pc, #56]	@ (8000af4 <HAL_Init+0x40>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a0d      	ldr	r2, [pc, #52]	@ (8000af4 <HAL_Init+0x40>)
 8000abe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ac2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8000af4 <HAL_Init+0x40>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a0a      	ldr	r2, [pc, #40]	@ (8000af4 <HAL_Init+0x40>)
 8000aca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ace:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad0:	4b08      	ldr	r3, [pc, #32]	@ (8000af4 <HAL_Init+0x40>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a07      	ldr	r2, [pc, #28]	@ (8000af4 <HAL_Init+0x40>)
 8000ad6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ada:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000adc:	2003      	movs	r0, #3
 8000ade:	f000 f8d8 	bl	8000c92 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ae2:	200f      	movs	r0, #15
 8000ae4:	f7ff ff08 	bl	80008f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ae8:	f7ff fe92 	bl	8000810 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aec:	2300      	movs	r3, #0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40023c00 	.word	0x40023c00

08000af8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000afc:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <HAL_IncTick+0x20>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	461a      	mov	r2, r3
 8000b02:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <HAL_IncTick+0x24>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4413      	add	r3, r2
 8000b08:	4a04      	ldr	r2, [pc, #16]	@ (8000b1c <HAL_IncTick+0x24>)
 8000b0a:	6013      	str	r3, [r2, #0]
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	20000008 	.word	0x20000008
 8000b1c:	200000c4 	.word	0x200000c4

08000b20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  return uwTick;
 8000b24:	4b03      	ldr	r3, [pc, #12]	@ (8000b34 <HAL_GetTick+0x14>)
 8000b26:	681b      	ldr	r3, [r3, #0]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	200000c4 	.word	0x200000c4

08000b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b48:	4b0c      	ldr	r3, [pc, #48]	@ (8000b7c <__NVIC_SetPriorityGrouping+0x44>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b4e:	68ba      	ldr	r2, [r7, #8]
 8000b50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b54:	4013      	ands	r3, r2
 8000b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b6a:	4a04      	ldr	r2, [pc, #16]	@ (8000b7c <__NVIC_SetPriorityGrouping+0x44>)
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	60d3      	str	r3, [r2, #12]
}
 8000b70:	bf00      	nop
 8000b72:	3714      	adds	r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b84:	4b04      	ldr	r3, [pc, #16]	@ (8000b98 <__NVIC_GetPriorityGrouping+0x18>)
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	0a1b      	lsrs	r3, r3, #8
 8000b8a:	f003 0307 	and.w	r3, r3, #7
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	db0b      	blt.n	8000bc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	f003 021f 	and.w	r2, r3, #31
 8000bb4:	4907      	ldr	r1, [pc, #28]	@ (8000bd4 <__NVIC_EnableIRQ+0x38>)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	095b      	lsrs	r3, r3, #5
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	e000e100 	.word	0xe000e100

08000bd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	6039      	str	r1, [r7, #0]
 8000be2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	db0a      	blt.n	8000c02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	b2da      	uxtb	r2, r3
 8000bf0:	490c      	ldr	r1, [pc, #48]	@ (8000c24 <__NVIC_SetPriority+0x4c>)
 8000bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf6:	0112      	lsls	r2, r2, #4
 8000bf8:	b2d2      	uxtb	r2, r2
 8000bfa:	440b      	add	r3, r1
 8000bfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c00:	e00a      	b.n	8000c18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	4908      	ldr	r1, [pc, #32]	@ (8000c28 <__NVIC_SetPriority+0x50>)
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	f003 030f 	and.w	r3, r3, #15
 8000c0e:	3b04      	subs	r3, #4
 8000c10:	0112      	lsls	r2, r2, #4
 8000c12:	b2d2      	uxtb	r2, r2
 8000c14:	440b      	add	r3, r1
 8000c16:	761a      	strb	r2, [r3, #24]
}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	e000e100 	.word	0xe000e100
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b089      	sub	sp, #36	@ 0x24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	f1c3 0307 	rsb	r3, r3, #7
 8000c46:	2b04      	cmp	r3, #4
 8000c48:	bf28      	it	cs
 8000c4a:	2304      	movcs	r3, #4
 8000c4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	3304      	adds	r3, #4
 8000c52:	2b06      	cmp	r3, #6
 8000c54:	d902      	bls.n	8000c5c <NVIC_EncodePriority+0x30>
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	3b03      	subs	r3, #3
 8000c5a:	e000      	b.n	8000c5e <NVIC_EncodePriority+0x32>
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c60:	f04f 32ff 	mov.w	r2, #4294967295
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	43da      	mvns	r2, r3
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	401a      	ands	r2, r3
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c74:	f04f 31ff 	mov.w	r1, #4294967295
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7e:	43d9      	mvns	r1, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c84:	4313      	orrs	r3, r2
         );
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3724      	adds	r7, #36	@ 0x24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b082      	sub	sp, #8
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f7ff ff4c 	bl	8000b38 <__NVIC_SetPriorityGrouping>
}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
 8000cb4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cba:	f7ff ff61 	bl	8000b80 <__NVIC_GetPriorityGrouping>
 8000cbe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	68b9      	ldr	r1, [r7, #8]
 8000cc4:	6978      	ldr	r0, [r7, #20]
 8000cc6:	f7ff ffb1 	bl	8000c2c <NVIC_EncodePriority>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd0:	4611      	mov	r1, r2
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff ff80 	bl	8000bd8 <__NVIC_SetPriority>
}
 8000cd8:	bf00      	nop
 8000cda:	3718      	adds	r7, #24
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff ff54 	bl	8000b9c <__NVIC_EnableIRQ>
}
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b089      	sub	sp, #36	@ 0x24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d12:	2300      	movs	r3, #0
 8000d14:	61fb      	str	r3, [r7, #28]
 8000d16:	e165      	b.n	8000fe4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d18:	2201      	movs	r2, #1
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	697a      	ldr	r2, [r7, #20]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	f040 8154 	bne.w	8000fde <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f003 0303 	and.w	r3, r3, #3
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d005      	beq.n	8000d4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d4a:	2b02      	cmp	r3, #2
 8000d4c:	d130      	bne.n	8000db0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	689b      	ldr	r3, [r3, #8]
 8000d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	2203      	movs	r2, #3
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	4013      	ands	r3, r2
 8000d64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	68da      	ldr	r2, [r3, #12]
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d84:	2201      	movs	r2, #1
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	4013      	ands	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	091b      	lsrs	r3, r3, #4
 8000d9a:	f003 0201 	and.w	r2, r3, #1
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f003 0303 	and.w	r3, r3, #3
 8000db8:	2b03      	cmp	r3, #3
 8000dba:	d017      	beq.n	8000dec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	2203      	movs	r2, #3
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	689a      	ldr	r2, [r3, #8]
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f003 0303 	and.w	r3, r3, #3
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d123      	bne.n	8000e40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	08da      	lsrs	r2, r3, #3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3208      	adds	r2, #8
 8000e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	f003 0307 	and.w	r3, r3, #7
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	220f      	movs	r2, #15
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	691a      	ldr	r2, [r3, #16]
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	08da      	lsrs	r2, r3, #3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	3208      	adds	r2, #8
 8000e3a:	69b9      	ldr	r1, [r7, #24]
 8000e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	2203      	movs	r2, #3
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	4013      	ands	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f003 0203 	and.w	r2, r3, #3
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	f000 80ae 	beq.w	8000fde <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	4b5d      	ldr	r3, [pc, #372]	@ (8000ffc <HAL_GPIO_Init+0x300>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e8a:	4a5c      	ldr	r2, [pc, #368]	@ (8000ffc <HAL_GPIO_Init+0x300>)
 8000e8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e90:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e92:	4b5a      	ldr	r3, [pc, #360]	@ (8000ffc <HAL_GPIO_Init+0x300>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e9e:	4a58      	ldr	r2, [pc, #352]	@ (8001000 <HAL_GPIO_Init+0x304>)
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	089b      	lsrs	r3, r3, #2
 8000ea4:	3302      	adds	r3, #2
 8000ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	f003 0303 	and.w	r3, r3, #3
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	220f      	movs	r2, #15
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a4f      	ldr	r2, [pc, #316]	@ (8001004 <HAL_GPIO_Init+0x308>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d025      	beq.n	8000f16 <HAL_GPIO_Init+0x21a>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a4e      	ldr	r2, [pc, #312]	@ (8001008 <HAL_GPIO_Init+0x30c>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d01f      	beq.n	8000f12 <HAL_GPIO_Init+0x216>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a4d      	ldr	r2, [pc, #308]	@ (800100c <HAL_GPIO_Init+0x310>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d019      	beq.n	8000f0e <HAL_GPIO_Init+0x212>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a4c      	ldr	r2, [pc, #304]	@ (8001010 <HAL_GPIO_Init+0x314>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d013      	beq.n	8000f0a <HAL_GPIO_Init+0x20e>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a4b      	ldr	r2, [pc, #300]	@ (8001014 <HAL_GPIO_Init+0x318>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d00d      	beq.n	8000f06 <HAL_GPIO_Init+0x20a>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a4a      	ldr	r2, [pc, #296]	@ (8001018 <HAL_GPIO_Init+0x31c>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d007      	beq.n	8000f02 <HAL_GPIO_Init+0x206>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a49      	ldr	r2, [pc, #292]	@ (800101c <HAL_GPIO_Init+0x320>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d101      	bne.n	8000efe <HAL_GPIO_Init+0x202>
 8000efa:	2306      	movs	r3, #6
 8000efc:	e00c      	b.n	8000f18 <HAL_GPIO_Init+0x21c>
 8000efe:	2307      	movs	r3, #7
 8000f00:	e00a      	b.n	8000f18 <HAL_GPIO_Init+0x21c>
 8000f02:	2305      	movs	r3, #5
 8000f04:	e008      	b.n	8000f18 <HAL_GPIO_Init+0x21c>
 8000f06:	2304      	movs	r3, #4
 8000f08:	e006      	b.n	8000f18 <HAL_GPIO_Init+0x21c>
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e004      	b.n	8000f18 <HAL_GPIO_Init+0x21c>
 8000f0e:	2302      	movs	r3, #2
 8000f10:	e002      	b.n	8000f18 <HAL_GPIO_Init+0x21c>
 8000f12:	2301      	movs	r3, #1
 8000f14:	e000      	b.n	8000f18 <HAL_GPIO_Init+0x21c>
 8000f16:	2300      	movs	r3, #0
 8000f18:	69fa      	ldr	r2, [r7, #28]
 8000f1a:	f002 0203 	and.w	r2, r2, #3
 8000f1e:	0092      	lsls	r2, r2, #2
 8000f20:	4093      	lsls	r3, r2
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f28:	4935      	ldr	r1, [pc, #212]	@ (8001000 <HAL_GPIO_Init+0x304>)
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	089b      	lsrs	r3, r3, #2
 8000f2e:	3302      	adds	r3, #2
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f36:	4b3a      	ldr	r3, [pc, #232]	@ (8001020 <HAL_GPIO_Init+0x324>)
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4013      	ands	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d003      	beq.n	8000f5a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f5a:	4a31      	ldr	r2, [pc, #196]	@ (8001020 <HAL_GPIO_Init+0x324>)
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f60:	4b2f      	ldr	r3, [pc, #188]	@ (8001020 <HAL_GPIO_Init+0x324>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d003      	beq.n	8000f84 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f84:	4a26      	ldr	r2, [pc, #152]	@ (8001020 <HAL_GPIO_Init+0x324>)
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f8a:	4b25      	ldr	r3, [pc, #148]	@ (8001020 <HAL_GPIO_Init+0x324>)
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	43db      	mvns	r3, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4013      	ands	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fae:	4a1c      	ldr	r2, [pc, #112]	@ (8001020 <HAL_GPIO_Init+0x324>)
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fb4:	4b1a      	ldr	r3, [pc, #104]	@ (8001020 <HAL_GPIO_Init+0x324>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d003      	beq.n	8000fd8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fd8:	4a11      	ldr	r2, [pc, #68]	@ (8001020 <HAL_GPIO_Init+0x324>)
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	61fb      	str	r3, [r7, #28]
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	2b0f      	cmp	r3, #15
 8000fe8:	f67f ae96 	bls.w	8000d18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fec:	bf00      	nop
 8000fee:	bf00      	nop
 8000ff0:	3724      	adds	r7, #36	@ 0x24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40013800 	.word	0x40013800
 8001004:	40020000 	.word	0x40020000
 8001008:	40020400 	.word	0x40020400
 800100c:	40020800 	.word	0x40020800
 8001010:	40020c00 	.word	0x40020c00
 8001014:	40021000 	.word	0x40021000
 8001018:	40021400 	.word	0x40021400
 800101c:	40021800 	.word	0x40021800
 8001020:	40013c00 	.word	0x40013c00

08001024 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	460b      	mov	r3, r1
 800102e:	807b      	strh	r3, [r7, #2]
 8001030:	4613      	mov	r3, r2
 8001032:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001034:	787b      	ldrb	r3, [r7, #1]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d003      	beq.n	8001042 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800103a:	887a      	ldrh	r2, [r7, #2]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001040:	e003      	b.n	800104a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001042:	887b      	ldrh	r3, [r7, #2]
 8001044:	041a      	lsls	r2, r3, #16
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	619a      	str	r2, [r3, #24]
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001056:	b480      	push	{r7}
 8001058:	b085      	sub	sp, #20
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
 800105e:	460b      	mov	r3, r1
 8001060:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001068:	887a      	ldrh	r2, [r7, #2]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	4013      	ands	r3, r2
 800106e:	041a      	lsls	r2, r3, #16
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	43d9      	mvns	r1, r3
 8001074:	887b      	ldrh	r3, [r7, #2]
 8001076:	400b      	ands	r3, r1
 8001078:	431a      	orrs	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	619a      	str	r2, [r3, #24]
}
 800107e:	bf00      	nop
 8001080:	3714      	adds	r7, #20
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
	...

0800108c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d101      	bne.n	80010a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800109c:	2301      	movs	r3, #1
 800109e:	e0cc      	b.n	800123a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010a0:	4b68      	ldr	r3, [pc, #416]	@ (8001244 <HAL_RCC_ClockConfig+0x1b8>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 030f 	and.w	r3, r3, #15
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d90c      	bls.n	80010c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ae:	4b65      	ldr	r3, [pc, #404]	@ (8001244 <HAL_RCC_ClockConfig+0x1b8>)
 80010b0:	683a      	ldr	r2, [r7, #0]
 80010b2:	b2d2      	uxtb	r2, r2
 80010b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010b6:	4b63      	ldr	r3, [pc, #396]	@ (8001244 <HAL_RCC_ClockConfig+0x1b8>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 030f 	and.w	r3, r3, #15
 80010be:	683a      	ldr	r2, [r7, #0]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d001      	beq.n	80010c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e0b8      	b.n	800123a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 0302 	and.w	r3, r3, #2
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d020      	beq.n	8001116 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 0304 	and.w	r3, r3, #4
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d005      	beq.n	80010ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010e0:	4b59      	ldr	r3, [pc, #356]	@ (8001248 <HAL_RCC_ClockConfig+0x1bc>)
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	4a58      	ldr	r2, [pc, #352]	@ (8001248 <HAL_RCC_ClockConfig+0x1bc>)
 80010e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80010ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 0308 	and.w	r3, r3, #8
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d005      	beq.n	8001104 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010f8:	4b53      	ldr	r3, [pc, #332]	@ (8001248 <HAL_RCC_ClockConfig+0x1bc>)
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	4a52      	ldr	r2, [pc, #328]	@ (8001248 <HAL_RCC_ClockConfig+0x1bc>)
 80010fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001102:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001104:	4b50      	ldr	r3, [pc, #320]	@ (8001248 <HAL_RCC_ClockConfig+0x1bc>)
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	494d      	ldr	r1, [pc, #308]	@ (8001248 <HAL_RCC_ClockConfig+0x1bc>)
 8001112:	4313      	orrs	r3, r2
 8001114:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	2b00      	cmp	r3, #0
 8001120:	d044      	beq.n	80011ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d107      	bne.n	800113a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800112a:	4b47      	ldr	r3, [pc, #284]	@ (8001248 <HAL_RCC_ClockConfig+0x1bc>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d119      	bne.n	800116a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e07f      	b.n	800123a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	2b02      	cmp	r3, #2
 8001140:	d003      	beq.n	800114a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001146:	2b03      	cmp	r3, #3
 8001148:	d107      	bne.n	800115a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800114a:	4b3f      	ldr	r3, [pc, #252]	@ (8001248 <HAL_RCC_ClockConfig+0x1bc>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d109      	bne.n	800116a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e06f      	b.n	800123a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800115a:	4b3b      	ldr	r3, [pc, #236]	@ (8001248 <HAL_RCC_ClockConfig+0x1bc>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	2b00      	cmp	r3, #0
 8001164:	d101      	bne.n	800116a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e067      	b.n	800123a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800116a:	4b37      	ldr	r3, [pc, #220]	@ (8001248 <HAL_RCC_ClockConfig+0x1bc>)
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f023 0203 	bic.w	r2, r3, #3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	4934      	ldr	r1, [pc, #208]	@ (8001248 <HAL_RCC_ClockConfig+0x1bc>)
 8001178:	4313      	orrs	r3, r2
 800117a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800117c:	f7ff fcd0 	bl	8000b20 <HAL_GetTick>
 8001180:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001182:	e00a      	b.n	800119a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001184:	f7ff fccc 	bl	8000b20 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001192:	4293      	cmp	r3, r2
 8001194:	d901      	bls.n	800119a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e04f      	b.n	800123a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800119a:	4b2b      	ldr	r3, [pc, #172]	@ (8001248 <HAL_RCC_ClockConfig+0x1bc>)
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	f003 020c 	and.w	r2, r3, #12
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d1eb      	bne.n	8001184 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011ac:	4b25      	ldr	r3, [pc, #148]	@ (8001244 <HAL_RCC_ClockConfig+0x1b8>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 030f 	and.w	r3, r3, #15
 80011b4:	683a      	ldr	r2, [r7, #0]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d20c      	bcs.n	80011d4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ba:	4b22      	ldr	r3, [pc, #136]	@ (8001244 <HAL_RCC_ClockConfig+0x1b8>)
 80011bc:	683a      	ldr	r2, [r7, #0]
 80011be:	b2d2      	uxtb	r2, r2
 80011c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011c2:	4b20      	ldr	r3, [pc, #128]	@ (8001244 <HAL_RCC_ClockConfig+0x1b8>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 030f 	and.w	r3, r3, #15
 80011ca:	683a      	ldr	r2, [r7, #0]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d001      	beq.n	80011d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e032      	b.n	800123a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 0304 	and.w	r3, r3, #4
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d008      	beq.n	80011f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011e0:	4b19      	ldr	r3, [pc, #100]	@ (8001248 <HAL_RCC_ClockConfig+0x1bc>)
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	4916      	ldr	r1, [pc, #88]	@ (8001248 <HAL_RCC_ClockConfig+0x1bc>)
 80011ee:	4313      	orrs	r3, r2
 80011f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0308 	and.w	r3, r3, #8
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d009      	beq.n	8001212 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011fe:	4b12      	ldr	r3, [pc, #72]	@ (8001248 <HAL_RCC_ClockConfig+0x1bc>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	691b      	ldr	r3, [r3, #16]
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	490e      	ldr	r1, [pc, #56]	@ (8001248 <HAL_RCC_ClockConfig+0x1bc>)
 800120e:	4313      	orrs	r3, r2
 8001210:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001212:	f000 f887 	bl	8001324 <HAL_RCC_GetSysClockFreq>
 8001216:	4602      	mov	r2, r0
 8001218:	4b0b      	ldr	r3, [pc, #44]	@ (8001248 <HAL_RCC_ClockConfig+0x1bc>)
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	091b      	lsrs	r3, r3, #4
 800121e:	f003 030f 	and.w	r3, r3, #15
 8001222:	490a      	ldr	r1, [pc, #40]	@ (800124c <HAL_RCC_ClockConfig+0x1c0>)
 8001224:	5ccb      	ldrb	r3, [r1, r3]
 8001226:	fa22 f303 	lsr.w	r3, r2, r3
 800122a:	4a09      	ldr	r2, [pc, #36]	@ (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 800122c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800122e:	4b09      	ldr	r3, [pc, #36]	@ (8001254 <HAL_RCC_ClockConfig+0x1c8>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff fb60 	bl	80008f8 <HAL_InitTick>

  return HAL_OK;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40023c00 	.word	0x40023c00
 8001248:	40023800 	.word	0x40023800
 800124c:	08005414 	.word	0x08005414
 8001250:	20000000 	.word	0x20000000
 8001254:	20000004 	.word	0x20000004

08001258 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800125c:	4b03      	ldr	r3, [pc, #12]	@ (800126c <HAL_RCC_GetHCLKFreq+0x14>)
 800125e:	681b      	ldr	r3, [r3, #0]
}
 8001260:	4618      	mov	r0, r3
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	20000000 	.word	0x20000000

08001270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001274:	f7ff fff0 	bl	8001258 <HAL_RCC_GetHCLKFreq>
 8001278:	4602      	mov	r2, r0
 800127a:	4b05      	ldr	r3, [pc, #20]	@ (8001290 <HAL_RCC_GetPCLK1Freq+0x20>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	0a9b      	lsrs	r3, r3, #10
 8001280:	f003 0307 	and.w	r3, r3, #7
 8001284:	4903      	ldr	r1, [pc, #12]	@ (8001294 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001286:	5ccb      	ldrb	r3, [r1, r3]
 8001288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800128c:	4618      	mov	r0, r3
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40023800 	.word	0x40023800
 8001294:	08005424 	.word	0x08005424

08001298 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800129c:	f7ff ffdc 	bl	8001258 <HAL_RCC_GetHCLKFreq>
 80012a0:	4602      	mov	r2, r0
 80012a2:	4b05      	ldr	r3, [pc, #20]	@ (80012b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	0b5b      	lsrs	r3, r3, #13
 80012a8:	f003 0307 	and.w	r3, r3, #7
 80012ac:	4903      	ldr	r1, [pc, #12]	@ (80012bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80012ae:	5ccb      	ldrb	r3, [r1, r3]
 80012b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40023800 	.word	0x40023800
 80012bc:	08005424 	.word	0x08005424

080012c0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	220f      	movs	r2, #15
 80012ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80012d0:	4b12      	ldr	r3, [pc, #72]	@ (800131c <HAL_RCC_GetClockConfig+0x5c>)
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	f003 0203 	and.w	r2, r3, #3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80012dc:	4b0f      	ldr	r3, [pc, #60]	@ (800131c <HAL_RCC_GetClockConfig+0x5c>)
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80012e8:	4b0c      	ldr	r3, [pc, #48]	@ (800131c <HAL_RCC_GetClockConfig+0x5c>)
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80012f4:	4b09      	ldr	r3, [pc, #36]	@ (800131c <HAL_RCC_GetClockConfig+0x5c>)
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	08db      	lsrs	r3, r3, #3
 80012fa:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001302:	4b07      	ldr	r3, [pc, #28]	@ (8001320 <HAL_RCC_GetClockConfig+0x60>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 020f 	and.w	r2, r3, #15
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	601a      	str	r2, [r3, #0]
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	40023800 	.word	0x40023800
 8001320:	40023c00 	.word	0x40023c00

08001324 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001324:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001328:	b0ae      	sub	sp, #184	@ 0xb8
 800132a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800132c:	2300      	movs	r3, #0
 800132e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001332:	2300      	movs	r3, #0
 8001334:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001338:	2300      	movs	r3, #0
 800133a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800133e:	2300      	movs	r3, #0
 8001340:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001344:	2300      	movs	r3, #0
 8001346:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800134a:	4bcb      	ldr	r3, [pc, #812]	@ (8001678 <HAL_RCC_GetSysClockFreq+0x354>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f003 030c 	and.w	r3, r3, #12
 8001352:	2b0c      	cmp	r3, #12
 8001354:	f200 8206 	bhi.w	8001764 <HAL_RCC_GetSysClockFreq+0x440>
 8001358:	a201      	add	r2, pc, #4	@ (adr r2, 8001360 <HAL_RCC_GetSysClockFreq+0x3c>)
 800135a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800135e:	bf00      	nop
 8001360:	08001395 	.word	0x08001395
 8001364:	08001765 	.word	0x08001765
 8001368:	08001765 	.word	0x08001765
 800136c:	08001765 	.word	0x08001765
 8001370:	0800139d 	.word	0x0800139d
 8001374:	08001765 	.word	0x08001765
 8001378:	08001765 	.word	0x08001765
 800137c:	08001765 	.word	0x08001765
 8001380:	080013a5 	.word	0x080013a5
 8001384:	08001765 	.word	0x08001765
 8001388:	08001765 	.word	0x08001765
 800138c:	08001765 	.word	0x08001765
 8001390:	08001595 	.word	0x08001595
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001394:	4bb9      	ldr	r3, [pc, #740]	@ (800167c <HAL_RCC_GetSysClockFreq+0x358>)
 8001396:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800139a:	e1e7      	b.n	800176c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800139c:	4bb8      	ldr	r3, [pc, #736]	@ (8001680 <HAL_RCC_GetSysClockFreq+0x35c>)
 800139e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80013a2:	e1e3      	b.n	800176c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013a4:	4bb4      	ldr	r3, [pc, #720]	@ (8001678 <HAL_RCC_GetSysClockFreq+0x354>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80013ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013b0:	4bb1      	ldr	r3, [pc, #708]	@ (8001678 <HAL_RCC_GetSysClockFreq+0x354>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d071      	beq.n	80014a0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013bc:	4bae      	ldr	r3, [pc, #696]	@ (8001678 <HAL_RCC_GetSysClockFreq+0x354>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	099b      	lsrs	r3, r3, #6
 80013c2:	2200      	movs	r2, #0
 80013c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80013c8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80013cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80013d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80013d8:	2300      	movs	r3, #0
 80013da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80013de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80013e2:	4622      	mov	r2, r4
 80013e4:	462b      	mov	r3, r5
 80013e6:	f04f 0000 	mov.w	r0, #0
 80013ea:	f04f 0100 	mov.w	r1, #0
 80013ee:	0159      	lsls	r1, r3, #5
 80013f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80013f4:	0150      	lsls	r0, r2, #5
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	4621      	mov	r1, r4
 80013fc:	1a51      	subs	r1, r2, r1
 80013fe:	6439      	str	r1, [r7, #64]	@ 0x40
 8001400:	4629      	mov	r1, r5
 8001402:	eb63 0301 	sbc.w	r3, r3, r1
 8001406:	647b      	str	r3, [r7, #68]	@ 0x44
 8001408:	f04f 0200 	mov.w	r2, #0
 800140c:	f04f 0300 	mov.w	r3, #0
 8001410:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001414:	4649      	mov	r1, r9
 8001416:	018b      	lsls	r3, r1, #6
 8001418:	4641      	mov	r1, r8
 800141a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800141e:	4641      	mov	r1, r8
 8001420:	018a      	lsls	r2, r1, #6
 8001422:	4641      	mov	r1, r8
 8001424:	1a51      	subs	r1, r2, r1
 8001426:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001428:	4649      	mov	r1, r9
 800142a:	eb63 0301 	sbc.w	r3, r3, r1
 800142e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001430:	f04f 0200 	mov.w	r2, #0
 8001434:	f04f 0300 	mov.w	r3, #0
 8001438:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800143c:	4649      	mov	r1, r9
 800143e:	00cb      	lsls	r3, r1, #3
 8001440:	4641      	mov	r1, r8
 8001442:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001446:	4641      	mov	r1, r8
 8001448:	00ca      	lsls	r2, r1, #3
 800144a:	4610      	mov	r0, r2
 800144c:	4619      	mov	r1, r3
 800144e:	4603      	mov	r3, r0
 8001450:	4622      	mov	r2, r4
 8001452:	189b      	adds	r3, r3, r2
 8001454:	633b      	str	r3, [r7, #48]	@ 0x30
 8001456:	462b      	mov	r3, r5
 8001458:	460a      	mov	r2, r1
 800145a:	eb42 0303 	adc.w	r3, r2, r3
 800145e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001460:	f04f 0200 	mov.w	r2, #0
 8001464:	f04f 0300 	mov.w	r3, #0
 8001468:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800146c:	4629      	mov	r1, r5
 800146e:	024b      	lsls	r3, r1, #9
 8001470:	4621      	mov	r1, r4
 8001472:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001476:	4621      	mov	r1, r4
 8001478:	024a      	lsls	r2, r1, #9
 800147a:	4610      	mov	r0, r2
 800147c:	4619      	mov	r1, r3
 800147e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001482:	2200      	movs	r2, #0
 8001484:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001488:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800148c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001490:	f7fe febe 	bl	8000210 <__aeabi_uldivmod>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	4613      	mov	r3, r2
 800149a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800149e:	e067      	b.n	8001570 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014a0:	4b75      	ldr	r3, [pc, #468]	@ (8001678 <HAL_RCC_GetSysClockFreq+0x354>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	099b      	lsrs	r3, r3, #6
 80014a6:	2200      	movs	r2, #0
 80014a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80014ac:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80014b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80014b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80014ba:	2300      	movs	r3, #0
 80014bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80014be:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80014c2:	4622      	mov	r2, r4
 80014c4:	462b      	mov	r3, r5
 80014c6:	f04f 0000 	mov.w	r0, #0
 80014ca:	f04f 0100 	mov.w	r1, #0
 80014ce:	0159      	lsls	r1, r3, #5
 80014d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014d4:	0150      	lsls	r0, r2, #5
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4621      	mov	r1, r4
 80014dc:	1a51      	subs	r1, r2, r1
 80014de:	62b9      	str	r1, [r7, #40]	@ 0x28
 80014e0:	4629      	mov	r1, r5
 80014e2:	eb63 0301 	sbc.w	r3, r3, r1
 80014e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014e8:	f04f 0200 	mov.w	r2, #0
 80014ec:	f04f 0300 	mov.w	r3, #0
 80014f0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80014f4:	4649      	mov	r1, r9
 80014f6:	018b      	lsls	r3, r1, #6
 80014f8:	4641      	mov	r1, r8
 80014fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014fe:	4641      	mov	r1, r8
 8001500:	018a      	lsls	r2, r1, #6
 8001502:	4641      	mov	r1, r8
 8001504:	ebb2 0a01 	subs.w	sl, r2, r1
 8001508:	4649      	mov	r1, r9
 800150a:	eb63 0b01 	sbc.w	fp, r3, r1
 800150e:	f04f 0200 	mov.w	r2, #0
 8001512:	f04f 0300 	mov.w	r3, #0
 8001516:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800151a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800151e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001522:	4692      	mov	sl, r2
 8001524:	469b      	mov	fp, r3
 8001526:	4623      	mov	r3, r4
 8001528:	eb1a 0303 	adds.w	r3, sl, r3
 800152c:	623b      	str	r3, [r7, #32]
 800152e:	462b      	mov	r3, r5
 8001530:	eb4b 0303 	adc.w	r3, fp, r3
 8001534:	627b      	str	r3, [r7, #36]	@ 0x24
 8001536:	f04f 0200 	mov.w	r2, #0
 800153a:	f04f 0300 	mov.w	r3, #0
 800153e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001542:	4629      	mov	r1, r5
 8001544:	028b      	lsls	r3, r1, #10
 8001546:	4621      	mov	r1, r4
 8001548:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800154c:	4621      	mov	r1, r4
 800154e:	028a      	lsls	r2, r1, #10
 8001550:	4610      	mov	r0, r2
 8001552:	4619      	mov	r1, r3
 8001554:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001558:	2200      	movs	r2, #0
 800155a:	673b      	str	r3, [r7, #112]	@ 0x70
 800155c:	677a      	str	r2, [r7, #116]	@ 0x74
 800155e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001562:	f7fe fe55 	bl	8000210 <__aeabi_uldivmod>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	4613      	mov	r3, r2
 800156c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001570:	4b41      	ldr	r3, [pc, #260]	@ (8001678 <HAL_RCC_GetSysClockFreq+0x354>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	0c1b      	lsrs	r3, r3, #16
 8001576:	f003 0303 	and.w	r3, r3, #3
 800157a:	3301      	adds	r3, #1
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001582:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001586:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800158a:	fbb2 f3f3 	udiv	r3, r2, r3
 800158e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001592:	e0eb      	b.n	800176c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001594:	4b38      	ldr	r3, [pc, #224]	@ (8001678 <HAL_RCC_GetSysClockFreq+0x354>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800159c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015a0:	4b35      	ldr	r3, [pc, #212]	@ (8001678 <HAL_RCC_GetSysClockFreq+0x354>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d06b      	beq.n	8001684 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015ac:	4b32      	ldr	r3, [pc, #200]	@ (8001678 <HAL_RCC_GetSysClockFreq+0x354>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	099b      	lsrs	r3, r3, #6
 80015b2:	2200      	movs	r2, #0
 80015b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80015b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80015b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80015ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015be:	663b      	str	r3, [r7, #96]	@ 0x60
 80015c0:	2300      	movs	r3, #0
 80015c2:	667b      	str	r3, [r7, #100]	@ 0x64
 80015c4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80015c8:	4622      	mov	r2, r4
 80015ca:	462b      	mov	r3, r5
 80015cc:	f04f 0000 	mov.w	r0, #0
 80015d0:	f04f 0100 	mov.w	r1, #0
 80015d4:	0159      	lsls	r1, r3, #5
 80015d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015da:	0150      	lsls	r0, r2, #5
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	4621      	mov	r1, r4
 80015e2:	1a51      	subs	r1, r2, r1
 80015e4:	61b9      	str	r1, [r7, #24]
 80015e6:	4629      	mov	r1, r5
 80015e8:	eb63 0301 	sbc.w	r3, r3, r1
 80015ec:	61fb      	str	r3, [r7, #28]
 80015ee:	f04f 0200 	mov.w	r2, #0
 80015f2:	f04f 0300 	mov.w	r3, #0
 80015f6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80015fa:	4659      	mov	r1, fp
 80015fc:	018b      	lsls	r3, r1, #6
 80015fe:	4651      	mov	r1, sl
 8001600:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001604:	4651      	mov	r1, sl
 8001606:	018a      	lsls	r2, r1, #6
 8001608:	4651      	mov	r1, sl
 800160a:	ebb2 0801 	subs.w	r8, r2, r1
 800160e:	4659      	mov	r1, fp
 8001610:	eb63 0901 	sbc.w	r9, r3, r1
 8001614:	f04f 0200 	mov.w	r2, #0
 8001618:	f04f 0300 	mov.w	r3, #0
 800161c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001620:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001624:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001628:	4690      	mov	r8, r2
 800162a:	4699      	mov	r9, r3
 800162c:	4623      	mov	r3, r4
 800162e:	eb18 0303 	adds.w	r3, r8, r3
 8001632:	613b      	str	r3, [r7, #16]
 8001634:	462b      	mov	r3, r5
 8001636:	eb49 0303 	adc.w	r3, r9, r3
 800163a:	617b      	str	r3, [r7, #20]
 800163c:	f04f 0200 	mov.w	r2, #0
 8001640:	f04f 0300 	mov.w	r3, #0
 8001644:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001648:	4629      	mov	r1, r5
 800164a:	024b      	lsls	r3, r1, #9
 800164c:	4621      	mov	r1, r4
 800164e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001652:	4621      	mov	r1, r4
 8001654:	024a      	lsls	r2, r1, #9
 8001656:	4610      	mov	r0, r2
 8001658:	4619      	mov	r1, r3
 800165a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800165e:	2200      	movs	r2, #0
 8001660:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001662:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001664:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001668:	f7fe fdd2 	bl	8000210 <__aeabi_uldivmod>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	4613      	mov	r3, r2
 8001672:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001676:	e065      	b.n	8001744 <HAL_RCC_GetSysClockFreq+0x420>
 8001678:	40023800 	.word	0x40023800
 800167c:	00f42400 	.word	0x00f42400
 8001680:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001684:	4b3d      	ldr	r3, [pc, #244]	@ (800177c <HAL_RCC_GetSysClockFreq+0x458>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	099b      	lsrs	r3, r3, #6
 800168a:	2200      	movs	r2, #0
 800168c:	4618      	mov	r0, r3
 800168e:	4611      	mov	r1, r2
 8001690:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001694:	653b      	str	r3, [r7, #80]	@ 0x50
 8001696:	2300      	movs	r3, #0
 8001698:	657b      	str	r3, [r7, #84]	@ 0x54
 800169a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800169e:	4642      	mov	r2, r8
 80016a0:	464b      	mov	r3, r9
 80016a2:	f04f 0000 	mov.w	r0, #0
 80016a6:	f04f 0100 	mov.w	r1, #0
 80016aa:	0159      	lsls	r1, r3, #5
 80016ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016b0:	0150      	lsls	r0, r2, #5
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4641      	mov	r1, r8
 80016b8:	1a51      	subs	r1, r2, r1
 80016ba:	60b9      	str	r1, [r7, #8]
 80016bc:	4649      	mov	r1, r9
 80016be:	eb63 0301 	sbc.w	r3, r3, r1
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	f04f 0200 	mov.w	r2, #0
 80016c8:	f04f 0300 	mov.w	r3, #0
 80016cc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80016d0:	4659      	mov	r1, fp
 80016d2:	018b      	lsls	r3, r1, #6
 80016d4:	4651      	mov	r1, sl
 80016d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016da:	4651      	mov	r1, sl
 80016dc:	018a      	lsls	r2, r1, #6
 80016de:	4651      	mov	r1, sl
 80016e0:	1a54      	subs	r4, r2, r1
 80016e2:	4659      	mov	r1, fp
 80016e4:	eb63 0501 	sbc.w	r5, r3, r1
 80016e8:	f04f 0200 	mov.w	r2, #0
 80016ec:	f04f 0300 	mov.w	r3, #0
 80016f0:	00eb      	lsls	r3, r5, #3
 80016f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016f6:	00e2      	lsls	r2, r4, #3
 80016f8:	4614      	mov	r4, r2
 80016fa:	461d      	mov	r5, r3
 80016fc:	4643      	mov	r3, r8
 80016fe:	18e3      	adds	r3, r4, r3
 8001700:	603b      	str	r3, [r7, #0]
 8001702:	464b      	mov	r3, r9
 8001704:	eb45 0303 	adc.w	r3, r5, r3
 8001708:	607b      	str	r3, [r7, #4]
 800170a:	f04f 0200 	mov.w	r2, #0
 800170e:	f04f 0300 	mov.w	r3, #0
 8001712:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001716:	4629      	mov	r1, r5
 8001718:	028b      	lsls	r3, r1, #10
 800171a:	4621      	mov	r1, r4
 800171c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001720:	4621      	mov	r1, r4
 8001722:	028a      	lsls	r2, r1, #10
 8001724:	4610      	mov	r0, r2
 8001726:	4619      	mov	r1, r3
 8001728:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800172c:	2200      	movs	r2, #0
 800172e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001730:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001732:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001736:	f7fe fd6b 	bl	8000210 <__aeabi_uldivmod>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	4613      	mov	r3, r2
 8001740:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001744:	4b0d      	ldr	r3, [pc, #52]	@ (800177c <HAL_RCC_GetSysClockFreq+0x458>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	0f1b      	lsrs	r3, r3, #28
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001752:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001756:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800175a:	fbb2 f3f3 	udiv	r3, r2, r3
 800175e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001762:	e003      	b.n	800176c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001764:	4b06      	ldr	r3, [pc, #24]	@ (8001780 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001766:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800176a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800176c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001770:	4618      	mov	r0, r3
 8001772:	37b8      	adds	r7, #184	@ 0xb8
 8001774:	46bd      	mov	sp, r7
 8001776:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800177a:	bf00      	nop
 800177c:	40023800 	.word	0x40023800
 8001780:	00f42400 	.word	0x00f42400

08001784 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d101      	bne.n	8001796 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e28d      	b.n	8001cb2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f000 8083 	beq.w	80018aa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80017a4:	4b94      	ldr	r3, [pc, #592]	@ (80019f8 <HAL_RCC_OscConfig+0x274>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f003 030c 	and.w	r3, r3, #12
 80017ac:	2b04      	cmp	r3, #4
 80017ae:	d019      	beq.n	80017e4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80017b0:	4b91      	ldr	r3, [pc, #580]	@ (80019f8 <HAL_RCC_OscConfig+0x274>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f003 030c 	and.w	r3, r3, #12
        || \
 80017b8:	2b08      	cmp	r3, #8
 80017ba:	d106      	bne.n	80017ca <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80017bc:	4b8e      	ldr	r3, [pc, #568]	@ (80019f8 <HAL_RCC_OscConfig+0x274>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80017c8:	d00c      	beq.n	80017e4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017ca:	4b8b      	ldr	r3, [pc, #556]	@ (80019f8 <HAL_RCC_OscConfig+0x274>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80017d2:	2b0c      	cmp	r3, #12
 80017d4:	d112      	bne.n	80017fc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017d6:	4b88      	ldr	r3, [pc, #544]	@ (80019f8 <HAL_RCC_OscConfig+0x274>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80017e2:	d10b      	bne.n	80017fc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e4:	4b84      	ldr	r3, [pc, #528]	@ (80019f8 <HAL_RCC_OscConfig+0x274>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d05b      	beq.n	80018a8 <HAL_RCC_OscConfig+0x124>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d157      	bne.n	80018a8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e25a      	b.n	8001cb2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001804:	d106      	bne.n	8001814 <HAL_RCC_OscConfig+0x90>
 8001806:	4b7c      	ldr	r3, [pc, #496]	@ (80019f8 <HAL_RCC_OscConfig+0x274>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a7b      	ldr	r2, [pc, #492]	@ (80019f8 <HAL_RCC_OscConfig+0x274>)
 800180c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	e01d      	b.n	8001850 <HAL_RCC_OscConfig+0xcc>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800181c:	d10c      	bne.n	8001838 <HAL_RCC_OscConfig+0xb4>
 800181e:	4b76      	ldr	r3, [pc, #472]	@ (80019f8 <HAL_RCC_OscConfig+0x274>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a75      	ldr	r2, [pc, #468]	@ (80019f8 <HAL_RCC_OscConfig+0x274>)
 8001824:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	4b73      	ldr	r3, [pc, #460]	@ (80019f8 <HAL_RCC_OscConfig+0x274>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a72      	ldr	r2, [pc, #456]	@ (80019f8 <HAL_RCC_OscConfig+0x274>)
 8001830:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	e00b      	b.n	8001850 <HAL_RCC_OscConfig+0xcc>
 8001838:	4b6f      	ldr	r3, [pc, #444]	@ (80019f8 <HAL_RCC_OscConfig+0x274>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a6e      	ldr	r2, [pc, #440]	@ (80019f8 <HAL_RCC_OscConfig+0x274>)
 800183e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001842:	6013      	str	r3, [r2, #0]
 8001844:	4b6c      	ldr	r3, [pc, #432]	@ (80019f8 <HAL_RCC_OscConfig+0x274>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a6b      	ldr	r2, [pc, #428]	@ (80019f8 <HAL_RCC_OscConfig+0x274>)
 800184a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800184e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d013      	beq.n	8001880 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001858:	f7ff f962 	bl	8000b20 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001860:	f7ff f95e 	bl	8000b20 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b64      	cmp	r3, #100	@ 0x64
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e21f      	b.n	8001cb2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001872:	4b61      	ldr	r3, [pc, #388]	@ (80019f8 <HAL_RCC_OscConfig+0x274>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0f0      	beq.n	8001860 <HAL_RCC_OscConfig+0xdc>
 800187e:	e014      	b.n	80018aa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001880:	f7ff f94e 	bl	8000b20 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001888:	f7ff f94a 	bl	8000b20 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b64      	cmp	r3, #100	@ 0x64
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e20b      	b.n	8001cb2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800189a:	4b57      	ldr	r3, [pc, #348]	@ (80019f8 <HAL_RCC_OscConfig+0x274>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1f0      	bne.n	8001888 <HAL_RCC_OscConfig+0x104>
 80018a6:	e000      	b.n	80018aa <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d06f      	beq.n	8001996 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80018b6:	4b50      	ldr	r3, [pc, #320]	@ (80019f8 <HAL_RCC_OscConfig+0x274>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f003 030c 	and.w	r3, r3, #12
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d017      	beq.n	80018f2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80018c2:	4b4d      	ldr	r3, [pc, #308]	@ (80019f8 <HAL_RCC_OscConfig+0x274>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 030c 	and.w	r3, r3, #12
        || \
 80018ca:	2b08      	cmp	r3, #8
 80018cc:	d105      	bne.n	80018da <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80018ce:	4b4a      	ldr	r3, [pc, #296]	@ (80019f8 <HAL_RCC_OscConfig+0x274>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d00b      	beq.n	80018f2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018da:	4b47      	ldr	r3, [pc, #284]	@ (80019f8 <HAL_RCC_OscConfig+0x274>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80018e2:	2b0c      	cmp	r3, #12
 80018e4:	d11c      	bne.n	8001920 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018e6:	4b44      	ldr	r3, [pc, #272]	@ (80019f8 <HAL_RCC_OscConfig+0x274>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d116      	bne.n	8001920 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018f2:	4b41      	ldr	r3, [pc, #260]	@ (80019f8 <HAL_RCC_OscConfig+0x274>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d005      	beq.n	800190a <HAL_RCC_OscConfig+0x186>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d001      	beq.n	800190a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e1d3      	b.n	8001cb2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800190a:	4b3b      	ldr	r3, [pc, #236]	@ (80019f8 <HAL_RCC_OscConfig+0x274>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	4937      	ldr	r1, [pc, #220]	@ (80019f8 <HAL_RCC_OscConfig+0x274>)
 800191a:	4313      	orrs	r3, r2
 800191c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800191e:	e03a      	b.n	8001996 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d020      	beq.n	800196a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001928:	4b34      	ldr	r3, [pc, #208]	@ (80019fc <HAL_RCC_OscConfig+0x278>)
 800192a:	2201      	movs	r2, #1
 800192c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800192e:	f7ff f8f7 	bl	8000b20 <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001936:	f7ff f8f3 	bl	8000b20 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e1b4      	b.n	8001cb2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001948:	4b2b      	ldr	r3, [pc, #172]	@ (80019f8 <HAL_RCC_OscConfig+0x274>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d0f0      	beq.n	8001936 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001954:	4b28      	ldr	r3, [pc, #160]	@ (80019f8 <HAL_RCC_OscConfig+0x274>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	691b      	ldr	r3, [r3, #16]
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	4925      	ldr	r1, [pc, #148]	@ (80019f8 <HAL_RCC_OscConfig+0x274>)
 8001964:	4313      	orrs	r3, r2
 8001966:	600b      	str	r3, [r1, #0]
 8001968:	e015      	b.n	8001996 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800196a:	4b24      	ldr	r3, [pc, #144]	@ (80019fc <HAL_RCC_OscConfig+0x278>)
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001970:	f7ff f8d6 	bl	8000b20 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001978:	f7ff f8d2 	bl	8000b20 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e193      	b.n	8001cb2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800198a:	4b1b      	ldr	r3, [pc, #108]	@ (80019f8 <HAL_RCC_OscConfig+0x274>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1f0      	bne.n	8001978 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0308 	and.w	r3, r3, #8
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d036      	beq.n	8001a10 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d016      	beq.n	80019d8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019aa:	4b15      	ldr	r3, [pc, #84]	@ (8001a00 <HAL_RCC_OscConfig+0x27c>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b0:	f7ff f8b6 	bl	8000b20 <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019b8:	f7ff f8b2 	bl	8000b20 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e173      	b.n	8001cb2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ca:	4b0b      	ldr	r3, [pc, #44]	@ (80019f8 <HAL_RCC_OscConfig+0x274>)
 80019cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0f0      	beq.n	80019b8 <HAL_RCC_OscConfig+0x234>
 80019d6:	e01b      	b.n	8001a10 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019d8:	4b09      	ldr	r3, [pc, #36]	@ (8001a00 <HAL_RCC_OscConfig+0x27c>)
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019de:	f7ff f89f 	bl	8000b20 <HAL_GetTick>
 80019e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019e4:	e00e      	b.n	8001a04 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019e6:	f7ff f89b 	bl	8000b20 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d907      	bls.n	8001a04 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e15c      	b.n	8001cb2 <HAL_RCC_OscConfig+0x52e>
 80019f8:	40023800 	.word	0x40023800
 80019fc:	42470000 	.word	0x42470000
 8001a00:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a04:	4b8a      	ldr	r3, [pc, #552]	@ (8001c30 <HAL_RCC_OscConfig+0x4ac>)
 8001a06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1ea      	bne.n	80019e6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f000 8097 	beq.w	8001b4c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a22:	4b83      	ldr	r3, [pc, #524]	@ (8001c30 <HAL_RCC_OscConfig+0x4ac>)
 8001a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10f      	bne.n	8001a4e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	4b7f      	ldr	r3, [pc, #508]	@ (8001c30 <HAL_RCC_OscConfig+0x4ac>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a36:	4a7e      	ldr	r2, [pc, #504]	@ (8001c30 <HAL_RCC_OscConfig+0x4ac>)
 8001a38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a3e:	4b7c      	ldr	r3, [pc, #496]	@ (8001c30 <HAL_RCC_OscConfig+0x4ac>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a46:	60bb      	str	r3, [r7, #8]
 8001a48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a4e:	4b79      	ldr	r3, [pc, #484]	@ (8001c34 <HAL_RCC_OscConfig+0x4b0>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d118      	bne.n	8001a8c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a5a:	4b76      	ldr	r3, [pc, #472]	@ (8001c34 <HAL_RCC_OscConfig+0x4b0>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a75      	ldr	r2, [pc, #468]	@ (8001c34 <HAL_RCC_OscConfig+0x4b0>)
 8001a60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a66:	f7ff f85b 	bl	8000b20 <HAL_GetTick>
 8001a6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a6c:	e008      	b.n	8001a80 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a6e:	f7ff f857 	bl	8000b20 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e118      	b.n	8001cb2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a80:	4b6c      	ldr	r3, [pc, #432]	@ (8001c34 <HAL_RCC_OscConfig+0x4b0>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0f0      	beq.n	8001a6e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d106      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x31e>
 8001a94:	4b66      	ldr	r3, [pc, #408]	@ (8001c30 <HAL_RCC_OscConfig+0x4ac>)
 8001a96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a98:	4a65      	ldr	r2, [pc, #404]	@ (8001c30 <HAL_RCC_OscConfig+0x4ac>)
 8001a9a:	f043 0301 	orr.w	r3, r3, #1
 8001a9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001aa0:	e01c      	b.n	8001adc <HAL_RCC_OscConfig+0x358>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	2b05      	cmp	r3, #5
 8001aa8:	d10c      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x340>
 8001aaa:	4b61      	ldr	r3, [pc, #388]	@ (8001c30 <HAL_RCC_OscConfig+0x4ac>)
 8001aac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aae:	4a60      	ldr	r2, [pc, #384]	@ (8001c30 <HAL_RCC_OscConfig+0x4ac>)
 8001ab0:	f043 0304 	orr.w	r3, r3, #4
 8001ab4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ab6:	4b5e      	ldr	r3, [pc, #376]	@ (8001c30 <HAL_RCC_OscConfig+0x4ac>)
 8001ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aba:	4a5d      	ldr	r2, [pc, #372]	@ (8001c30 <HAL_RCC_OscConfig+0x4ac>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ac2:	e00b      	b.n	8001adc <HAL_RCC_OscConfig+0x358>
 8001ac4:	4b5a      	ldr	r3, [pc, #360]	@ (8001c30 <HAL_RCC_OscConfig+0x4ac>)
 8001ac6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ac8:	4a59      	ldr	r2, [pc, #356]	@ (8001c30 <HAL_RCC_OscConfig+0x4ac>)
 8001aca:	f023 0301 	bic.w	r3, r3, #1
 8001ace:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ad0:	4b57      	ldr	r3, [pc, #348]	@ (8001c30 <HAL_RCC_OscConfig+0x4ac>)
 8001ad2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ad4:	4a56      	ldr	r2, [pc, #344]	@ (8001c30 <HAL_RCC_OscConfig+0x4ac>)
 8001ad6:	f023 0304 	bic.w	r3, r3, #4
 8001ada:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d015      	beq.n	8001b10 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae4:	f7ff f81c 	bl	8000b20 <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aea:	e00a      	b.n	8001b02 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aec:	f7ff f818 	bl	8000b20 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e0d7      	b.n	8001cb2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b02:	4b4b      	ldr	r3, [pc, #300]	@ (8001c30 <HAL_RCC_OscConfig+0x4ac>)
 8001b04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d0ee      	beq.n	8001aec <HAL_RCC_OscConfig+0x368>
 8001b0e:	e014      	b.n	8001b3a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b10:	f7ff f806 	bl	8000b20 <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b16:	e00a      	b.n	8001b2e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b18:	f7ff f802 	bl	8000b20 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e0c1      	b.n	8001cb2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b2e:	4b40      	ldr	r3, [pc, #256]	@ (8001c30 <HAL_RCC_OscConfig+0x4ac>)
 8001b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1ee      	bne.n	8001b18 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b3a:	7dfb      	ldrb	r3, [r7, #23]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d105      	bne.n	8001b4c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b40:	4b3b      	ldr	r3, [pc, #236]	@ (8001c30 <HAL_RCC_OscConfig+0x4ac>)
 8001b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b44:	4a3a      	ldr	r2, [pc, #232]	@ (8001c30 <HAL_RCC_OscConfig+0x4ac>)
 8001b46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b4a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f000 80ad 	beq.w	8001cb0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b56:	4b36      	ldr	r3, [pc, #216]	@ (8001c30 <HAL_RCC_OscConfig+0x4ac>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 030c 	and.w	r3, r3, #12
 8001b5e:	2b08      	cmp	r3, #8
 8001b60:	d060      	beq.n	8001c24 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d145      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b6a:	4b33      	ldr	r3, [pc, #204]	@ (8001c38 <HAL_RCC_OscConfig+0x4b4>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b70:	f7fe ffd6 	bl	8000b20 <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b78:	f7fe ffd2 	bl	8000b20 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e093      	b.n	8001cb2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b8a:	4b29      	ldr	r3, [pc, #164]	@ (8001c30 <HAL_RCC_OscConfig+0x4ac>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1f0      	bne.n	8001b78 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	69da      	ldr	r2, [r3, #28]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a1b      	ldr	r3, [r3, #32]
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba4:	019b      	lsls	r3, r3, #6
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bac:	085b      	lsrs	r3, r3, #1
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	041b      	lsls	r3, r3, #16
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bb8:	061b      	lsls	r3, r3, #24
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc0:	071b      	lsls	r3, r3, #28
 8001bc2:	491b      	ldr	r1, [pc, #108]	@ (8001c30 <HAL_RCC_OscConfig+0x4ac>)
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c38 <HAL_RCC_OscConfig+0x4b4>)
 8001bca:	2201      	movs	r2, #1
 8001bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bce:	f7fe ffa7 	bl	8000b20 <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bd4:	e008      	b.n	8001be8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd6:	f7fe ffa3 	bl	8000b20 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e064      	b.n	8001cb2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001be8:	4b11      	ldr	r3, [pc, #68]	@ (8001c30 <HAL_RCC_OscConfig+0x4ac>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d0f0      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x452>
 8001bf4:	e05c      	b.n	8001cb0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf6:	4b10      	ldr	r3, [pc, #64]	@ (8001c38 <HAL_RCC_OscConfig+0x4b4>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfc:	f7fe ff90 	bl	8000b20 <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c04:	f7fe ff8c 	bl	8000b20 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e04d      	b.n	8001cb2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c16:	4b06      	ldr	r3, [pc, #24]	@ (8001c30 <HAL_RCC_OscConfig+0x4ac>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1f0      	bne.n	8001c04 <HAL_RCC_OscConfig+0x480>
 8001c22:	e045      	b.n	8001cb0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d107      	bne.n	8001c3c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e040      	b.n	8001cb2 <HAL_RCC_OscConfig+0x52e>
 8001c30:	40023800 	.word	0x40023800
 8001c34:	40007000 	.word	0x40007000
 8001c38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c3c:	4b1f      	ldr	r3, [pc, #124]	@ (8001cbc <HAL_RCC_OscConfig+0x538>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d030      	beq.n	8001cac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d129      	bne.n	8001cac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d122      	bne.n	8001cac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d119      	bne.n	8001cac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c82:	085b      	lsrs	r3, r3, #1
 8001c84:	3b01      	subs	r3, #1
 8001c86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d10f      	bne.n	8001cac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d107      	bne.n	8001cac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d001      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e000      	b.n	8001cb2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3718      	adds	r7, #24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40023800 	.word	0x40023800

08001cc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e041      	b.n	8001d56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d106      	bne.n	8001cec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 f839 	bl	8001d5e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2202      	movs	r2, #2
 8001cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3304      	adds	r3, #4
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4610      	mov	r0, r2
 8001d00:	f000 f9c0 	bl	8002084 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b083      	sub	sp, #12
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
	...

08001d74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d001      	beq.n	8001d8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e04e      	b.n	8001e2a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2202      	movs	r2, #2
 8001d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68da      	ldr	r2, [r3, #12]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0201 	orr.w	r2, r2, #1
 8001da2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a23      	ldr	r2, [pc, #140]	@ (8001e38 <HAL_TIM_Base_Start_IT+0xc4>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d022      	beq.n	8001df4 <HAL_TIM_Base_Start_IT+0x80>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001db6:	d01d      	beq.n	8001df4 <HAL_TIM_Base_Start_IT+0x80>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a1f      	ldr	r2, [pc, #124]	@ (8001e3c <HAL_TIM_Base_Start_IT+0xc8>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d018      	beq.n	8001df4 <HAL_TIM_Base_Start_IT+0x80>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a1e      	ldr	r2, [pc, #120]	@ (8001e40 <HAL_TIM_Base_Start_IT+0xcc>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d013      	beq.n	8001df4 <HAL_TIM_Base_Start_IT+0x80>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a1c      	ldr	r2, [pc, #112]	@ (8001e44 <HAL_TIM_Base_Start_IT+0xd0>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d00e      	beq.n	8001df4 <HAL_TIM_Base_Start_IT+0x80>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a1b      	ldr	r2, [pc, #108]	@ (8001e48 <HAL_TIM_Base_Start_IT+0xd4>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d009      	beq.n	8001df4 <HAL_TIM_Base_Start_IT+0x80>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a19      	ldr	r2, [pc, #100]	@ (8001e4c <HAL_TIM_Base_Start_IT+0xd8>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d004      	beq.n	8001df4 <HAL_TIM_Base_Start_IT+0x80>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a18      	ldr	r2, [pc, #96]	@ (8001e50 <HAL_TIM_Base_Start_IT+0xdc>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d111      	bne.n	8001e18 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2b06      	cmp	r3, #6
 8001e04:	d010      	beq.n	8001e28 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f042 0201 	orr.w	r2, r2, #1
 8001e14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e16:	e007      	b.n	8001e28 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f042 0201 	orr.w	r2, r2, #1
 8001e26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3714      	adds	r7, #20
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	40010000 	.word	0x40010000
 8001e3c:	40000400 	.word	0x40000400
 8001e40:	40000800 	.word	0x40000800
 8001e44:	40000c00 	.word	0x40000c00
 8001e48:	40010400 	.word	0x40010400
 8001e4c:	40014000 	.word	0x40014000
 8001e50:	40001800 	.word	0x40001800

08001e54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d020      	beq.n	8001eb8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d01b      	beq.n	8001eb8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f06f 0202 	mvn.w	r2, #2
 8001e88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	f003 0303 	and.w	r3, r3, #3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f8d2 	bl	8002048 <HAL_TIM_IC_CaptureCallback>
 8001ea4:	e005      	b.n	8001eb2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f8c4 	bl	8002034 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 f8d5 	bl	800205c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	f003 0304 	and.w	r3, r3, #4
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d020      	beq.n	8001f04 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d01b      	beq.n	8001f04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f06f 0204 	mvn.w	r2, #4
 8001ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2202      	movs	r2, #2
 8001eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f8ac 	bl	8002048 <HAL_TIM_IC_CaptureCallback>
 8001ef0:	e005      	b.n	8001efe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f89e 	bl	8002034 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 f8af 	bl	800205c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d020      	beq.n	8001f50 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f003 0308 	and.w	r3, r3, #8
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d01b      	beq.n	8001f50 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f06f 0208 	mvn.w	r2, #8
 8001f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2204      	movs	r2, #4
 8001f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f886 	bl	8002048 <HAL_TIM_IC_CaptureCallback>
 8001f3c:	e005      	b.n	8001f4a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f878 	bl	8002034 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 f889 	bl	800205c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	f003 0310 	and.w	r3, r3, #16
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d020      	beq.n	8001f9c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f003 0310 	and.w	r3, r3, #16
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d01b      	beq.n	8001f9c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f06f 0210 	mvn.w	r2, #16
 8001f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2208      	movs	r2, #8
 8001f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f860 	bl	8002048 <HAL_TIM_IC_CaptureCallback>
 8001f88:	e005      	b.n	8001f96 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f852 	bl	8002034 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 f863 	bl	800205c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00c      	beq.n	8001fc0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d007      	beq.n	8001fc0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f06f 0201 	mvn.w	r2, #1
 8001fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7fe fc10 	bl	80007e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00c      	beq.n	8001fe4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d007      	beq.n	8001fe4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 f906 	bl	80021f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00c      	beq.n	8002008 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d007      	beq.n	8002008 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f834 	bl	8002070 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	f003 0320 	and.w	r3, r3, #32
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00c      	beq.n	800202c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f003 0320 	and.w	r3, r3, #32
 8002018:	2b00      	cmp	r3, #0
 800201a:	d007      	beq.n	800202c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f06f 0220 	mvn.w	r2, #32
 8002024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f8d8 	bl	80021dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800202c:	bf00      	nop
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a46      	ldr	r2, [pc, #280]	@ (80021b0 <TIM_Base_SetConfig+0x12c>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d013      	beq.n	80020c4 <TIM_Base_SetConfig+0x40>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020a2:	d00f      	beq.n	80020c4 <TIM_Base_SetConfig+0x40>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a43      	ldr	r2, [pc, #268]	@ (80021b4 <TIM_Base_SetConfig+0x130>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d00b      	beq.n	80020c4 <TIM_Base_SetConfig+0x40>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a42      	ldr	r2, [pc, #264]	@ (80021b8 <TIM_Base_SetConfig+0x134>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d007      	beq.n	80020c4 <TIM_Base_SetConfig+0x40>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a41      	ldr	r2, [pc, #260]	@ (80021bc <TIM_Base_SetConfig+0x138>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d003      	beq.n	80020c4 <TIM_Base_SetConfig+0x40>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a40      	ldr	r2, [pc, #256]	@ (80021c0 <TIM_Base_SetConfig+0x13c>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d108      	bne.n	80020d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a35      	ldr	r2, [pc, #212]	@ (80021b0 <TIM_Base_SetConfig+0x12c>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d02b      	beq.n	8002136 <TIM_Base_SetConfig+0xb2>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020e4:	d027      	beq.n	8002136 <TIM_Base_SetConfig+0xb2>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a32      	ldr	r2, [pc, #200]	@ (80021b4 <TIM_Base_SetConfig+0x130>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d023      	beq.n	8002136 <TIM_Base_SetConfig+0xb2>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a31      	ldr	r2, [pc, #196]	@ (80021b8 <TIM_Base_SetConfig+0x134>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d01f      	beq.n	8002136 <TIM_Base_SetConfig+0xb2>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a30      	ldr	r2, [pc, #192]	@ (80021bc <TIM_Base_SetConfig+0x138>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d01b      	beq.n	8002136 <TIM_Base_SetConfig+0xb2>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a2f      	ldr	r2, [pc, #188]	@ (80021c0 <TIM_Base_SetConfig+0x13c>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d017      	beq.n	8002136 <TIM_Base_SetConfig+0xb2>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a2e      	ldr	r2, [pc, #184]	@ (80021c4 <TIM_Base_SetConfig+0x140>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d013      	beq.n	8002136 <TIM_Base_SetConfig+0xb2>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a2d      	ldr	r2, [pc, #180]	@ (80021c8 <TIM_Base_SetConfig+0x144>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d00f      	beq.n	8002136 <TIM_Base_SetConfig+0xb2>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a2c      	ldr	r2, [pc, #176]	@ (80021cc <TIM_Base_SetConfig+0x148>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d00b      	beq.n	8002136 <TIM_Base_SetConfig+0xb2>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a2b      	ldr	r2, [pc, #172]	@ (80021d0 <TIM_Base_SetConfig+0x14c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d007      	beq.n	8002136 <TIM_Base_SetConfig+0xb2>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a2a      	ldr	r2, [pc, #168]	@ (80021d4 <TIM_Base_SetConfig+0x150>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d003      	beq.n	8002136 <TIM_Base_SetConfig+0xb2>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a29      	ldr	r2, [pc, #164]	@ (80021d8 <TIM_Base_SetConfig+0x154>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d108      	bne.n	8002148 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800213c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	4313      	orrs	r3, r2
 8002146:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	4313      	orrs	r3, r2
 8002154:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a10      	ldr	r2, [pc, #64]	@ (80021b0 <TIM_Base_SetConfig+0x12c>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d003      	beq.n	800217c <TIM_Base_SetConfig+0xf8>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a12      	ldr	r2, [pc, #72]	@ (80021c0 <TIM_Base_SetConfig+0x13c>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d103      	bne.n	8002184 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	691a      	ldr	r2, [r3, #16]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b01      	cmp	r3, #1
 8002194:	d105      	bne.n	80021a2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	f023 0201 	bic.w	r2, r3, #1
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	611a      	str	r2, [r3, #16]
  }
}
 80021a2:	bf00      	nop
 80021a4:	3714      	adds	r7, #20
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	40010000 	.word	0x40010000
 80021b4:	40000400 	.word	0x40000400
 80021b8:	40000800 	.word	0x40000800
 80021bc:	40000c00 	.word	0x40000c00
 80021c0:	40010400 	.word	0x40010400
 80021c4:	40014000 	.word	0x40014000
 80021c8:	40014400 	.word	0x40014400
 80021cc:	40014800 	.word	0x40014800
 80021d0:	40001800 	.word	0x40001800
 80021d4:	40001c00 	.word	0x40001c00
 80021d8:	40002000 	.word	0x40002000

080021dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e042      	b.n	800229c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d106      	bne.n	8002230 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7fe fb1c 	bl	8000868 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2224      	movs	r2, #36	@ 0x24
 8002234:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68da      	ldr	r2, [r3, #12]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002246:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 f82b 	bl	80022a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	691a      	ldr	r2, [r3, #16]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800225c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	695a      	ldr	r2, [r3, #20]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800226c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68da      	ldr	r2, [r3, #12]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800227c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2220      	movs	r2, #32
 8002288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2220      	movs	r2, #32
 8002290:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022a8:	b0c0      	sub	sp, #256	@ 0x100
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80022bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022c0:	68d9      	ldr	r1, [r3, #12]
 80022c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	ea40 0301 	orr.w	r3, r0, r1
 80022cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	431a      	orrs	r2, r3
 80022dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	431a      	orrs	r2, r3
 80022e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80022f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80022fc:	f021 010c 	bic.w	r1, r1, #12
 8002300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800230a:	430b      	orrs	r3, r1
 800230c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800230e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800231a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800231e:	6999      	ldr	r1, [r3, #24]
 8002320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	ea40 0301 	orr.w	r3, r0, r1
 800232a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800232c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	4b8f      	ldr	r3, [pc, #572]	@ (8002570 <UART_SetConfig+0x2cc>)
 8002334:	429a      	cmp	r2, r3
 8002336:	d005      	beq.n	8002344 <UART_SetConfig+0xa0>
 8002338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	4b8d      	ldr	r3, [pc, #564]	@ (8002574 <UART_SetConfig+0x2d0>)
 8002340:	429a      	cmp	r2, r3
 8002342:	d104      	bne.n	800234e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002344:	f7fe ffa8 	bl	8001298 <HAL_RCC_GetPCLK2Freq>
 8002348:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800234c:	e003      	b.n	8002356 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800234e:	f7fe ff8f 	bl	8001270 <HAL_RCC_GetPCLK1Freq>
 8002352:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800235a:	69db      	ldr	r3, [r3, #28]
 800235c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002360:	f040 810c 	bne.w	800257c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002364:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002368:	2200      	movs	r2, #0
 800236a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800236e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002372:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002376:	4622      	mov	r2, r4
 8002378:	462b      	mov	r3, r5
 800237a:	1891      	adds	r1, r2, r2
 800237c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800237e:	415b      	adcs	r3, r3
 8002380:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002382:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002386:	4621      	mov	r1, r4
 8002388:	eb12 0801 	adds.w	r8, r2, r1
 800238c:	4629      	mov	r1, r5
 800238e:	eb43 0901 	adc.w	r9, r3, r1
 8002392:	f04f 0200 	mov.w	r2, #0
 8002396:	f04f 0300 	mov.w	r3, #0
 800239a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800239e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023a6:	4690      	mov	r8, r2
 80023a8:	4699      	mov	r9, r3
 80023aa:	4623      	mov	r3, r4
 80023ac:	eb18 0303 	adds.w	r3, r8, r3
 80023b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80023b4:	462b      	mov	r3, r5
 80023b6:	eb49 0303 	adc.w	r3, r9, r3
 80023ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80023be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80023ca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80023ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80023d2:	460b      	mov	r3, r1
 80023d4:	18db      	adds	r3, r3, r3
 80023d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80023d8:	4613      	mov	r3, r2
 80023da:	eb42 0303 	adc.w	r3, r2, r3
 80023de:	657b      	str	r3, [r7, #84]	@ 0x54
 80023e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80023e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80023e8:	f7fd ff12 	bl	8000210 <__aeabi_uldivmod>
 80023ec:	4602      	mov	r2, r0
 80023ee:	460b      	mov	r3, r1
 80023f0:	4b61      	ldr	r3, [pc, #388]	@ (8002578 <UART_SetConfig+0x2d4>)
 80023f2:	fba3 2302 	umull	r2, r3, r3, r2
 80023f6:	095b      	lsrs	r3, r3, #5
 80023f8:	011c      	lsls	r4, r3, #4
 80023fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80023fe:	2200      	movs	r2, #0
 8002400:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002404:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002408:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800240c:	4642      	mov	r2, r8
 800240e:	464b      	mov	r3, r9
 8002410:	1891      	adds	r1, r2, r2
 8002412:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002414:	415b      	adcs	r3, r3
 8002416:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002418:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800241c:	4641      	mov	r1, r8
 800241e:	eb12 0a01 	adds.w	sl, r2, r1
 8002422:	4649      	mov	r1, r9
 8002424:	eb43 0b01 	adc.w	fp, r3, r1
 8002428:	f04f 0200 	mov.w	r2, #0
 800242c:	f04f 0300 	mov.w	r3, #0
 8002430:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002434:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002438:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800243c:	4692      	mov	sl, r2
 800243e:	469b      	mov	fp, r3
 8002440:	4643      	mov	r3, r8
 8002442:	eb1a 0303 	adds.w	r3, sl, r3
 8002446:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800244a:	464b      	mov	r3, r9
 800244c:	eb4b 0303 	adc.w	r3, fp, r3
 8002450:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002460:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002464:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002468:	460b      	mov	r3, r1
 800246a:	18db      	adds	r3, r3, r3
 800246c:	643b      	str	r3, [r7, #64]	@ 0x40
 800246e:	4613      	mov	r3, r2
 8002470:	eb42 0303 	adc.w	r3, r2, r3
 8002474:	647b      	str	r3, [r7, #68]	@ 0x44
 8002476:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800247a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800247e:	f7fd fec7 	bl	8000210 <__aeabi_uldivmod>
 8002482:	4602      	mov	r2, r0
 8002484:	460b      	mov	r3, r1
 8002486:	4611      	mov	r1, r2
 8002488:	4b3b      	ldr	r3, [pc, #236]	@ (8002578 <UART_SetConfig+0x2d4>)
 800248a:	fba3 2301 	umull	r2, r3, r3, r1
 800248e:	095b      	lsrs	r3, r3, #5
 8002490:	2264      	movs	r2, #100	@ 0x64
 8002492:	fb02 f303 	mul.w	r3, r2, r3
 8002496:	1acb      	subs	r3, r1, r3
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800249e:	4b36      	ldr	r3, [pc, #216]	@ (8002578 <UART_SetConfig+0x2d4>)
 80024a0:	fba3 2302 	umull	r2, r3, r3, r2
 80024a4:	095b      	lsrs	r3, r3, #5
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80024ac:	441c      	add	r4, r3
 80024ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80024b2:	2200      	movs	r2, #0
 80024b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80024b8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80024bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80024c0:	4642      	mov	r2, r8
 80024c2:	464b      	mov	r3, r9
 80024c4:	1891      	adds	r1, r2, r2
 80024c6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80024c8:	415b      	adcs	r3, r3
 80024ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80024d0:	4641      	mov	r1, r8
 80024d2:	1851      	adds	r1, r2, r1
 80024d4:	6339      	str	r1, [r7, #48]	@ 0x30
 80024d6:	4649      	mov	r1, r9
 80024d8:	414b      	adcs	r3, r1
 80024da:	637b      	str	r3, [r7, #52]	@ 0x34
 80024dc:	f04f 0200 	mov.w	r2, #0
 80024e0:	f04f 0300 	mov.w	r3, #0
 80024e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80024e8:	4659      	mov	r1, fp
 80024ea:	00cb      	lsls	r3, r1, #3
 80024ec:	4651      	mov	r1, sl
 80024ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024f2:	4651      	mov	r1, sl
 80024f4:	00ca      	lsls	r2, r1, #3
 80024f6:	4610      	mov	r0, r2
 80024f8:	4619      	mov	r1, r3
 80024fa:	4603      	mov	r3, r0
 80024fc:	4642      	mov	r2, r8
 80024fe:	189b      	adds	r3, r3, r2
 8002500:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002504:	464b      	mov	r3, r9
 8002506:	460a      	mov	r2, r1
 8002508:	eb42 0303 	adc.w	r3, r2, r3
 800250c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800251c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002520:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002524:	460b      	mov	r3, r1
 8002526:	18db      	adds	r3, r3, r3
 8002528:	62bb      	str	r3, [r7, #40]	@ 0x28
 800252a:	4613      	mov	r3, r2
 800252c:	eb42 0303 	adc.w	r3, r2, r3
 8002530:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002532:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002536:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800253a:	f7fd fe69 	bl	8000210 <__aeabi_uldivmod>
 800253e:	4602      	mov	r2, r0
 8002540:	460b      	mov	r3, r1
 8002542:	4b0d      	ldr	r3, [pc, #52]	@ (8002578 <UART_SetConfig+0x2d4>)
 8002544:	fba3 1302 	umull	r1, r3, r3, r2
 8002548:	095b      	lsrs	r3, r3, #5
 800254a:	2164      	movs	r1, #100	@ 0x64
 800254c:	fb01 f303 	mul.w	r3, r1, r3
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	3332      	adds	r3, #50	@ 0x32
 8002556:	4a08      	ldr	r2, [pc, #32]	@ (8002578 <UART_SetConfig+0x2d4>)
 8002558:	fba2 2303 	umull	r2, r3, r2, r3
 800255c:	095b      	lsrs	r3, r3, #5
 800255e:	f003 0207 	and.w	r2, r3, #7
 8002562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4422      	add	r2, r4
 800256a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800256c:	e106      	b.n	800277c <UART_SetConfig+0x4d8>
 800256e:	bf00      	nop
 8002570:	40011000 	.word	0x40011000
 8002574:	40011400 	.word	0x40011400
 8002578:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800257c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002580:	2200      	movs	r2, #0
 8002582:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002586:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800258a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800258e:	4642      	mov	r2, r8
 8002590:	464b      	mov	r3, r9
 8002592:	1891      	adds	r1, r2, r2
 8002594:	6239      	str	r1, [r7, #32]
 8002596:	415b      	adcs	r3, r3
 8002598:	627b      	str	r3, [r7, #36]	@ 0x24
 800259a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800259e:	4641      	mov	r1, r8
 80025a0:	1854      	adds	r4, r2, r1
 80025a2:	4649      	mov	r1, r9
 80025a4:	eb43 0501 	adc.w	r5, r3, r1
 80025a8:	f04f 0200 	mov.w	r2, #0
 80025ac:	f04f 0300 	mov.w	r3, #0
 80025b0:	00eb      	lsls	r3, r5, #3
 80025b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025b6:	00e2      	lsls	r2, r4, #3
 80025b8:	4614      	mov	r4, r2
 80025ba:	461d      	mov	r5, r3
 80025bc:	4643      	mov	r3, r8
 80025be:	18e3      	adds	r3, r4, r3
 80025c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80025c4:	464b      	mov	r3, r9
 80025c6:	eb45 0303 	adc.w	r3, r5, r3
 80025ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80025ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80025da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80025de:	f04f 0200 	mov.w	r2, #0
 80025e2:	f04f 0300 	mov.w	r3, #0
 80025e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80025ea:	4629      	mov	r1, r5
 80025ec:	008b      	lsls	r3, r1, #2
 80025ee:	4621      	mov	r1, r4
 80025f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80025f4:	4621      	mov	r1, r4
 80025f6:	008a      	lsls	r2, r1, #2
 80025f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80025fc:	f7fd fe08 	bl	8000210 <__aeabi_uldivmod>
 8002600:	4602      	mov	r2, r0
 8002602:	460b      	mov	r3, r1
 8002604:	4b60      	ldr	r3, [pc, #384]	@ (8002788 <UART_SetConfig+0x4e4>)
 8002606:	fba3 2302 	umull	r2, r3, r3, r2
 800260a:	095b      	lsrs	r3, r3, #5
 800260c:	011c      	lsls	r4, r3, #4
 800260e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002612:	2200      	movs	r2, #0
 8002614:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002618:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800261c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002620:	4642      	mov	r2, r8
 8002622:	464b      	mov	r3, r9
 8002624:	1891      	adds	r1, r2, r2
 8002626:	61b9      	str	r1, [r7, #24]
 8002628:	415b      	adcs	r3, r3
 800262a:	61fb      	str	r3, [r7, #28]
 800262c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002630:	4641      	mov	r1, r8
 8002632:	1851      	adds	r1, r2, r1
 8002634:	6139      	str	r1, [r7, #16]
 8002636:	4649      	mov	r1, r9
 8002638:	414b      	adcs	r3, r1
 800263a:	617b      	str	r3, [r7, #20]
 800263c:	f04f 0200 	mov.w	r2, #0
 8002640:	f04f 0300 	mov.w	r3, #0
 8002644:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002648:	4659      	mov	r1, fp
 800264a:	00cb      	lsls	r3, r1, #3
 800264c:	4651      	mov	r1, sl
 800264e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002652:	4651      	mov	r1, sl
 8002654:	00ca      	lsls	r2, r1, #3
 8002656:	4610      	mov	r0, r2
 8002658:	4619      	mov	r1, r3
 800265a:	4603      	mov	r3, r0
 800265c:	4642      	mov	r2, r8
 800265e:	189b      	adds	r3, r3, r2
 8002660:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002664:	464b      	mov	r3, r9
 8002666:	460a      	mov	r2, r1
 8002668:	eb42 0303 	adc.w	r3, r2, r3
 800266c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	67bb      	str	r3, [r7, #120]	@ 0x78
 800267a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800267c:	f04f 0200 	mov.w	r2, #0
 8002680:	f04f 0300 	mov.w	r3, #0
 8002684:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002688:	4649      	mov	r1, r9
 800268a:	008b      	lsls	r3, r1, #2
 800268c:	4641      	mov	r1, r8
 800268e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002692:	4641      	mov	r1, r8
 8002694:	008a      	lsls	r2, r1, #2
 8002696:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800269a:	f7fd fdb9 	bl	8000210 <__aeabi_uldivmod>
 800269e:	4602      	mov	r2, r0
 80026a0:	460b      	mov	r3, r1
 80026a2:	4611      	mov	r1, r2
 80026a4:	4b38      	ldr	r3, [pc, #224]	@ (8002788 <UART_SetConfig+0x4e4>)
 80026a6:	fba3 2301 	umull	r2, r3, r3, r1
 80026aa:	095b      	lsrs	r3, r3, #5
 80026ac:	2264      	movs	r2, #100	@ 0x64
 80026ae:	fb02 f303 	mul.w	r3, r2, r3
 80026b2:	1acb      	subs	r3, r1, r3
 80026b4:	011b      	lsls	r3, r3, #4
 80026b6:	3332      	adds	r3, #50	@ 0x32
 80026b8:	4a33      	ldr	r2, [pc, #204]	@ (8002788 <UART_SetConfig+0x4e4>)
 80026ba:	fba2 2303 	umull	r2, r3, r2, r3
 80026be:	095b      	lsrs	r3, r3, #5
 80026c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026c4:	441c      	add	r4, r3
 80026c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026ca:	2200      	movs	r2, #0
 80026cc:	673b      	str	r3, [r7, #112]	@ 0x70
 80026ce:	677a      	str	r2, [r7, #116]	@ 0x74
 80026d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80026d4:	4642      	mov	r2, r8
 80026d6:	464b      	mov	r3, r9
 80026d8:	1891      	adds	r1, r2, r2
 80026da:	60b9      	str	r1, [r7, #8]
 80026dc:	415b      	adcs	r3, r3
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026e4:	4641      	mov	r1, r8
 80026e6:	1851      	adds	r1, r2, r1
 80026e8:	6039      	str	r1, [r7, #0]
 80026ea:	4649      	mov	r1, r9
 80026ec:	414b      	adcs	r3, r1
 80026ee:	607b      	str	r3, [r7, #4]
 80026f0:	f04f 0200 	mov.w	r2, #0
 80026f4:	f04f 0300 	mov.w	r3, #0
 80026f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80026fc:	4659      	mov	r1, fp
 80026fe:	00cb      	lsls	r3, r1, #3
 8002700:	4651      	mov	r1, sl
 8002702:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002706:	4651      	mov	r1, sl
 8002708:	00ca      	lsls	r2, r1, #3
 800270a:	4610      	mov	r0, r2
 800270c:	4619      	mov	r1, r3
 800270e:	4603      	mov	r3, r0
 8002710:	4642      	mov	r2, r8
 8002712:	189b      	adds	r3, r3, r2
 8002714:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002716:	464b      	mov	r3, r9
 8002718:	460a      	mov	r2, r1
 800271a:	eb42 0303 	adc.w	r3, r2, r3
 800271e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	663b      	str	r3, [r7, #96]	@ 0x60
 800272a:	667a      	str	r2, [r7, #100]	@ 0x64
 800272c:	f04f 0200 	mov.w	r2, #0
 8002730:	f04f 0300 	mov.w	r3, #0
 8002734:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002738:	4649      	mov	r1, r9
 800273a:	008b      	lsls	r3, r1, #2
 800273c:	4641      	mov	r1, r8
 800273e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002742:	4641      	mov	r1, r8
 8002744:	008a      	lsls	r2, r1, #2
 8002746:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800274a:	f7fd fd61 	bl	8000210 <__aeabi_uldivmod>
 800274e:	4602      	mov	r2, r0
 8002750:	460b      	mov	r3, r1
 8002752:	4b0d      	ldr	r3, [pc, #52]	@ (8002788 <UART_SetConfig+0x4e4>)
 8002754:	fba3 1302 	umull	r1, r3, r3, r2
 8002758:	095b      	lsrs	r3, r3, #5
 800275a:	2164      	movs	r1, #100	@ 0x64
 800275c:	fb01 f303 	mul.w	r3, r1, r3
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	011b      	lsls	r3, r3, #4
 8002764:	3332      	adds	r3, #50	@ 0x32
 8002766:	4a08      	ldr	r2, [pc, #32]	@ (8002788 <UART_SetConfig+0x4e4>)
 8002768:	fba2 2303 	umull	r2, r3, r2, r3
 800276c:	095b      	lsrs	r3, r3, #5
 800276e:	f003 020f 	and.w	r2, r3, #15
 8002772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4422      	add	r2, r4
 800277a:	609a      	str	r2, [r3, #8]
}
 800277c:	bf00      	nop
 800277e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002782:	46bd      	mov	sp, r7
 8002784:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002788:	51eb851f 	.word	0x51eb851f

0800278c <__NVIC_SetPriority>:
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	6039      	str	r1, [r7, #0]
 8002796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279c:	2b00      	cmp	r3, #0
 800279e:	db0a      	blt.n	80027b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	490c      	ldr	r1, [pc, #48]	@ (80027d8 <__NVIC_SetPriority+0x4c>)
 80027a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027aa:	0112      	lsls	r2, r2, #4
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	440b      	add	r3, r1
 80027b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80027b4:	e00a      	b.n	80027cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	4908      	ldr	r1, [pc, #32]	@ (80027dc <__NVIC_SetPriority+0x50>)
 80027bc:	79fb      	ldrb	r3, [r7, #7]
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	3b04      	subs	r3, #4
 80027c4:	0112      	lsls	r2, r2, #4
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	440b      	add	r3, r1
 80027ca:	761a      	strb	r2, [r3, #24]
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	e000e100 	.word	0xe000e100
 80027dc:	e000ed00 	.word	0xe000ed00

080027e0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80027e4:	4b05      	ldr	r3, [pc, #20]	@ (80027fc <SysTick_Handler+0x1c>)
 80027e6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80027e8:	f001 fd18 	bl	800421c <xTaskGetSchedulerState>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d001      	beq.n	80027f6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80027f2:	f002 fb11 	bl	8004e18 <xPortSysTickHandler>
  }
}
 80027f6:	bf00      	nop
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	e000e010 	.word	0xe000e010

08002800 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002804:	2100      	movs	r1, #0
 8002806:	f06f 0004 	mvn.w	r0, #4
 800280a:	f7ff ffbf 	bl	800278c <__NVIC_SetPriority>
#endif
}
 800280e:	bf00      	nop
 8002810:	bd80      	pop	{r7, pc}
	...

08002814 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800281a:	f3ef 8305 	mrs	r3, IPSR
 800281e:	603b      	str	r3, [r7, #0]
  return(result);
 8002820:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002826:	f06f 0305 	mvn.w	r3, #5
 800282a:	607b      	str	r3, [r7, #4]
 800282c:	e00c      	b.n	8002848 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800282e:	4b0a      	ldr	r3, [pc, #40]	@ (8002858 <osKernelInitialize+0x44>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d105      	bne.n	8002842 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002836:	4b08      	ldr	r3, [pc, #32]	@ (8002858 <osKernelInitialize+0x44>)
 8002838:	2201      	movs	r2, #1
 800283a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800283c:	2300      	movs	r3, #0
 800283e:	607b      	str	r3, [r7, #4]
 8002840:	e002      	b.n	8002848 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002842:	f04f 33ff 	mov.w	r3, #4294967295
 8002846:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002848:	687b      	ldr	r3, [r7, #4]
}
 800284a:	4618      	mov	r0, r3
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	200000c8 	.word	0x200000c8

0800285c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002862:	f3ef 8305 	mrs	r3, IPSR
 8002866:	603b      	str	r3, [r7, #0]
  return(result);
 8002868:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <osKernelStart+0x1a>
    stat = osErrorISR;
 800286e:	f06f 0305 	mvn.w	r3, #5
 8002872:	607b      	str	r3, [r7, #4]
 8002874:	e010      	b.n	8002898 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002876:	4b0b      	ldr	r3, [pc, #44]	@ (80028a4 <osKernelStart+0x48>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d109      	bne.n	8002892 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800287e:	f7ff ffbf 	bl	8002800 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002882:	4b08      	ldr	r3, [pc, #32]	@ (80028a4 <osKernelStart+0x48>)
 8002884:	2202      	movs	r2, #2
 8002886:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002888:	f001 f87a 	bl	8003980 <vTaskStartScheduler>
      stat = osOK;
 800288c:	2300      	movs	r3, #0
 800288e:	607b      	str	r3, [r7, #4]
 8002890:	e002      	b.n	8002898 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002892:	f04f 33ff 	mov.w	r3, #4294967295
 8002896:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002898:	687b      	ldr	r3, [r7, #4]
}
 800289a:	4618      	mov	r0, r3
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	200000c8 	.word	0x200000c8

080028a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b08e      	sub	sp, #56	@ 0x38
 80028ac:	af04      	add	r7, sp, #16
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80028b4:	2300      	movs	r3, #0
 80028b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028b8:	f3ef 8305 	mrs	r3, IPSR
 80028bc:	617b      	str	r3, [r7, #20]
  return(result);
 80028be:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d17e      	bne.n	80029c2 <osThreadNew+0x11a>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d07b      	beq.n	80029c2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80028ca:	2380      	movs	r3, #128	@ 0x80
 80028cc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80028ce:	2318      	movs	r3, #24
 80028d0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80028d2:	2300      	movs	r3, #0
 80028d4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80028d6:	f04f 33ff 	mov.w	r3, #4294967295
 80028da:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d045      	beq.n	800296e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d002      	beq.n	80028f0 <osThreadNew+0x48>
        name = attr->name;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d002      	beq.n	80028fe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d008      	beq.n	8002916 <osThreadNew+0x6e>
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	2b38      	cmp	r3, #56	@ 0x38
 8002908:	d805      	bhi.n	8002916 <osThreadNew+0x6e>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <osThreadNew+0x72>
        return (NULL);
 8002916:	2300      	movs	r3, #0
 8002918:	e054      	b.n	80029c4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	089b      	lsrs	r3, r3, #2
 8002928:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00e      	beq.n	8002950 <osThreadNew+0xa8>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	2b5b      	cmp	r3, #91	@ 0x5b
 8002938:	d90a      	bls.n	8002950 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800293e:	2b00      	cmp	r3, #0
 8002940:	d006      	beq.n	8002950 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d002      	beq.n	8002950 <osThreadNew+0xa8>
        mem = 1;
 800294a:	2301      	movs	r3, #1
 800294c:	61bb      	str	r3, [r7, #24]
 800294e:	e010      	b.n	8002972 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d10c      	bne.n	8002972 <osThreadNew+0xca>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d108      	bne.n	8002972 <osThreadNew+0xca>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d104      	bne.n	8002972 <osThreadNew+0xca>
          mem = 0;
 8002968:	2300      	movs	r3, #0
 800296a:	61bb      	str	r3, [r7, #24]
 800296c:	e001      	b.n	8002972 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800296e:	2300      	movs	r3, #0
 8002970:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d110      	bne.n	800299a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002980:	9202      	str	r2, [sp, #8]
 8002982:	9301      	str	r3, [sp, #4]
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	6a3a      	ldr	r2, [r7, #32]
 800298c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f000 fe1a 	bl	80035c8 <xTaskCreateStatic>
 8002994:	4603      	mov	r3, r0
 8002996:	613b      	str	r3, [r7, #16]
 8002998:	e013      	b.n	80029c2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d110      	bne.n	80029c2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80029a0:	6a3b      	ldr	r3, [r7, #32]
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	f107 0310 	add.w	r3, r7, #16
 80029a8:	9301      	str	r3, [sp, #4]
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f000 fe68 	bl	8003688 <xTaskCreate>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d001      	beq.n	80029c2 <osThreadNew+0x11a>
            hTask = NULL;
 80029be:	2300      	movs	r3, #0
 80029c0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80029c2:	693b      	ldr	r3, [r7, #16]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3728      	adds	r7, #40	@ 0x28
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029d4:	f3ef 8305 	mrs	r3, IPSR
 80029d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80029da:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <osDelay+0x1c>
    stat = osErrorISR;
 80029e0:	f06f 0305 	mvn.w	r3, #5
 80029e4:	60fb      	str	r3, [r7, #12]
 80029e6:	e007      	b.n	80029f8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80029e8:	2300      	movs	r3, #0
 80029ea:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d002      	beq.n	80029f8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 ff8e 	bl	8003914 <vTaskDelay>
    }
  }

  return (stat);
 80029f8:	68fb      	ldr	r3, [r7, #12]
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
	...

08002a04 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4a07      	ldr	r2, [pc, #28]	@ (8002a30 <vApplicationGetIdleTaskMemory+0x2c>)
 8002a14:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	4a06      	ldr	r2, [pc, #24]	@ (8002a34 <vApplicationGetIdleTaskMemory+0x30>)
 8002a1a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2280      	movs	r2, #128	@ 0x80
 8002a20:	601a      	str	r2, [r3, #0]
}
 8002a22:	bf00      	nop
 8002a24:	3714      	adds	r7, #20
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	200000cc 	.word	0x200000cc
 8002a34:	20000128 	.word	0x20000128

08002a38 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	4a07      	ldr	r2, [pc, #28]	@ (8002a64 <vApplicationGetTimerTaskMemory+0x2c>)
 8002a48:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	4a06      	ldr	r2, [pc, #24]	@ (8002a68 <vApplicationGetTimerTaskMemory+0x30>)
 8002a4e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a56:	601a      	str	r2, [r3, #0]
}
 8002a58:	bf00      	nop
 8002a5a:	3714      	adds	r7, #20
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	20000328 	.word	0x20000328
 8002a68:	20000384 	.word	0x20000384

08002a6c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f103 0208 	add.w	r2, r3, #8
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f04f 32ff 	mov.w	r2, #4294967295
 8002a84:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f103 0208 	add.w	r2, r3, #8
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f103 0208 	add.w	r2, r3, #8
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr

08002ac6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b085      	sub	sp, #20
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
 8002ace:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	1c5a      	adds	r2, r3, #1
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	601a      	str	r2, [r3, #0]
}
 8002b02:	bf00      	nop
 8002b04:	3714      	adds	r7, #20
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b085      	sub	sp, #20
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
 8002b16:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b24:	d103      	bne.n	8002b2e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	e00c      	b.n	8002b48 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	3308      	adds	r3, #8
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	e002      	b.n	8002b3c <vListInsert+0x2e>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d2f6      	bcs.n	8002b36 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	1c5a      	adds	r2, r3, #1
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	601a      	str	r2, [r3, #0]
}
 8002b74:	bf00      	nop
 8002b76:	3714      	adds	r7, #20
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6892      	ldr	r2, [r2, #8]
 8002b96:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	6852      	ldr	r2, [r2, #4]
 8002ba0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d103      	bne.n	8002bb4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	1e5a      	subs	r2, r3, #1
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10b      	bne.n	8002c00 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bec:	f383 8811 	msr	BASEPRI, r3
 8002bf0:	f3bf 8f6f 	isb	sy
 8002bf4:	f3bf 8f4f 	dsb	sy
 8002bf8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002bfa:	bf00      	nop
 8002bfc:	bf00      	nop
 8002bfe:	e7fd      	b.n	8002bfc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002c00:	f002 f87a 	bl	8004cf8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c0c:	68f9      	ldr	r1, [r7, #12]
 8002c0e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002c10:	fb01 f303 	mul.w	r3, r1, r3
 8002c14:	441a      	add	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c30:	3b01      	subs	r3, #1
 8002c32:	68f9      	ldr	r1, [r7, #12]
 8002c34:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002c36:	fb01 f303 	mul.w	r3, r1, r3
 8002c3a:	441a      	add	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	22ff      	movs	r2, #255	@ 0xff
 8002c44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	22ff      	movs	r2, #255	@ 0xff
 8002c4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d114      	bne.n	8002c80 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d01a      	beq.n	8002c94 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	3310      	adds	r3, #16
 8002c62:	4618      	mov	r0, r3
 8002c64:	f001 f91a 	bl	8003e9c <xTaskRemoveFromEventList>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d012      	beq.n	8002c94 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ca4 <xQueueGenericReset+0xd0>)
 8002c70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	f3bf 8f4f 	dsb	sy
 8002c7a:	f3bf 8f6f 	isb	sy
 8002c7e:	e009      	b.n	8002c94 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	3310      	adds	r3, #16
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff fef1 	bl	8002a6c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	3324      	adds	r3, #36	@ 0x24
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff feec 	bl	8002a6c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002c94:	f002 f862 	bl	8004d5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002c98:	2301      	movs	r3, #1
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	e000ed04 	.word	0xe000ed04

08002ca8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b08e      	sub	sp, #56	@ 0x38
 8002cac:	af02      	add	r7, sp, #8
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
 8002cb4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d10b      	bne.n	8002cd4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cc0:	f383 8811 	msr	BASEPRI, r3
 8002cc4:	f3bf 8f6f 	isb	sy
 8002cc8:	f3bf 8f4f 	dsb	sy
 8002ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002cce:	bf00      	nop
 8002cd0:	bf00      	nop
 8002cd2:	e7fd      	b.n	8002cd0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d10b      	bne.n	8002cf2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cde:	f383 8811 	msr	BASEPRI, r3
 8002ce2:	f3bf 8f6f 	isb	sy
 8002ce6:	f3bf 8f4f 	dsb	sy
 8002cea:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002cec:	bf00      	nop
 8002cee:	bf00      	nop
 8002cf0:	e7fd      	b.n	8002cee <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d002      	beq.n	8002cfe <xQueueGenericCreateStatic+0x56>
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <xQueueGenericCreateStatic+0x5a>
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e000      	b.n	8002d04 <xQueueGenericCreateStatic+0x5c>
 8002d02:	2300      	movs	r3, #0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d10b      	bne.n	8002d20 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d0c:	f383 8811 	msr	BASEPRI, r3
 8002d10:	f3bf 8f6f 	isb	sy
 8002d14:	f3bf 8f4f 	dsb	sy
 8002d18:	623b      	str	r3, [r7, #32]
}
 8002d1a:	bf00      	nop
 8002d1c:	bf00      	nop
 8002d1e:	e7fd      	b.n	8002d1c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d102      	bne.n	8002d2c <xQueueGenericCreateStatic+0x84>
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <xQueueGenericCreateStatic+0x88>
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e000      	b.n	8002d32 <xQueueGenericCreateStatic+0x8a>
 8002d30:	2300      	movs	r3, #0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10b      	bne.n	8002d4e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d3a:	f383 8811 	msr	BASEPRI, r3
 8002d3e:	f3bf 8f6f 	isb	sy
 8002d42:	f3bf 8f4f 	dsb	sy
 8002d46:	61fb      	str	r3, [r7, #28]
}
 8002d48:	bf00      	nop
 8002d4a:	bf00      	nop
 8002d4c:	e7fd      	b.n	8002d4a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002d4e:	2350      	movs	r3, #80	@ 0x50
 8002d50:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	2b50      	cmp	r3, #80	@ 0x50
 8002d56:	d00b      	beq.n	8002d70 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d5c:	f383 8811 	msr	BASEPRI, r3
 8002d60:	f3bf 8f6f 	isb	sy
 8002d64:	f3bf 8f4f 	dsb	sy
 8002d68:	61bb      	str	r3, [r7, #24]
}
 8002d6a:	bf00      	nop
 8002d6c:	bf00      	nop
 8002d6e:	e7fd      	b.n	8002d6c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002d70:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00d      	beq.n	8002d98 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d84:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d8a:	9300      	str	r3, [sp, #0]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	68b9      	ldr	r1, [r7, #8]
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 f805 	bl	8002da2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3730      	adds	r7, #48	@ 0x30
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b084      	sub	sp, #16
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	60f8      	str	r0, [r7, #12]
 8002daa:	60b9      	str	r1, [r7, #8]
 8002dac:	607a      	str	r2, [r7, #4]
 8002dae:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d103      	bne.n	8002dbe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	e002      	b.n	8002dc4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	68ba      	ldr	r2, [r7, #8]
 8002dce:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	69b8      	ldr	r0, [r7, #24]
 8002dd4:	f7ff fefe 	bl	8002bd4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	78fa      	ldrb	r2, [r7, #3]
 8002ddc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002de0:	bf00      	nop
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b08e      	sub	sp, #56	@ 0x38
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
 8002df4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002df6:	2300      	movs	r3, #0
 8002df8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d10b      	bne.n	8002e1c <xQueueGenericSend+0x34>
	__asm volatile
 8002e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e08:	f383 8811 	msr	BASEPRI, r3
 8002e0c:	f3bf 8f6f 	isb	sy
 8002e10:	f3bf 8f4f 	dsb	sy
 8002e14:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002e16:	bf00      	nop
 8002e18:	bf00      	nop
 8002e1a:	e7fd      	b.n	8002e18 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d103      	bne.n	8002e2a <xQueueGenericSend+0x42>
 8002e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <xQueueGenericSend+0x46>
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e000      	b.n	8002e30 <xQueueGenericSend+0x48>
 8002e2e:	2300      	movs	r3, #0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d10b      	bne.n	8002e4c <xQueueGenericSend+0x64>
	__asm volatile
 8002e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e38:	f383 8811 	msr	BASEPRI, r3
 8002e3c:	f3bf 8f6f 	isb	sy
 8002e40:	f3bf 8f4f 	dsb	sy
 8002e44:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002e46:	bf00      	nop
 8002e48:	bf00      	nop
 8002e4a:	e7fd      	b.n	8002e48 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d103      	bne.n	8002e5a <xQueueGenericSend+0x72>
 8002e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d101      	bne.n	8002e5e <xQueueGenericSend+0x76>
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e000      	b.n	8002e60 <xQueueGenericSend+0x78>
 8002e5e:	2300      	movs	r3, #0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d10b      	bne.n	8002e7c <xQueueGenericSend+0x94>
	__asm volatile
 8002e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e68:	f383 8811 	msr	BASEPRI, r3
 8002e6c:	f3bf 8f6f 	isb	sy
 8002e70:	f3bf 8f4f 	dsb	sy
 8002e74:	623b      	str	r3, [r7, #32]
}
 8002e76:	bf00      	nop
 8002e78:	bf00      	nop
 8002e7a:	e7fd      	b.n	8002e78 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e7c:	f001 f9ce 	bl	800421c <xTaskGetSchedulerState>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d102      	bne.n	8002e8c <xQueueGenericSend+0xa4>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d101      	bne.n	8002e90 <xQueueGenericSend+0xa8>
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e000      	b.n	8002e92 <xQueueGenericSend+0xaa>
 8002e90:	2300      	movs	r3, #0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10b      	bne.n	8002eae <xQueueGenericSend+0xc6>
	__asm volatile
 8002e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e9a:	f383 8811 	msr	BASEPRI, r3
 8002e9e:	f3bf 8f6f 	isb	sy
 8002ea2:	f3bf 8f4f 	dsb	sy
 8002ea6:	61fb      	str	r3, [r7, #28]
}
 8002ea8:	bf00      	nop
 8002eaa:	bf00      	nop
 8002eac:	e7fd      	b.n	8002eaa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002eae:	f001 ff23 	bl	8004cf8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d302      	bcc.n	8002ec4 <xQueueGenericSend+0xdc>
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d129      	bne.n	8002f18 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	68b9      	ldr	r1, [r7, #8]
 8002ec8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002eca:	f000 fa0f 	bl	80032ec <prvCopyDataToQueue>
 8002ece:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d010      	beq.n	8002efa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eda:	3324      	adds	r3, #36	@ 0x24
 8002edc:	4618      	mov	r0, r3
 8002ede:	f000 ffdd 	bl	8003e9c <xTaskRemoveFromEventList>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d013      	beq.n	8002f10 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002ee8:	4b3f      	ldr	r3, [pc, #252]	@ (8002fe8 <xQueueGenericSend+0x200>)
 8002eea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	f3bf 8f4f 	dsb	sy
 8002ef4:	f3bf 8f6f 	isb	sy
 8002ef8:	e00a      	b.n	8002f10 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d007      	beq.n	8002f10 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002f00:	4b39      	ldr	r3, [pc, #228]	@ (8002fe8 <xQueueGenericSend+0x200>)
 8002f02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	f3bf 8f4f 	dsb	sy
 8002f0c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002f10:	f001 ff24 	bl	8004d5c <vPortExitCritical>
				return pdPASS;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e063      	b.n	8002fe0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d103      	bne.n	8002f26 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f1e:	f001 ff1d 	bl	8004d5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002f22:	2300      	movs	r3, #0
 8002f24:	e05c      	b.n	8002fe0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d106      	bne.n	8002f3a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f2c:	f107 0314 	add.w	r3, r7, #20
 8002f30:	4618      	mov	r0, r3
 8002f32:	f001 f817 	bl	8003f64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f36:	2301      	movs	r3, #1
 8002f38:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f3a:	f001 ff0f 	bl	8004d5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f3e:	f000 fd87 	bl	8003a50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f42:	f001 fed9 	bl	8004cf8 <vPortEnterCritical>
 8002f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f4c:	b25b      	sxtb	r3, r3
 8002f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f52:	d103      	bne.n	8002f5c <xQueueGenericSend+0x174>
 8002f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f5e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f62:	b25b      	sxtb	r3, r3
 8002f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f68:	d103      	bne.n	8002f72 <xQueueGenericSend+0x18a>
 8002f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f72:	f001 fef3 	bl	8004d5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f76:	1d3a      	adds	r2, r7, #4
 8002f78:	f107 0314 	add.w	r3, r7, #20
 8002f7c:	4611      	mov	r1, r2
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f001 f806 	bl	8003f90 <xTaskCheckForTimeOut>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d124      	bne.n	8002fd4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002f8a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f8c:	f000 faa6 	bl	80034dc <prvIsQueueFull>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d018      	beq.n	8002fc8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f98:	3310      	adds	r3, #16
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	4611      	mov	r1, r2
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 ff2a 	bl	8003df8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002fa4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002fa6:	f000 fa31 	bl	800340c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002faa:	f000 fd5f 	bl	8003a6c <xTaskResumeAll>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f47f af7c 	bne.w	8002eae <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002fb6:	4b0c      	ldr	r3, [pc, #48]	@ (8002fe8 <xQueueGenericSend+0x200>)
 8002fb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fbc:	601a      	str	r2, [r3, #0]
 8002fbe:	f3bf 8f4f 	dsb	sy
 8002fc2:	f3bf 8f6f 	isb	sy
 8002fc6:	e772      	b.n	8002eae <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002fc8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002fca:	f000 fa1f 	bl	800340c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002fce:	f000 fd4d 	bl	8003a6c <xTaskResumeAll>
 8002fd2:	e76c      	b.n	8002eae <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002fd4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002fd6:	f000 fa19 	bl	800340c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002fda:	f000 fd47 	bl	8003a6c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002fde:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3738      	adds	r7, #56	@ 0x38
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	e000ed04 	.word	0xe000ed04

08002fec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b090      	sub	sp, #64	@ 0x40
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
 8002ff8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003000:	2b00      	cmp	r3, #0
 8003002:	d10b      	bne.n	800301c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003008:	f383 8811 	msr	BASEPRI, r3
 800300c:	f3bf 8f6f 	isb	sy
 8003010:	f3bf 8f4f 	dsb	sy
 8003014:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003016:	bf00      	nop
 8003018:	bf00      	nop
 800301a:	e7fd      	b.n	8003018 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d103      	bne.n	800302a <xQueueGenericSendFromISR+0x3e>
 8003022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <xQueueGenericSendFromISR+0x42>
 800302a:	2301      	movs	r3, #1
 800302c:	e000      	b.n	8003030 <xQueueGenericSendFromISR+0x44>
 800302e:	2300      	movs	r3, #0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10b      	bne.n	800304c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003038:	f383 8811 	msr	BASEPRI, r3
 800303c:	f3bf 8f6f 	isb	sy
 8003040:	f3bf 8f4f 	dsb	sy
 8003044:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003046:	bf00      	nop
 8003048:	bf00      	nop
 800304a:	e7fd      	b.n	8003048 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	2b02      	cmp	r3, #2
 8003050:	d103      	bne.n	800305a <xQueueGenericSendFromISR+0x6e>
 8003052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003056:	2b01      	cmp	r3, #1
 8003058:	d101      	bne.n	800305e <xQueueGenericSendFromISR+0x72>
 800305a:	2301      	movs	r3, #1
 800305c:	e000      	b.n	8003060 <xQueueGenericSendFromISR+0x74>
 800305e:	2300      	movs	r3, #0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10b      	bne.n	800307c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003068:	f383 8811 	msr	BASEPRI, r3
 800306c:	f3bf 8f6f 	isb	sy
 8003070:	f3bf 8f4f 	dsb	sy
 8003074:	623b      	str	r3, [r7, #32]
}
 8003076:	bf00      	nop
 8003078:	bf00      	nop
 800307a:	e7fd      	b.n	8003078 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800307c:	f001 ff1c 	bl	8004eb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003080:	f3ef 8211 	mrs	r2, BASEPRI
 8003084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003088:	f383 8811 	msr	BASEPRI, r3
 800308c:	f3bf 8f6f 	isb	sy
 8003090:	f3bf 8f4f 	dsb	sy
 8003094:	61fa      	str	r2, [r7, #28]
 8003096:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003098:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800309a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800309c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800309e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d302      	bcc.n	80030ae <xQueueGenericSendFromISR+0xc2>
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d12f      	bne.n	800310e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80030ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80030b4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	68b9      	ldr	r1, [r7, #8]
 80030c2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80030c4:	f000 f912 	bl	80032ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80030c8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80030cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d0:	d112      	bne.n	80030f8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d016      	beq.n	8003108 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030dc:	3324      	adds	r3, #36	@ 0x24
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 fedc 	bl	8003e9c <xTaskRemoveFromEventList>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00e      	beq.n	8003108 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d00b      	beq.n	8003108 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	e007      	b.n	8003108 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80030f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80030fc:	3301      	adds	r3, #1
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	b25a      	sxtb	r2, r3
 8003102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003104:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003108:	2301      	movs	r3, #1
 800310a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800310c:	e001      	b.n	8003112 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800310e:	2300      	movs	r3, #0
 8003110:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003114:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800311c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800311e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003120:	4618      	mov	r0, r3
 8003122:	3740      	adds	r7, #64	@ 0x40
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b08c      	sub	sp, #48	@ 0x30
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003134:	2300      	movs	r3, #0
 8003136:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800313c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10b      	bne.n	800315a <xQueueReceive+0x32>
	__asm volatile
 8003142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003146:	f383 8811 	msr	BASEPRI, r3
 800314a:	f3bf 8f6f 	isb	sy
 800314e:	f3bf 8f4f 	dsb	sy
 8003152:	623b      	str	r3, [r7, #32]
}
 8003154:	bf00      	nop
 8003156:	bf00      	nop
 8003158:	e7fd      	b.n	8003156 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d103      	bne.n	8003168 <xQueueReceive+0x40>
 8003160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <xQueueReceive+0x44>
 8003168:	2301      	movs	r3, #1
 800316a:	e000      	b.n	800316e <xQueueReceive+0x46>
 800316c:	2300      	movs	r3, #0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10b      	bne.n	800318a <xQueueReceive+0x62>
	__asm volatile
 8003172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003176:	f383 8811 	msr	BASEPRI, r3
 800317a:	f3bf 8f6f 	isb	sy
 800317e:	f3bf 8f4f 	dsb	sy
 8003182:	61fb      	str	r3, [r7, #28]
}
 8003184:	bf00      	nop
 8003186:	bf00      	nop
 8003188:	e7fd      	b.n	8003186 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800318a:	f001 f847 	bl	800421c <xTaskGetSchedulerState>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d102      	bne.n	800319a <xQueueReceive+0x72>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <xQueueReceive+0x76>
 800319a:	2301      	movs	r3, #1
 800319c:	e000      	b.n	80031a0 <xQueueReceive+0x78>
 800319e:	2300      	movs	r3, #0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10b      	bne.n	80031bc <xQueueReceive+0x94>
	__asm volatile
 80031a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031a8:	f383 8811 	msr	BASEPRI, r3
 80031ac:	f3bf 8f6f 	isb	sy
 80031b0:	f3bf 8f4f 	dsb	sy
 80031b4:	61bb      	str	r3, [r7, #24]
}
 80031b6:	bf00      	nop
 80031b8:	bf00      	nop
 80031ba:	e7fd      	b.n	80031b8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80031bc:	f001 fd9c 	bl	8004cf8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031c4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d01f      	beq.n	800320c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80031cc:	68b9      	ldr	r1, [r7, #8]
 80031ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031d0:	f000 f8f6 	bl	80033c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80031d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d6:	1e5a      	subs	r2, r3, #1
 80031d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031da:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00f      	beq.n	8003204 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031e6:	3310      	adds	r3, #16
 80031e8:	4618      	mov	r0, r3
 80031ea:	f000 fe57 	bl	8003e9c <xTaskRemoveFromEventList>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d007      	beq.n	8003204 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80031f4:	4b3c      	ldr	r3, [pc, #240]	@ (80032e8 <xQueueReceive+0x1c0>)
 80031f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	f3bf 8f4f 	dsb	sy
 8003200:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003204:	f001 fdaa 	bl	8004d5c <vPortExitCritical>
				return pdPASS;
 8003208:	2301      	movs	r3, #1
 800320a:	e069      	b.n	80032e0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d103      	bne.n	800321a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003212:	f001 fda3 	bl	8004d5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003216:	2300      	movs	r3, #0
 8003218:	e062      	b.n	80032e0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800321a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800321c:	2b00      	cmp	r3, #0
 800321e:	d106      	bne.n	800322e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003220:	f107 0310 	add.w	r3, r7, #16
 8003224:	4618      	mov	r0, r3
 8003226:	f000 fe9d 	bl	8003f64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800322a:	2301      	movs	r3, #1
 800322c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800322e:	f001 fd95 	bl	8004d5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003232:	f000 fc0d 	bl	8003a50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003236:	f001 fd5f 	bl	8004cf8 <vPortEnterCritical>
 800323a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800323c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003240:	b25b      	sxtb	r3, r3
 8003242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003246:	d103      	bne.n	8003250 <xQueueReceive+0x128>
 8003248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800324a:	2200      	movs	r2, #0
 800324c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003252:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003256:	b25b      	sxtb	r3, r3
 8003258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800325c:	d103      	bne.n	8003266 <xQueueReceive+0x13e>
 800325e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003260:	2200      	movs	r2, #0
 8003262:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003266:	f001 fd79 	bl	8004d5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800326a:	1d3a      	adds	r2, r7, #4
 800326c:	f107 0310 	add.w	r3, r7, #16
 8003270:	4611      	mov	r1, r2
 8003272:	4618      	mov	r0, r3
 8003274:	f000 fe8c 	bl	8003f90 <xTaskCheckForTimeOut>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d123      	bne.n	80032c6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800327e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003280:	f000 f916 	bl	80034b0 <prvIsQueueEmpty>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d017      	beq.n	80032ba <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800328a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800328c:	3324      	adds	r3, #36	@ 0x24
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	4611      	mov	r1, r2
 8003292:	4618      	mov	r0, r3
 8003294:	f000 fdb0 	bl	8003df8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003298:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800329a:	f000 f8b7 	bl	800340c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800329e:	f000 fbe5 	bl	8003a6c <xTaskResumeAll>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d189      	bne.n	80031bc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80032a8:	4b0f      	ldr	r3, [pc, #60]	@ (80032e8 <xQueueReceive+0x1c0>)
 80032aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032ae:	601a      	str	r2, [r3, #0]
 80032b0:	f3bf 8f4f 	dsb	sy
 80032b4:	f3bf 8f6f 	isb	sy
 80032b8:	e780      	b.n	80031bc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80032ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80032bc:	f000 f8a6 	bl	800340c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80032c0:	f000 fbd4 	bl	8003a6c <xTaskResumeAll>
 80032c4:	e77a      	b.n	80031bc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80032c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80032c8:	f000 f8a0 	bl	800340c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80032cc:	f000 fbce 	bl	8003a6c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80032d2:	f000 f8ed 	bl	80034b0 <prvIsQueueEmpty>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f43f af6f 	beq.w	80031bc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80032de:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3730      	adds	r7, #48	@ 0x30
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	e000ed04 	.word	0xe000ed04

080032ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80032f8:	2300      	movs	r3, #0
 80032fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003300:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10d      	bne.n	8003326 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d14d      	bne.n	80033ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	4618      	mov	r0, r3
 8003318:	f000 ff9e 	bl	8004258 <xTaskPriorityDisinherit>
 800331c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	609a      	str	r2, [r3, #8]
 8003324:	e043      	b.n	80033ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d119      	bne.n	8003360 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6858      	ldr	r0, [r3, #4]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003334:	461a      	mov	r2, r3
 8003336:	68b9      	ldr	r1, [r7, #8]
 8003338:	f002 f81a 	bl	8005370 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	685a      	ldr	r2, [r3, #4]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003344:	441a      	add	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	429a      	cmp	r2, r3
 8003354:	d32b      	bcc.n	80033ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	605a      	str	r2, [r3, #4]
 800335e:	e026      	b.n	80033ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	68d8      	ldr	r0, [r3, #12]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003368:	461a      	mov	r2, r3
 800336a:	68b9      	ldr	r1, [r7, #8]
 800336c:	f002 f800 	bl	8005370 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	68da      	ldr	r2, [r3, #12]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003378:	425b      	negs	r3, r3
 800337a:	441a      	add	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	68da      	ldr	r2, [r3, #12]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	429a      	cmp	r2, r3
 800338a:	d207      	bcs.n	800339c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003394:	425b      	negs	r3, r3
 8003396:	441a      	add	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d105      	bne.n	80033ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d002      	beq.n	80033ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	3b01      	subs	r3, #1
 80033ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1c5a      	adds	r2, r3, #1
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80033b6:	697b      	ldr	r3, [r7, #20]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3718      	adds	r7, #24
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d018      	beq.n	8003404 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033da:	441a      	add	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68da      	ldr	r2, [r3, #12]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d303      	bcc.n	80033f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68d9      	ldr	r1, [r3, #12]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fc:	461a      	mov	r2, r3
 80033fe:	6838      	ldr	r0, [r7, #0]
 8003400:	f001 ffb6 	bl	8005370 <memcpy>
	}
}
 8003404:	bf00      	nop
 8003406:	3708      	adds	r7, #8
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003414:	f001 fc70 	bl	8004cf8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800341e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003420:	e011      	b.n	8003446 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003426:	2b00      	cmp	r3, #0
 8003428:	d012      	beq.n	8003450 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	3324      	adds	r3, #36	@ 0x24
 800342e:	4618      	mov	r0, r3
 8003430:	f000 fd34 	bl	8003e9c <xTaskRemoveFromEventList>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800343a:	f000 fe0d 	bl	8004058 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800343e:	7bfb      	ldrb	r3, [r7, #15]
 8003440:	3b01      	subs	r3, #1
 8003442:	b2db      	uxtb	r3, r3
 8003444:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800344a:	2b00      	cmp	r3, #0
 800344c:	dce9      	bgt.n	8003422 <prvUnlockQueue+0x16>
 800344e:	e000      	b.n	8003452 <prvUnlockQueue+0x46>
					break;
 8003450:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	22ff      	movs	r2, #255	@ 0xff
 8003456:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800345a:	f001 fc7f 	bl	8004d5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800345e:	f001 fc4b 	bl	8004cf8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003468:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800346a:	e011      	b.n	8003490 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d012      	beq.n	800349a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	3310      	adds	r3, #16
 8003478:	4618      	mov	r0, r3
 800347a:	f000 fd0f 	bl	8003e9c <xTaskRemoveFromEventList>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d001      	beq.n	8003488 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003484:	f000 fde8 	bl	8004058 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003488:	7bbb      	ldrb	r3, [r7, #14]
 800348a:	3b01      	subs	r3, #1
 800348c:	b2db      	uxtb	r3, r3
 800348e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003490:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003494:	2b00      	cmp	r3, #0
 8003496:	dce9      	bgt.n	800346c <prvUnlockQueue+0x60>
 8003498:	e000      	b.n	800349c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800349a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	22ff      	movs	r2, #255	@ 0xff
 80034a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80034a4:	f001 fc5a 	bl	8004d5c <vPortExitCritical>
}
 80034a8:	bf00      	nop
 80034aa:	3710      	adds	r7, #16
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80034b8:	f001 fc1e 	bl	8004cf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d102      	bne.n	80034ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80034c4:	2301      	movs	r3, #1
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	e001      	b.n	80034ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80034ca:	2300      	movs	r3, #0
 80034cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80034ce:	f001 fc45 	bl	8004d5c <vPortExitCritical>

	return xReturn;
 80034d2:	68fb      	ldr	r3, [r7, #12]
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80034e4:	f001 fc08 	bl	8004cf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d102      	bne.n	80034fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80034f4:	2301      	movs	r3, #1
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	e001      	b.n	80034fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80034fa:	2300      	movs	r3, #0
 80034fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80034fe:	f001 fc2d 	bl	8004d5c <vPortExitCritical>

	return xReturn;
 8003502:	68fb      	ldr	r3, [r7, #12]
}
 8003504:	4618      	mov	r0, r3
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003516:	2300      	movs	r3, #0
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	e014      	b.n	8003546 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800351c:	4a0f      	ldr	r2, [pc, #60]	@ (800355c <vQueueAddToRegistry+0x50>)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10b      	bne.n	8003540 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003528:	490c      	ldr	r1, [pc, #48]	@ (800355c <vQueueAddToRegistry+0x50>)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003532:	4a0a      	ldr	r2, [pc, #40]	@ (800355c <vQueueAddToRegistry+0x50>)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	4413      	add	r3, r2
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800353e:	e006      	b.n	800354e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	3301      	adds	r3, #1
 8003544:	60fb      	str	r3, [r7, #12]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2b07      	cmp	r3, #7
 800354a:	d9e7      	bls.n	800351c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800354c:	bf00      	nop
 800354e:	bf00      	nop
 8003550:	3714      	adds	r7, #20
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	20000784 	.word	0x20000784

08003560 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003570:	f001 fbc2 	bl	8004cf8 <vPortEnterCritical>
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800357a:	b25b      	sxtb	r3, r3
 800357c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003580:	d103      	bne.n	800358a <vQueueWaitForMessageRestricted+0x2a>
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003590:	b25b      	sxtb	r3, r3
 8003592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003596:	d103      	bne.n	80035a0 <vQueueWaitForMessageRestricted+0x40>
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80035a0:	f001 fbdc 	bl	8004d5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d106      	bne.n	80035ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	3324      	adds	r3, #36	@ 0x24
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	68b9      	ldr	r1, [r7, #8]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f000 fc45 	bl	8003e44 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80035ba:	6978      	ldr	r0, [r7, #20]
 80035bc:	f7ff ff26 	bl	800340c <prvUnlockQueue>
	}
 80035c0:	bf00      	nop
 80035c2:	3718      	adds	r7, #24
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b08e      	sub	sp, #56	@ 0x38
 80035cc:	af04      	add	r7, sp, #16
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
 80035d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80035d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10b      	bne.n	80035f4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80035dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035e0:	f383 8811 	msr	BASEPRI, r3
 80035e4:	f3bf 8f6f 	isb	sy
 80035e8:	f3bf 8f4f 	dsb	sy
 80035ec:	623b      	str	r3, [r7, #32]
}
 80035ee:	bf00      	nop
 80035f0:	bf00      	nop
 80035f2:	e7fd      	b.n	80035f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80035f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10b      	bne.n	8003612 <xTaskCreateStatic+0x4a>
	__asm volatile
 80035fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035fe:	f383 8811 	msr	BASEPRI, r3
 8003602:	f3bf 8f6f 	isb	sy
 8003606:	f3bf 8f4f 	dsb	sy
 800360a:	61fb      	str	r3, [r7, #28]
}
 800360c:	bf00      	nop
 800360e:	bf00      	nop
 8003610:	e7fd      	b.n	800360e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003612:	235c      	movs	r3, #92	@ 0x5c
 8003614:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	2b5c      	cmp	r3, #92	@ 0x5c
 800361a:	d00b      	beq.n	8003634 <xTaskCreateStatic+0x6c>
	__asm volatile
 800361c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003620:	f383 8811 	msr	BASEPRI, r3
 8003624:	f3bf 8f6f 	isb	sy
 8003628:	f3bf 8f4f 	dsb	sy
 800362c:	61bb      	str	r3, [r7, #24]
}
 800362e:	bf00      	nop
 8003630:	bf00      	nop
 8003632:	e7fd      	b.n	8003630 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003634:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003638:	2b00      	cmp	r3, #0
 800363a:	d01e      	beq.n	800367a <xTaskCreateStatic+0xb2>
 800363c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800363e:	2b00      	cmp	r3, #0
 8003640:	d01b      	beq.n	800367a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003644:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003648:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800364a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800364c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800364e:	2202      	movs	r2, #2
 8003650:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003654:	2300      	movs	r3, #0
 8003656:	9303      	str	r3, [sp, #12]
 8003658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800365a:	9302      	str	r3, [sp, #8]
 800365c:	f107 0314 	add.w	r3, r7, #20
 8003660:	9301      	str	r3, [sp, #4]
 8003662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003664:	9300      	str	r3, [sp, #0]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	68b9      	ldr	r1, [r7, #8]
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f000 f850 	bl	8003712 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003672:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003674:	f000 f8de 	bl	8003834 <prvAddNewTaskToReadyList>
 8003678:	e001      	b.n	800367e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800367a:	2300      	movs	r3, #0
 800367c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800367e:	697b      	ldr	r3, [r7, #20]
	}
 8003680:	4618      	mov	r0, r3
 8003682:	3728      	adds	r7, #40	@ 0x28
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003688:	b580      	push	{r7, lr}
 800368a:	b08c      	sub	sp, #48	@ 0x30
 800368c:	af04      	add	r7, sp, #16
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	603b      	str	r3, [r7, #0]
 8003694:	4613      	mov	r3, r2
 8003696:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003698:	88fb      	ldrh	r3, [r7, #6]
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4618      	mov	r0, r3
 800369e:	f001 fc4d 	bl	8004f3c <pvPortMalloc>
 80036a2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00e      	beq.n	80036c8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80036aa:	205c      	movs	r0, #92	@ 0x5c
 80036ac:	f001 fc46 	bl	8004f3c <pvPortMalloc>
 80036b0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d003      	beq.n	80036c0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80036be:	e005      	b.n	80036cc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80036c0:	6978      	ldr	r0, [r7, #20]
 80036c2:	f001 fd09 	bl	80050d8 <vPortFree>
 80036c6:	e001      	b.n	80036cc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80036c8:	2300      	movs	r3, #0
 80036ca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d017      	beq.n	8003702 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80036da:	88fa      	ldrh	r2, [r7, #6]
 80036dc:	2300      	movs	r3, #0
 80036de:	9303      	str	r3, [sp, #12]
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	9302      	str	r3, [sp, #8]
 80036e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036e6:	9301      	str	r3, [sp, #4]
 80036e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	68b9      	ldr	r1, [r7, #8]
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f000 f80e 	bl	8003712 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036f6:	69f8      	ldr	r0, [r7, #28]
 80036f8:	f000 f89c 	bl	8003834 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80036fc:	2301      	movs	r3, #1
 80036fe:	61bb      	str	r3, [r7, #24]
 8003700:	e002      	b.n	8003708 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003702:	f04f 33ff 	mov.w	r3, #4294967295
 8003706:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003708:	69bb      	ldr	r3, [r7, #24]
	}
 800370a:	4618      	mov	r0, r3
 800370c:	3720      	adds	r7, #32
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b088      	sub	sp, #32
 8003716:	af00      	add	r7, sp, #0
 8003718:	60f8      	str	r0, [r7, #12]
 800371a:	60b9      	str	r1, [r7, #8]
 800371c:	607a      	str	r2, [r7, #4]
 800371e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003722:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	461a      	mov	r2, r3
 800372a:	21a5      	movs	r1, #165	@ 0xa5
 800372c:	f001 fdf4 	bl	8005318 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003732:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800373a:	3b01      	subs	r3, #1
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4413      	add	r3, r2
 8003740:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	f023 0307 	bic.w	r3, r3, #7
 8003748:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00b      	beq.n	800376c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003758:	f383 8811 	msr	BASEPRI, r3
 800375c:	f3bf 8f6f 	isb	sy
 8003760:	f3bf 8f4f 	dsb	sy
 8003764:	617b      	str	r3, [r7, #20]
}
 8003766:	bf00      	nop
 8003768:	bf00      	nop
 800376a:	e7fd      	b.n	8003768 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d01f      	beq.n	80037b2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003772:	2300      	movs	r3, #0
 8003774:	61fb      	str	r3, [r7, #28]
 8003776:	e012      	b.n	800379e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	4413      	add	r3, r2
 800377e:	7819      	ldrb	r1, [r3, #0]
 8003780:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	4413      	add	r3, r2
 8003786:	3334      	adds	r3, #52	@ 0x34
 8003788:	460a      	mov	r2, r1
 800378a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800378c:	68ba      	ldr	r2, [r7, #8]
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	4413      	add	r3, r2
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d006      	beq.n	80037a6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	3301      	adds	r3, #1
 800379c:	61fb      	str	r3, [r7, #28]
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	2b0f      	cmp	r3, #15
 80037a2:	d9e9      	bls.n	8003778 <prvInitialiseNewTask+0x66>
 80037a4:	e000      	b.n	80037a8 <prvInitialiseNewTask+0x96>
			{
				break;
 80037a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80037a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80037b0:	e003      	b.n	80037ba <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80037b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80037ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037bc:	2b37      	cmp	r3, #55	@ 0x37
 80037be:	d901      	bls.n	80037c4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80037c0:	2337      	movs	r3, #55	@ 0x37
 80037c2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80037c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80037c8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80037ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80037ce:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80037d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d2:	2200      	movs	r2, #0
 80037d4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80037d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d8:	3304      	adds	r3, #4
 80037da:	4618      	mov	r0, r3
 80037dc:	f7ff f966 	bl	8002aac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80037e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e2:	3318      	adds	r3, #24
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7ff f961 	bl	8002aac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80037ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037f2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80037f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80037fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037fe:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003802:	2200      	movs	r2, #0
 8003804:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003808:	2200      	movs	r2, #0
 800380a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	68f9      	ldr	r1, [r7, #12]
 8003812:	69b8      	ldr	r0, [r7, #24]
 8003814:	f001 f93e 	bl	8004a94 <pxPortInitialiseStack>
 8003818:	4602      	mov	r2, r0
 800381a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800381c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800381e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003820:	2b00      	cmp	r3, #0
 8003822:	d002      	beq.n	800382a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003826:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003828:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800382a:	bf00      	nop
 800382c:	3720      	adds	r7, #32
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
	...

08003834 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800383c:	f001 fa5c 	bl	8004cf8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003840:	4b2d      	ldr	r3, [pc, #180]	@ (80038f8 <prvAddNewTaskToReadyList+0xc4>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	3301      	adds	r3, #1
 8003846:	4a2c      	ldr	r2, [pc, #176]	@ (80038f8 <prvAddNewTaskToReadyList+0xc4>)
 8003848:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800384a:	4b2c      	ldr	r3, [pc, #176]	@ (80038fc <prvAddNewTaskToReadyList+0xc8>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d109      	bne.n	8003866 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003852:	4a2a      	ldr	r2, [pc, #168]	@ (80038fc <prvAddNewTaskToReadyList+0xc8>)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003858:	4b27      	ldr	r3, [pc, #156]	@ (80038f8 <prvAddNewTaskToReadyList+0xc4>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d110      	bne.n	8003882 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003860:	f000 fc1e 	bl	80040a0 <prvInitialiseTaskLists>
 8003864:	e00d      	b.n	8003882 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003866:	4b26      	ldr	r3, [pc, #152]	@ (8003900 <prvAddNewTaskToReadyList+0xcc>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d109      	bne.n	8003882 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800386e:	4b23      	ldr	r3, [pc, #140]	@ (80038fc <prvAddNewTaskToReadyList+0xc8>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003878:	429a      	cmp	r2, r3
 800387a:	d802      	bhi.n	8003882 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800387c:	4a1f      	ldr	r2, [pc, #124]	@ (80038fc <prvAddNewTaskToReadyList+0xc8>)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003882:	4b20      	ldr	r3, [pc, #128]	@ (8003904 <prvAddNewTaskToReadyList+0xd0>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	3301      	adds	r3, #1
 8003888:	4a1e      	ldr	r2, [pc, #120]	@ (8003904 <prvAddNewTaskToReadyList+0xd0>)
 800388a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800388c:	4b1d      	ldr	r3, [pc, #116]	@ (8003904 <prvAddNewTaskToReadyList+0xd0>)
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003898:	4b1b      	ldr	r3, [pc, #108]	@ (8003908 <prvAddNewTaskToReadyList+0xd4>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	429a      	cmp	r2, r3
 800389e:	d903      	bls.n	80038a8 <prvAddNewTaskToReadyList+0x74>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a4:	4a18      	ldr	r2, [pc, #96]	@ (8003908 <prvAddNewTaskToReadyList+0xd4>)
 80038a6:	6013      	str	r3, [r2, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038ac:	4613      	mov	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	4413      	add	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4a15      	ldr	r2, [pc, #84]	@ (800390c <prvAddNewTaskToReadyList+0xd8>)
 80038b6:	441a      	add	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3304      	adds	r3, #4
 80038bc:	4619      	mov	r1, r3
 80038be:	4610      	mov	r0, r2
 80038c0:	f7ff f901 	bl	8002ac6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80038c4:	f001 fa4a 	bl	8004d5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80038c8:	4b0d      	ldr	r3, [pc, #52]	@ (8003900 <prvAddNewTaskToReadyList+0xcc>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00e      	beq.n	80038ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80038d0:	4b0a      	ldr	r3, [pc, #40]	@ (80038fc <prvAddNewTaskToReadyList+0xc8>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038da:	429a      	cmp	r2, r3
 80038dc:	d207      	bcs.n	80038ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80038de:	4b0c      	ldr	r3, [pc, #48]	@ (8003910 <prvAddNewTaskToReadyList+0xdc>)
 80038e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038e4:	601a      	str	r2, [r3, #0]
 80038e6:	f3bf 8f4f 	dsb	sy
 80038ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038ee:	bf00      	nop
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	20000c98 	.word	0x20000c98
 80038fc:	200007c4 	.word	0x200007c4
 8003900:	20000ca4 	.word	0x20000ca4
 8003904:	20000cb4 	.word	0x20000cb4
 8003908:	20000ca0 	.word	0x20000ca0
 800390c:	200007c8 	.word	0x200007c8
 8003910:	e000ed04 	.word	0xe000ed04

08003914 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800391c:	2300      	movs	r3, #0
 800391e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d018      	beq.n	8003958 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003926:	4b14      	ldr	r3, [pc, #80]	@ (8003978 <vTaskDelay+0x64>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00b      	beq.n	8003946 <vTaskDelay+0x32>
	__asm volatile
 800392e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003932:	f383 8811 	msr	BASEPRI, r3
 8003936:	f3bf 8f6f 	isb	sy
 800393a:	f3bf 8f4f 	dsb	sy
 800393e:	60bb      	str	r3, [r7, #8]
}
 8003940:	bf00      	nop
 8003942:	bf00      	nop
 8003944:	e7fd      	b.n	8003942 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003946:	f000 f883 	bl	8003a50 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800394a:	2100      	movs	r1, #0
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 fcf3 	bl	8004338 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003952:	f000 f88b 	bl	8003a6c <xTaskResumeAll>
 8003956:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d107      	bne.n	800396e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800395e:	4b07      	ldr	r3, [pc, #28]	@ (800397c <vTaskDelay+0x68>)
 8003960:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	f3bf 8f4f 	dsb	sy
 800396a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800396e:	bf00      	nop
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	20000cc0 	.word	0x20000cc0
 800397c:	e000ed04 	.word	0xe000ed04

08003980 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b08a      	sub	sp, #40	@ 0x28
 8003984:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003986:	2300      	movs	r3, #0
 8003988:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800398a:	2300      	movs	r3, #0
 800398c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800398e:	463a      	mov	r2, r7
 8003990:	1d39      	adds	r1, r7, #4
 8003992:	f107 0308 	add.w	r3, r7, #8
 8003996:	4618      	mov	r0, r3
 8003998:	f7ff f834 	bl	8002a04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800399c:	6839      	ldr	r1, [r7, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68ba      	ldr	r2, [r7, #8]
 80039a2:	9202      	str	r2, [sp, #8]
 80039a4:	9301      	str	r3, [sp, #4]
 80039a6:	2300      	movs	r3, #0
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	2300      	movs	r3, #0
 80039ac:	460a      	mov	r2, r1
 80039ae:	4922      	ldr	r1, [pc, #136]	@ (8003a38 <vTaskStartScheduler+0xb8>)
 80039b0:	4822      	ldr	r0, [pc, #136]	@ (8003a3c <vTaskStartScheduler+0xbc>)
 80039b2:	f7ff fe09 	bl	80035c8 <xTaskCreateStatic>
 80039b6:	4603      	mov	r3, r0
 80039b8:	4a21      	ldr	r2, [pc, #132]	@ (8003a40 <vTaskStartScheduler+0xc0>)
 80039ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80039bc:	4b20      	ldr	r3, [pc, #128]	@ (8003a40 <vTaskStartScheduler+0xc0>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d002      	beq.n	80039ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80039c4:	2301      	movs	r3, #1
 80039c6:	617b      	str	r3, [r7, #20]
 80039c8:	e001      	b.n	80039ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80039ca:	2300      	movs	r3, #0
 80039cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d102      	bne.n	80039da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80039d4:	f000 fd04 	bl	80043e0 <xTimerCreateTimerTask>
 80039d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d116      	bne.n	8003a0e <vTaskStartScheduler+0x8e>
	__asm volatile
 80039e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039e4:	f383 8811 	msr	BASEPRI, r3
 80039e8:	f3bf 8f6f 	isb	sy
 80039ec:	f3bf 8f4f 	dsb	sy
 80039f0:	613b      	str	r3, [r7, #16]
}
 80039f2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80039f4:	4b13      	ldr	r3, [pc, #76]	@ (8003a44 <vTaskStartScheduler+0xc4>)
 80039f6:	f04f 32ff 	mov.w	r2, #4294967295
 80039fa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80039fc:	4b12      	ldr	r3, [pc, #72]	@ (8003a48 <vTaskStartScheduler+0xc8>)
 80039fe:	2201      	movs	r2, #1
 8003a00:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a02:	4b12      	ldr	r3, [pc, #72]	@ (8003a4c <vTaskStartScheduler+0xcc>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a08:	f001 f8d2 	bl	8004bb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a0c:	e00f      	b.n	8003a2e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a14:	d10b      	bne.n	8003a2e <vTaskStartScheduler+0xae>
	__asm volatile
 8003a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a1a:	f383 8811 	msr	BASEPRI, r3
 8003a1e:	f3bf 8f6f 	isb	sy
 8003a22:	f3bf 8f4f 	dsb	sy
 8003a26:	60fb      	str	r3, [r7, #12]
}
 8003a28:	bf00      	nop
 8003a2a:	bf00      	nop
 8003a2c:	e7fd      	b.n	8003a2a <vTaskStartScheduler+0xaa>
}
 8003a2e:	bf00      	nop
 8003a30:	3718      	adds	r7, #24
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	080053b4 	.word	0x080053b4
 8003a3c:	08004071 	.word	0x08004071
 8003a40:	20000cbc 	.word	0x20000cbc
 8003a44:	20000cb8 	.word	0x20000cb8
 8003a48:	20000ca4 	.word	0x20000ca4
 8003a4c:	20000c9c 	.word	0x20000c9c

08003a50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003a54:	4b04      	ldr	r3, [pc, #16]	@ (8003a68 <vTaskSuspendAll+0x18>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	3301      	adds	r3, #1
 8003a5a:	4a03      	ldr	r2, [pc, #12]	@ (8003a68 <vTaskSuspendAll+0x18>)
 8003a5c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003a5e:	bf00      	nop
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr
 8003a68:	20000cc0 	.word	0x20000cc0

08003a6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003a72:	2300      	movs	r3, #0
 8003a74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003a76:	2300      	movs	r3, #0
 8003a78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003a7a:	4b42      	ldr	r3, [pc, #264]	@ (8003b84 <xTaskResumeAll+0x118>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10b      	bne.n	8003a9a <xTaskResumeAll+0x2e>
	__asm volatile
 8003a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a86:	f383 8811 	msr	BASEPRI, r3
 8003a8a:	f3bf 8f6f 	isb	sy
 8003a8e:	f3bf 8f4f 	dsb	sy
 8003a92:	603b      	str	r3, [r7, #0]
}
 8003a94:	bf00      	nop
 8003a96:	bf00      	nop
 8003a98:	e7fd      	b.n	8003a96 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003a9a:	f001 f92d 	bl	8004cf8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003a9e:	4b39      	ldr	r3, [pc, #228]	@ (8003b84 <xTaskResumeAll+0x118>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	4a37      	ldr	r2, [pc, #220]	@ (8003b84 <xTaskResumeAll+0x118>)
 8003aa6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003aa8:	4b36      	ldr	r3, [pc, #216]	@ (8003b84 <xTaskResumeAll+0x118>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d162      	bne.n	8003b76 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ab0:	4b35      	ldr	r3, [pc, #212]	@ (8003b88 <xTaskResumeAll+0x11c>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d05e      	beq.n	8003b76 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ab8:	e02f      	b.n	8003b1a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003aba:	4b34      	ldr	r3, [pc, #208]	@ (8003b8c <xTaskResumeAll+0x120>)
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	3318      	adds	r3, #24
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7ff f85a 	bl	8002b80 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	3304      	adds	r3, #4
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7ff f855 	bl	8002b80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ada:	4b2d      	ldr	r3, [pc, #180]	@ (8003b90 <xTaskResumeAll+0x124>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d903      	bls.n	8003aea <xTaskResumeAll+0x7e>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae6:	4a2a      	ldr	r2, [pc, #168]	@ (8003b90 <xTaskResumeAll+0x124>)
 8003ae8:	6013      	str	r3, [r2, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003aee:	4613      	mov	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4413      	add	r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	4a27      	ldr	r2, [pc, #156]	@ (8003b94 <xTaskResumeAll+0x128>)
 8003af8:	441a      	add	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	3304      	adds	r3, #4
 8003afe:	4619      	mov	r1, r3
 8003b00:	4610      	mov	r0, r2
 8003b02:	f7fe ffe0 	bl	8002ac6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b0a:	4b23      	ldr	r3, [pc, #140]	@ (8003b98 <xTaskResumeAll+0x12c>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d302      	bcc.n	8003b1a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003b14:	4b21      	ldr	r3, [pc, #132]	@ (8003b9c <xTaskResumeAll+0x130>)
 8003b16:	2201      	movs	r2, #1
 8003b18:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b1a:	4b1c      	ldr	r3, [pc, #112]	@ (8003b8c <xTaskResumeAll+0x120>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1cb      	bne.n	8003aba <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b28:	f000 fb58 	bl	80041dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003b2c:	4b1c      	ldr	r3, [pc, #112]	@ (8003ba0 <xTaskResumeAll+0x134>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d010      	beq.n	8003b5a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003b38:	f000 f846 	bl	8003bc8 <xTaskIncrementTick>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d002      	beq.n	8003b48 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003b42:	4b16      	ldr	r3, [pc, #88]	@ (8003b9c <xTaskResumeAll+0x130>)
 8003b44:	2201      	movs	r2, #1
 8003b46:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1f1      	bne.n	8003b38 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003b54:	4b12      	ldr	r3, [pc, #72]	@ (8003ba0 <xTaskResumeAll+0x134>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003b5a:	4b10      	ldr	r3, [pc, #64]	@ (8003b9c <xTaskResumeAll+0x130>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d009      	beq.n	8003b76 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003b62:	2301      	movs	r3, #1
 8003b64:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003b66:	4b0f      	ldr	r3, [pc, #60]	@ (8003ba4 <xTaskResumeAll+0x138>)
 8003b68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b6c:	601a      	str	r2, [r3, #0]
 8003b6e:	f3bf 8f4f 	dsb	sy
 8003b72:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b76:	f001 f8f1 	bl	8004d5c <vPortExitCritical>

	return xAlreadyYielded;
 8003b7a:	68bb      	ldr	r3, [r7, #8]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	20000cc0 	.word	0x20000cc0
 8003b88:	20000c98 	.word	0x20000c98
 8003b8c:	20000c58 	.word	0x20000c58
 8003b90:	20000ca0 	.word	0x20000ca0
 8003b94:	200007c8 	.word	0x200007c8
 8003b98:	200007c4 	.word	0x200007c4
 8003b9c:	20000cac 	.word	0x20000cac
 8003ba0:	20000ca8 	.word	0x20000ca8
 8003ba4:	e000ed04 	.word	0xe000ed04

08003ba8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003bae:	4b05      	ldr	r3, [pc, #20]	@ (8003bc4 <xTaskGetTickCount+0x1c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003bb4:	687b      	ldr	r3, [r7, #4]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	20000c9c 	.word	0x20000c9c

08003bc8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bd2:	4b4f      	ldr	r3, [pc, #316]	@ (8003d10 <xTaskIncrementTick+0x148>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f040 8090 	bne.w	8003cfc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003bdc:	4b4d      	ldr	r3, [pc, #308]	@ (8003d14 <xTaskIncrementTick+0x14c>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	3301      	adds	r3, #1
 8003be2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003be4:	4a4b      	ldr	r2, [pc, #300]	@ (8003d14 <xTaskIncrementTick+0x14c>)
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d121      	bne.n	8003c34 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003bf0:	4b49      	ldr	r3, [pc, #292]	@ (8003d18 <xTaskIncrementTick+0x150>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00b      	beq.n	8003c12 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bfe:	f383 8811 	msr	BASEPRI, r3
 8003c02:	f3bf 8f6f 	isb	sy
 8003c06:	f3bf 8f4f 	dsb	sy
 8003c0a:	603b      	str	r3, [r7, #0]
}
 8003c0c:	bf00      	nop
 8003c0e:	bf00      	nop
 8003c10:	e7fd      	b.n	8003c0e <xTaskIncrementTick+0x46>
 8003c12:	4b41      	ldr	r3, [pc, #260]	@ (8003d18 <xTaskIncrementTick+0x150>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	60fb      	str	r3, [r7, #12]
 8003c18:	4b40      	ldr	r3, [pc, #256]	@ (8003d1c <xTaskIncrementTick+0x154>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a3e      	ldr	r2, [pc, #248]	@ (8003d18 <xTaskIncrementTick+0x150>)
 8003c1e:	6013      	str	r3, [r2, #0]
 8003c20:	4a3e      	ldr	r2, [pc, #248]	@ (8003d1c <xTaskIncrementTick+0x154>)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6013      	str	r3, [r2, #0]
 8003c26:	4b3e      	ldr	r3, [pc, #248]	@ (8003d20 <xTaskIncrementTick+0x158>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	4a3c      	ldr	r2, [pc, #240]	@ (8003d20 <xTaskIncrementTick+0x158>)
 8003c2e:	6013      	str	r3, [r2, #0]
 8003c30:	f000 fad4 	bl	80041dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c34:	4b3b      	ldr	r3, [pc, #236]	@ (8003d24 <xTaskIncrementTick+0x15c>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d349      	bcc.n	8003cd2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c3e:	4b36      	ldr	r3, [pc, #216]	@ (8003d18 <xTaskIncrementTick+0x150>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d104      	bne.n	8003c52 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c48:	4b36      	ldr	r3, [pc, #216]	@ (8003d24 <xTaskIncrementTick+0x15c>)
 8003c4a:	f04f 32ff 	mov.w	r2, #4294967295
 8003c4e:	601a      	str	r2, [r3, #0]
					break;
 8003c50:	e03f      	b.n	8003cd2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c52:	4b31      	ldr	r3, [pc, #196]	@ (8003d18 <xTaskIncrementTick+0x150>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d203      	bcs.n	8003c72 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003c6a:	4a2e      	ldr	r2, [pc, #184]	@ (8003d24 <xTaskIncrementTick+0x15c>)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003c70:	e02f      	b.n	8003cd2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	3304      	adds	r3, #4
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7fe ff82 	bl	8002b80 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d004      	beq.n	8003c8e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	3318      	adds	r3, #24
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7fe ff79 	bl	8002b80 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c92:	4b25      	ldr	r3, [pc, #148]	@ (8003d28 <xTaskIncrementTick+0x160>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d903      	bls.n	8003ca2 <xTaskIncrementTick+0xda>
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c9e:	4a22      	ldr	r2, [pc, #136]	@ (8003d28 <xTaskIncrementTick+0x160>)
 8003ca0:	6013      	str	r3, [r2, #0]
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	4413      	add	r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	4a1f      	ldr	r2, [pc, #124]	@ (8003d2c <xTaskIncrementTick+0x164>)
 8003cb0:	441a      	add	r2, r3
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	3304      	adds	r3, #4
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	4610      	mov	r0, r2
 8003cba:	f7fe ff04 	bl	8002ac6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cc2:	4b1b      	ldr	r3, [pc, #108]	@ (8003d30 <xTaskIncrementTick+0x168>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d3b8      	bcc.n	8003c3e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cd0:	e7b5      	b.n	8003c3e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003cd2:	4b17      	ldr	r3, [pc, #92]	@ (8003d30 <xTaskIncrementTick+0x168>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cd8:	4914      	ldr	r1, [pc, #80]	@ (8003d2c <xTaskIncrementTick+0x164>)
 8003cda:	4613      	mov	r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	4413      	add	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	440b      	add	r3, r1
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d901      	bls.n	8003cee <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003cea:	2301      	movs	r3, #1
 8003cec:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003cee:	4b11      	ldr	r3, [pc, #68]	@ (8003d34 <xTaskIncrementTick+0x16c>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d007      	beq.n	8003d06 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	617b      	str	r3, [r7, #20]
 8003cfa:	e004      	b.n	8003d06 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003cfc:	4b0e      	ldr	r3, [pc, #56]	@ (8003d38 <xTaskIncrementTick+0x170>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	3301      	adds	r3, #1
 8003d02:	4a0d      	ldr	r2, [pc, #52]	@ (8003d38 <xTaskIncrementTick+0x170>)
 8003d04:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003d06:	697b      	ldr	r3, [r7, #20]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3718      	adds	r7, #24
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	20000cc0 	.word	0x20000cc0
 8003d14:	20000c9c 	.word	0x20000c9c
 8003d18:	20000c50 	.word	0x20000c50
 8003d1c:	20000c54 	.word	0x20000c54
 8003d20:	20000cb0 	.word	0x20000cb0
 8003d24:	20000cb8 	.word	0x20000cb8
 8003d28:	20000ca0 	.word	0x20000ca0
 8003d2c:	200007c8 	.word	0x200007c8
 8003d30:	200007c4 	.word	0x200007c4
 8003d34:	20000cac 	.word	0x20000cac
 8003d38:	20000ca8 	.word	0x20000ca8

08003d3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d42:	4b28      	ldr	r3, [pc, #160]	@ (8003de4 <vTaskSwitchContext+0xa8>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003d4a:	4b27      	ldr	r3, [pc, #156]	@ (8003de8 <vTaskSwitchContext+0xac>)
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003d50:	e042      	b.n	8003dd8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8003d52:	4b25      	ldr	r3, [pc, #148]	@ (8003de8 <vTaskSwitchContext+0xac>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d58:	4b24      	ldr	r3, [pc, #144]	@ (8003dec <vTaskSwitchContext+0xb0>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	60fb      	str	r3, [r7, #12]
 8003d5e:	e011      	b.n	8003d84 <vTaskSwitchContext+0x48>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10b      	bne.n	8003d7e <vTaskSwitchContext+0x42>
	__asm volatile
 8003d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d6a:	f383 8811 	msr	BASEPRI, r3
 8003d6e:	f3bf 8f6f 	isb	sy
 8003d72:	f3bf 8f4f 	dsb	sy
 8003d76:	607b      	str	r3, [r7, #4]
}
 8003d78:	bf00      	nop
 8003d7a:	bf00      	nop
 8003d7c:	e7fd      	b.n	8003d7a <vTaskSwitchContext+0x3e>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	3b01      	subs	r3, #1
 8003d82:	60fb      	str	r3, [r7, #12]
 8003d84:	491a      	ldr	r1, [pc, #104]	@ (8003df0 <vTaskSwitchContext+0xb4>)
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	4413      	add	r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	440b      	add	r3, r1
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d0e3      	beq.n	8003d60 <vTaskSwitchContext+0x24>
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	4413      	add	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	4a13      	ldr	r2, [pc, #76]	@ (8003df0 <vTaskSwitchContext+0xb4>)
 8003da4:	4413      	add	r3, r2
 8003da6:	60bb      	str	r3, [r7, #8]
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	685a      	ldr	r2, [r3, #4]
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	605a      	str	r2, [r3, #4]
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	685a      	ldr	r2, [r3, #4]
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	3308      	adds	r3, #8
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d104      	bne.n	8003dc8 <vTaskSwitchContext+0x8c>
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	605a      	str	r2, [r3, #4]
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	4a09      	ldr	r2, [pc, #36]	@ (8003df4 <vTaskSwitchContext+0xb8>)
 8003dd0:	6013      	str	r3, [r2, #0]
 8003dd2:	4a06      	ldr	r2, [pc, #24]	@ (8003dec <vTaskSwitchContext+0xb0>)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6013      	str	r3, [r2, #0]
}
 8003dd8:	bf00      	nop
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	20000cc0 	.word	0x20000cc0
 8003de8:	20000cac 	.word	0x20000cac
 8003dec:	20000ca0 	.word	0x20000ca0
 8003df0:	200007c8 	.word	0x200007c8
 8003df4:	200007c4 	.word	0x200007c4

08003df8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d10b      	bne.n	8003e20 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e0c:	f383 8811 	msr	BASEPRI, r3
 8003e10:	f3bf 8f6f 	isb	sy
 8003e14:	f3bf 8f4f 	dsb	sy
 8003e18:	60fb      	str	r3, [r7, #12]
}
 8003e1a:	bf00      	nop
 8003e1c:	bf00      	nop
 8003e1e:	e7fd      	b.n	8003e1c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e20:	4b07      	ldr	r3, [pc, #28]	@ (8003e40 <vTaskPlaceOnEventList+0x48>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	3318      	adds	r3, #24
 8003e26:	4619      	mov	r1, r3
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f7fe fe70 	bl	8002b0e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003e2e:	2101      	movs	r1, #1
 8003e30:	6838      	ldr	r0, [r7, #0]
 8003e32:	f000 fa81 	bl	8004338 <prvAddCurrentTaskToDelayedList>
}
 8003e36:	bf00      	nop
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	200007c4 	.word	0x200007c4

08003e44 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d10b      	bne.n	8003e6e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e5a:	f383 8811 	msr	BASEPRI, r3
 8003e5e:	f3bf 8f6f 	isb	sy
 8003e62:	f3bf 8f4f 	dsb	sy
 8003e66:	617b      	str	r3, [r7, #20]
}
 8003e68:	bf00      	nop
 8003e6a:	bf00      	nop
 8003e6c:	e7fd      	b.n	8003e6a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8003e98 <vTaskPlaceOnEventListRestricted+0x54>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	3318      	adds	r3, #24
 8003e74:	4619      	mov	r1, r3
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f7fe fe25 	bl	8002ac6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d002      	beq.n	8003e88 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003e82:	f04f 33ff 	mov.w	r3, #4294967295
 8003e86:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003e88:	6879      	ldr	r1, [r7, #4]
 8003e8a:	68b8      	ldr	r0, [r7, #8]
 8003e8c:	f000 fa54 	bl	8004338 <prvAddCurrentTaskToDelayedList>
	}
 8003e90:	bf00      	nop
 8003e92:	3718      	adds	r7, #24
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	200007c4 	.word	0x200007c4

08003e9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10b      	bne.n	8003eca <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eb6:	f383 8811 	msr	BASEPRI, r3
 8003eba:	f3bf 8f6f 	isb	sy
 8003ebe:	f3bf 8f4f 	dsb	sy
 8003ec2:	60fb      	str	r3, [r7, #12]
}
 8003ec4:	bf00      	nop
 8003ec6:	bf00      	nop
 8003ec8:	e7fd      	b.n	8003ec6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	3318      	adds	r3, #24
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7fe fe56 	bl	8002b80 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ed4:	4b1d      	ldr	r3, [pc, #116]	@ (8003f4c <xTaskRemoveFromEventList+0xb0>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d11d      	bne.n	8003f18 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	3304      	adds	r3, #4
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7fe fe4d 	bl	8002b80 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eea:	4b19      	ldr	r3, [pc, #100]	@ (8003f50 <xTaskRemoveFromEventList+0xb4>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d903      	bls.n	8003efa <xTaskRemoveFromEventList+0x5e>
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef6:	4a16      	ldr	r2, [pc, #88]	@ (8003f50 <xTaskRemoveFromEventList+0xb4>)
 8003ef8:	6013      	str	r3, [r2, #0]
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003efe:	4613      	mov	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	4413      	add	r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	4a13      	ldr	r2, [pc, #76]	@ (8003f54 <xTaskRemoveFromEventList+0xb8>)
 8003f08:	441a      	add	r2, r3
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	3304      	adds	r3, #4
 8003f0e:	4619      	mov	r1, r3
 8003f10:	4610      	mov	r0, r2
 8003f12:	f7fe fdd8 	bl	8002ac6 <vListInsertEnd>
 8003f16:	e005      	b.n	8003f24 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	3318      	adds	r3, #24
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	480e      	ldr	r0, [pc, #56]	@ (8003f58 <xTaskRemoveFromEventList+0xbc>)
 8003f20:	f7fe fdd1 	bl	8002ac6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f28:	4b0c      	ldr	r3, [pc, #48]	@ (8003f5c <xTaskRemoveFromEventList+0xc0>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d905      	bls.n	8003f3e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003f32:	2301      	movs	r3, #1
 8003f34:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003f36:	4b0a      	ldr	r3, [pc, #40]	@ (8003f60 <xTaskRemoveFromEventList+0xc4>)
 8003f38:	2201      	movs	r2, #1
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	e001      	b.n	8003f42 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003f42:	697b      	ldr	r3, [r7, #20]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3718      	adds	r7, #24
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	20000cc0 	.word	0x20000cc0
 8003f50:	20000ca0 	.word	0x20000ca0
 8003f54:	200007c8 	.word	0x200007c8
 8003f58:	20000c58 	.word	0x20000c58
 8003f5c:	200007c4 	.word	0x200007c4
 8003f60:	20000cac 	.word	0x20000cac

08003f64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003f6c:	4b06      	ldr	r3, [pc, #24]	@ (8003f88 <vTaskInternalSetTimeOutState+0x24>)
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003f74:	4b05      	ldr	r3, [pc, #20]	@ (8003f8c <vTaskInternalSetTimeOutState+0x28>)
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	605a      	str	r2, [r3, #4]
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr
 8003f88:	20000cb0 	.word	0x20000cb0
 8003f8c:	20000c9c 	.word	0x20000c9c

08003f90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b088      	sub	sp, #32
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10b      	bne.n	8003fb8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fa4:	f383 8811 	msr	BASEPRI, r3
 8003fa8:	f3bf 8f6f 	isb	sy
 8003fac:	f3bf 8f4f 	dsb	sy
 8003fb0:	613b      	str	r3, [r7, #16]
}
 8003fb2:	bf00      	nop
 8003fb4:	bf00      	nop
 8003fb6:	e7fd      	b.n	8003fb4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10b      	bne.n	8003fd6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fc2:	f383 8811 	msr	BASEPRI, r3
 8003fc6:	f3bf 8f6f 	isb	sy
 8003fca:	f3bf 8f4f 	dsb	sy
 8003fce:	60fb      	str	r3, [r7, #12]
}
 8003fd0:	bf00      	nop
 8003fd2:	bf00      	nop
 8003fd4:	e7fd      	b.n	8003fd2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003fd6:	f000 fe8f 	bl	8004cf8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003fda:	4b1d      	ldr	r3, [pc, #116]	@ (8004050 <xTaskCheckForTimeOut+0xc0>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff2:	d102      	bne.n	8003ffa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	61fb      	str	r3, [r7, #28]
 8003ff8:	e023      	b.n	8004042 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	4b15      	ldr	r3, [pc, #84]	@ (8004054 <xTaskCheckForTimeOut+0xc4>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	429a      	cmp	r2, r3
 8004004:	d007      	beq.n	8004016 <xTaskCheckForTimeOut+0x86>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	429a      	cmp	r2, r3
 800400e:	d302      	bcc.n	8004016 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004010:	2301      	movs	r3, #1
 8004012:	61fb      	str	r3, [r7, #28]
 8004014:	e015      	b.n	8004042 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	429a      	cmp	r2, r3
 800401e:	d20b      	bcs.n	8004038 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	1ad2      	subs	r2, r2, r3
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f7ff ff99 	bl	8003f64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004032:	2300      	movs	r3, #0
 8004034:	61fb      	str	r3, [r7, #28]
 8004036:	e004      	b.n	8004042 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	2200      	movs	r2, #0
 800403c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800403e:	2301      	movs	r3, #1
 8004040:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004042:	f000 fe8b 	bl	8004d5c <vPortExitCritical>

	return xReturn;
 8004046:	69fb      	ldr	r3, [r7, #28]
}
 8004048:	4618      	mov	r0, r3
 800404a:	3720      	adds	r7, #32
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	20000c9c 	.word	0x20000c9c
 8004054:	20000cb0 	.word	0x20000cb0

08004058 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004058:	b480      	push	{r7}
 800405a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800405c:	4b03      	ldr	r3, [pc, #12]	@ (800406c <vTaskMissedYield+0x14>)
 800405e:	2201      	movs	r2, #1
 8004060:	601a      	str	r2, [r3, #0]
}
 8004062:	bf00      	nop
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr
 800406c:	20000cac 	.word	0x20000cac

08004070 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004078:	f000 f852 	bl	8004120 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800407c:	4b06      	ldr	r3, [pc, #24]	@ (8004098 <prvIdleTask+0x28>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d9f9      	bls.n	8004078 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004084:	4b05      	ldr	r3, [pc, #20]	@ (800409c <prvIdleTask+0x2c>)
 8004086:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800408a:	601a      	str	r2, [r3, #0]
 800408c:	f3bf 8f4f 	dsb	sy
 8004090:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004094:	e7f0      	b.n	8004078 <prvIdleTask+0x8>
 8004096:	bf00      	nop
 8004098:	200007c8 	.word	0x200007c8
 800409c:	e000ed04 	.word	0xe000ed04

080040a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040a6:	2300      	movs	r3, #0
 80040a8:	607b      	str	r3, [r7, #4]
 80040aa:	e00c      	b.n	80040c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	4613      	mov	r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	4413      	add	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4a12      	ldr	r2, [pc, #72]	@ (8004100 <prvInitialiseTaskLists+0x60>)
 80040b8:	4413      	add	r3, r2
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7fe fcd6 	bl	8002a6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	3301      	adds	r3, #1
 80040c4:	607b      	str	r3, [r7, #4]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2b37      	cmp	r3, #55	@ 0x37
 80040ca:	d9ef      	bls.n	80040ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80040cc:	480d      	ldr	r0, [pc, #52]	@ (8004104 <prvInitialiseTaskLists+0x64>)
 80040ce:	f7fe fccd 	bl	8002a6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80040d2:	480d      	ldr	r0, [pc, #52]	@ (8004108 <prvInitialiseTaskLists+0x68>)
 80040d4:	f7fe fcca 	bl	8002a6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80040d8:	480c      	ldr	r0, [pc, #48]	@ (800410c <prvInitialiseTaskLists+0x6c>)
 80040da:	f7fe fcc7 	bl	8002a6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80040de:	480c      	ldr	r0, [pc, #48]	@ (8004110 <prvInitialiseTaskLists+0x70>)
 80040e0:	f7fe fcc4 	bl	8002a6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80040e4:	480b      	ldr	r0, [pc, #44]	@ (8004114 <prvInitialiseTaskLists+0x74>)
 80040e6:	f7fe fcc1 	bl	8002a6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80040ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004118 <prvInitialiseTaskLists+0x78>)
 80040ec:	4a05      	ldr	r2, [pc, #20]	@ (8004104 <prvInitialiseTaskLists+0x64>)
 80040ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80040f0:	4b0a      	ldr	r3, [pc, #40]	@ (800411c <prvInitialiseTaskLists+0x7c>)
 80040f2:	4a05      	ldr	r2, [pc, #20]	@ (8004108 <prvInitialiseTaskLists+0x68>)
 80040f4:	601a      	str	r2, [r3, #0]
}
 80040f6:	bf00      	nop
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	200007c8 	.word	0x200007c8
 8004104:	20000c28 	.word	0x20000c28
 8004108:	20000c3c 	.word	0x20000c3c
 800410c:	20000c58 	.word	0x20000c58
 8004110:	20000c6c 	.word	0x20000c6c
 8004114:	20000c84 	.word	0x20000c84
 8004118:	20000c50 	.word	0x20000c50
 800411c:	20000c54 	.word	0x20000c54

08004120 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004126:	e019      	b.n	800415c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004128:	f000 fde6 	bl	8004cf8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800412c:	4b10      	ldr	r3, [pc, #64]	@ (8004170 <prvCheckTasksWaitingTermination+0x50>)
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	3304      	adds	r3, #4
 8004138:	4618      	mov	r0, r3
 800413a:	f7fe fd21 	bl	8002b80 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800413e:	4b0d      	ldr	r3, [pc, #52]	@ (8004174 <prvCheckTasksWaitingTermination+0x54>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	3b01      	subs	r3, #1
 8004144:	4a0b      	ldr	r2, [pc, #44]	@ (8004174 <prvCheckTasksWaitingTermination+0x54>)
 8004146:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004148:	4b0b      	ldr	r3, [pc, #44]	@ (8004178 <prvCheckTasksWaitingTermination+0x58>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	3b01      	subs	r3, #1
 800414e:	4a0a      	ldr	r2, [pc, #40]	@ (8004178 <prvCheckTasksWaitingTermination+0x58>)
 8004150:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004152:	f000 fe03 	bl	8004d5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f810 	bl	800417c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800415c:	4b06      	ldr	r3, [pc, #24]	@ (8004178 <prvCheckTasksWaitingTermination+0x58>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1e1      	bne.n	8004128 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004164:	bf00      	nop
 8004166:	bf00      	nop
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	20000c6c 	.word	0x20000c6c
 8004174:	20000c98 	.word	0x20000c98
 8004178:	20000c80 	.word	0x20000c80

0800417c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800418a:	2b00      	cmp	r3, #0
 800418c:	d108      	bne.n	80041a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004192:	4618      	mov	r0, r3
 8004194:	f000 ffa0 	bl	80050d8 <vPortFree>
				vPortFree( pxTCB );
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 ff9d 	bl	80050d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800419e:	e019      	b.n	80041d4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d103      	bne.n	80041b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 ff94 	bl	80050d8 <vPortFree>
	}
 80041b0:	e010      	b.n	80041d4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d00b      	beq.n	80041d4 <prvDeleteTCB+0x58>
	__asm volatile
 80041bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c0:	f383 8811 	msr	BASEPRI, r3
 80041c4:	f3bf 8f6f 	isb	sy
 80041c8:	f3bf 8f4f 	dsb	sy
 80041cc:	60fb      	str	r3, [r7, #12]
}
 80041ce:	bf00      	nop
 80041d0:	bf00      	nop
 80041d2:	e7fd      	b.n	80041d0 <prvDeleteTCB+0x54>
	}
 80041d4:	bf00      	nop
 80041d6:	3710      	adds	r7, #16
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041e2:	4b0c      	ldr	r3, [pc, #48]	@ (8004214 <prvResetNextTaskUnblockTime+0x38>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d104      	bne.n	80041f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80041ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004218 <prvResetNextTaskUnblockTime+0x3c>)
 80041ee:	f04f 32ff 	mov.w	r2, #4294967295
 80041f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80041f4:	e008      	b.n	8004208 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041f6:	4b07      	ldr	r3, [pc, #28]	@ (8004214 <prvResetNextTaskUnblockTime+0x38>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	4a04      	ldr	r2, [pc, #16]	@ (8004218 <prvResetNextTaskUnblockTime+0x3c>)
 8004206:	6013      	str	r3, [r2, #0]
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	20000c50 	.word	0x20000c50
 8004218:	20000cb8 	.word	0x20000cb8

0800421c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004222:	4b0b      	ldr	r3, [pc, #44]	@ (8004250 <xTaskGetSchedulerState+0x34>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d102      	bne.n	8004230 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800422a:	2301      	movs	r3, #1
 800422c:	607b      	str	r3, [r7, #4]
 800422e:	e008      	b.n	8004242 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004230:	4b08      	ldr	r3, [pc, #32]	@ (8004254 <xTaskGetSchedulerState+0x38>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d102      	bne.n	800423e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004238:	2302      	movs	r3, #2
 800423a:	607b      	str	r3, [r7, #4]
 800423c:	e001      	b.n	8004242 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800423e:	2300      	movs	r3, #0
 8004240:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004242:	687b      	ldr	r3, [r7, #4]
	}
 8004244:	4618      	mov	r0, r3
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr
 8004250:	20000ca4 	.word	0x20000ca4
 8004254:	20000cc0 	.word	0x20000cc0

08004258 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004264:	2300      	movs	r3, #0
 8004266:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d058      	beq.n	8004320 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800426e:	4b2f      	ldr	r3, [pc, #188]	@ (800432c <xTaskPriorityDisinherit+0xd4>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	429a      	cmp	r2, r3
 8004276:	d00b      	beq.n	8004290 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800427c:	f383 8811 	msr	BASEPRI, r3
 8004280:	f3bf 8f6f 	isb	sy
 8004284:	f3bf 8f4f 	dsb	sy
 8004288:	60fb      	str	r3, [r7, #12]
}
 800428a:	bf00      	nop
 800428c:	bf00      	nop
 800428e:	e7fd      	b.n	800428c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10b      	bne.n	80042b0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800429c:	f383 8811 	msr	BASEPRI, r3
 80042a0:	f3bf 8f6f 	isb	sy
 80042a4:	f3bf 8f4f 	dsb	sy
 80042a8:	60bb      	str	r3, [r7, #8]
}
 80042aa:	bf00      	nop
 80042ac:	bf00      	nop
 80042ae:	e7fd      	b.n	80042ac <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042b4:	1e5a      	subs	r2, r3, #1
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d02c      	beq.n	8004320 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d128      	bne.n	8004320 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	3304      	adds	r3, #4
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7fe fc54 	bl	8002b80 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042f0:	4b0f      	ldr	r3, [pc, #60]	@ (8004330 <xTaskPriorityDisinherit+0xd8>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d903      	bls.n	8004300 <xTaskPriorityDisinherit+0xa8>
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042fc:	4a0c      	ldr	r2, [pc, #48]	@ (8004330 <xTaskPriorityDisinherit+0xd8>)
 80042fe:	6013      	str	r3, [r2, #0]
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004304:	4613      	mov	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4413      	add	r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4a09      	ldr	r2, [pc, #36]	@ (8004334 <xTaskPriorityDisinherit+0xdc>)
 800430e:	441a      	add	r2, r3
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	3304      	adds	r3, #4
 8004314:	4619      	mov	r1, r3
 8004316:	4610      	mov	r0, r2
 8004318:	f7fe fbd5 	bl	8002ac6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800431c:	2301      	movs	r3, #1
 800431e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004320:	697b      	ldr	r3, [r7, #20]
	}
 8004322:	4618      	mov	r0, r3
 8004324:	3718      	adds	r7, #24
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	200007c4 	.word	0x200007c4
 8004330:	20000ca0 	.word	0x20000ca0
 8004334:	200007c8 	.word	0x200007c8

08004338 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004342:	4b21      	ldr	r3, [pc, #132]	@ (80043c8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004348:	4b20      	ldr	r3, [pc, #128]	@ (80043cc <prvAddCurrentTaskToDelayedList+0x94>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	3304      	adds	r3, #4
 800434e:	4618      	mov	r0, r3
 8004350:	f7fe fc16 	bl	8002b80 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435a:	d10a      	bne.n	8004372 <prvAddCurrentTaskToDelayedList+0x3a>
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d007      	beq.n	8004372 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004362:	4b1a      	ldr	r3, [pc, #104]	@ (80043cc <prvAddCurrentTaskToDelayedList+0x94>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	3304      	adds	r3, #4
 8004368:	4619      	mov	r1, r3
 800436a:	4819      	ldr	r0, [pc, #100]	@ (80043d0 <prvAddCurrentTaskToDelayedList+0x98>)
 800436c:	f7fe fbab 	bl	8002ac6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004370:	e026      	b.n	80043c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4413      	add	r3, r2
 8004378:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800437a:	4b14      	ldr	r3, [pc, #80]	@ (80043cc <prvAddCurrentTaskToDelayedList+0x94>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68ba      	ldr	r2, [r7, #8]
 8004380:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	429a      	cmp	r2, r3
 8004388:	d209      	bcs.n	800439e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800438a:	4b12      	ldr	r3, [pc, #72]	@ (80043d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	4b0f      	ldr	r3, [pc, #60]	@ (80043cc <prvAddCurrentTaskToDelayedList+0x94>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	3304      	adds	r3, #4
 8004394:	4619      	mov	r1, r3
 8004396:	4610      	mov	r0, r2
 8004398:	f7fe fbb9 	bl	8002b0e <vListInsert>
}
 800439c:	e010      	b.n	80043c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800439e:	4b0e      	ldr	r3, [pc, #56]	@ (80043d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	4b0a      	ldr	r3, [pc, #40]	@ (80043cc <prvAddCurrentTaskToDelayedList+0x94>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	3304      	adds	r3, #4
 80043a8:	4619      	mov	r1, r3
 80043aa:	4610      	mov	r0, r2
 80043ac:	f7fe fbaf 	bl	8002b0e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80043b0:	4b0a      	ldr	r3, [pc, #40]	@ (80043dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68ba      	ldr	r2, [r7, #8]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d202      	bcs.n	80043c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80043ba:	4a08      	ldr	r2, [pc, #32]	@ (80043dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	6013      	str	r3, [r2, #0]
}
 80043c0:	bf00      	nop
 80043c2:	3710      	adds	r7, #16
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	20000c9c 	.word	0x20000c9c
 80043cc:	200007c4 	.word	0x200007c4
 80043d0:	20000c84 	.word	0x20000c84
 80043d4:	20000c54 	.word	0x20000c54
 80043d8:	20000c50 	.word	0x20000c50
 80043dc:	20000cb8 	.word	0x20000cb8

080043e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b08a      	sub	sp, #40	@ 0x28
 80043e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80043e6:	2300      	movs	r3, #0
 80043e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80043ea:	f000 fb13 	bl	8004a14 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80043ee:	4b1d      	ldr	r3, [pc, #116]	@ (8004464 <xTimerCreateTimerTask+0x84>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d021      	beq.n	800443a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80043f6:	2300      	movs	r3, #0
 80043f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80043fa:	2300      	movs	r3, #0
 80043fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80043fe:	1d3a      	adds	r2, r7, #4
 8004400:	f107 0108 	add.w	r1, r7, #8
 8004404:	f107 030c 	add.w	r3, r7, #12
 8004408:	4618      	mov	r0, r3
 800440a:	f7fe fb15 	bl	8002a38 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800440e:	6879      	ldr	r1, [r7, #4]
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	9202      	str	r2, [sp, #8]
 8004416:	9301      	str	r3, [sp, #4]
 8004418:	2302      	movs	r3, #2
 800441a:	9300      	str	r3, [sp, #0]
 800441c:	2300      	movs	r3, #0
 800441e:	460a      	mov	r2, r1
 8004420:	4911      	ldr	r1, [pc, #68]	@ (8004468 <xTimerCreateTimerTask+0x88>)
 8004422:	4812      	ldr	r0, [pc, #72]	@ (800446c <xTimerCreateTimerTask+0x8c>)
 8004424:	f7ff f8d0 	bl	80035c8 <xTaskCreateStatic>
 8004428:	4603      	mov	r3, r0
 800442a:	4a11      	ldr	r2, [pc, #68]	@ (8004470 <xTimerCreateTimerTask+0x90>)
 800442c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800442e:	4b10      	ldr	r3, [pc, #64]	@ (8004470 <xTimerCreateTimerTask+0x90>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004436:	2301      	movs	r3, #1
 8004438:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d10b      	bne.n	8004458 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004444:	f383 8811 	msr	BASEPRI, r3
 8004448:	f3bf 8f6f 	isb	sy
 800444c:	f3bf 8f4f 	dsb	sy
 8004450:	613b      	str	r3, [r7, #16]
}
 8004452:	bf00      	nop
 8004454:	bf00      	nop
 8004456:	e7fd      	b.n	8004454 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004458:	697b      	ldr	r3, [r7, #20]
}
 800445a:	4618      	mov	r0, r3
 800445c:	3718      	adds	r7, #24
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	20000cf4 	.word	0x20000cf4
 8004468:	080053bc 	.word	0x080053bc
 800446c:	080045ad 	.word	0x080045ad
 8004470:	20000cf8 	.word	0x20000cf8

08004474 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b08a      	sub	sp, #40	@ 0x28
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]
 8004480:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004482:	2300      	movs	r3, #0
 8004484:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10b      	bne.n	80044a4 <xTimerGenericCommand+0x30>
	__asm volatile
 800448c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004490:	f383 8811 	msr	BASEPRI, r3
 8004494:	f3bf 8f6f 	isb	sy
 8004498:	f3bf 8f4f 	dsb	sy
 800449c:	623b      	str	r3, [r7, #32]
}
 800449e:	bf00      	nop
 80044a0:	bf00      	nop
 80044a2:	e7fd      	b.n	80044a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80044a4:	4b19      	ldr	r3, [pc, #100]	@ (800450c <xTimerGenericCommand+0x98>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d02a      	beq.n	8004502 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	2b05      	cmp	r3, #5
 80044bc:	dc18      	bgt.n	80044f0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80044be:	f7ff fead 	bl	800421c <xTaskGetSchedulerState>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d109      	bne.n	80044dc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80044c8:	4b10      	ldr	r3, [pc, #64]	@ (800450c <xTimerGenericCommand+0x98>)
 80044ca:	6818      	ldr	r0, [r3, #0]
 80044cc:	f107 0110 	add.w	r1, r7, #16
 80044d0:	2300      	movs	r3, #0
 80044d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044d4:	f7fe fc88 	bl	8002de8 <xQueueGenericSend>
 80044d8:	6278      	str	r0, [r7, #36]	@ 0x24
 80044da:	e012      	b.n	8004502 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80044dc:	4b0b      	ldr	r3, [pc, #44]	@ (800450c <xTimerGenericCommand+0x98>)
 80044de:	6818      	ldr	r0, [r3, #0]
 80044e0:	f107 0110 	add.w	r1, r7, #16
 80044e4:	2300      	movs	r3, #0
 80044e6:	2200      	movs	r2, #0
 80044e8:	f7fe fc7e 	bl	8002de8 <xQueueGenericSend>
 80044ec:	6278      	str	r0, [r7, #36]	@ 0x24
 80044ee:	e008      	b.n	8004502 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80044f0:	4b06      	ldr	r3, [pc, #24]	@ (800450c <xTimerGenericCommand+0x98>)
 80044f2:	6818      	ldr	r0, [r3, #0]
 80044f4:	f107 0110 	add.w	r1, r7, #16
 80044f8:	2300      	movs	r3, #0
 80044fa:	683a      	ldr	r2, [r7, #0]
 80044fc:	f7fe fd76 	bl	8002fec <xQueueGenericSendFromISR>
 8004500:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004504:	4618      	mov	r0, r3
 8004506:	3728      	adds	r7, #40	@ 0x28
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	20000cf4 	.word	0x20000cf4

08004510 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b088      	sub	sp, #32
 8004514:	af02      	add	r7, sp, #8
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800451a:	4b23      	ldr	r3, [pc, #140]	@ (80045a8 <prvProcessExpiredTimer+0x98>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	3304      	adds	r3, #4
 8004528:	4618      	mov	r0, r3
 800452a:	f7fe fb29 	bl	8002b80 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004534:	f003 0304 	and.w	r3, r3, #4
 8004538:	2b00      	cmp	r3, #0
 800453a:	d023      	beq.n	8004584 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	699a      	ldr	r2, [r3, #24]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	18d1      	adds	r1, r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	6978      	ldr	r0, [r7, #20]
 800454a:	f000 f8d5 	bl	80046f8 <prvInsertTimerInActiveList>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d020      	beq.n	8004596 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004554:	2300      	movs	r3, #0
 8004556:	9300      	str	r3, [sp, #0]
 8004558:	2300      	movs	r3, #0
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	2100      	movs	r1, #0
 800455e:	6978      	ldr	r0, [r7, #20]
 8004560:	f7ff ff88 	bl	8004474 <xTimerGenericCommand>
 8004564:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d114      	bne.n	8004596 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800456c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004570:	f383 8811 	msr	BASEPRI, r3
 8004574:	f3bf 8f6f 	isb	sy
 8004578:	f3bf 8f4f 	dsb	sy
 800457c:	60fb      	str	r3, [r7, #12]
}
 800457e:	bf00      	nop
 8004580:	bf00      	nop
 8004582:	e7fd      	b.n	8004580 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800458a:	f023 0301 	bic.w	r3, r3, #1
 800458e:	b2da      	uxtb	r2, r3
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	6978      	ldr	r0, [r7, #20]
 800459c:	4798      	blx	r3
}
 800459e:	bf00      	nop
 80045a0:	3718      	adds	r7, #24
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	20000cec 	.word	0x20000cec

080045ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80045b4:	f107 0308 	add.w	r3, r7, #8
 80045b8:	4618      	mov	r0, r3
 80045ba:	f000 f859 	bl	8004670 <prvGetNextExpireTime>
 80045be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	4619      	mov	r1, r3
 80045c4:	68f8      	ldr	r0, [r7, #12]
 80045c6:	f000 f805 	bl	80045d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80045ca:	f000 f8d7 	bl	800477c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80045ce:	bf00      	nop
 80045d0:	e7f0      	b.n	80045b4 <prvTimerTask+0x8>
	...

080045d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80045de:	f7ff fa37 	bl	8003a50 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80045e2:	f107 0308 	add.w	r3, r7, #8
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 f866 	bl	80046b8 <prvSampleTimeNow>
 80045ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d130      	bne.n	8004656 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10a      	bne.n	8004610 <prvProcessTimerOrBlockTask+0x3c>
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d806      	bhi.n	8004610 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004602:	f7ff fa33 	bl	8003a6c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004606:	68f9      	ldr	r1, [r7, #12]
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f7ff ff81 	bl	8004510 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800460e:	e024      	b.n	800465a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d008      	beq.n	8004628 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004616:	4b13      	ldr	r3, [pc, #76]	@ (8004664 <prvProcessTimerOrBlockTask+0x90>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d101      	bne.n	8004624 <prvProcessTimerOrBlockTask+0x50>
 8004620:	2301      	movs	r3, #1
 8004622:	e000      	b.n	8004626 <prvProcessTimerOrBlockTask+0x52>
 8004624:	2300      	movs	r3, #0
 8004626:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004628:	4b0f      	ldr	r3, [pc, #60]	@ (8004668 <prvProcessTimerOrBlockTask+0x94>)
 800462a:	6818      	ldr	r0, [r3, #0]
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	4619      	mov	r1, r3
 8004636:	f7fe ff93 	bl	8003560 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800463a:	f7ff fa17 	bl	8003a6c <xTaskResumeAll>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10a      	bne.n	800465a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004644:	4b09      	ldr	r3, [pc, #36]	@ (800466c <prvProcessTimerOrBlockTask+0x98>)
 8004646:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800464a:	601a      	str	r2, [r3, #0]
 800464c:	f3bf 8f4f 	dsb	sy
 8004650:	f3bf 8f6f 	isb	sy
}
 8004654:	e001      	b.n	800465a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004656:	f7ff fa09 	bl	8003a6c <xTaskResumeAll>
}
 800465a:	bf00      	nop
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	20000cf0 	.word	0x20000cf0
 8004668:	20000cf4 	.word	0x20000cf4
 800466c:	e000ed04 	.word	0xe000ed04

08004670 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004678:	4b0e      	ldr	r3, [pc, #56]	@ (80046b4 <prvGetNextExpireTime+0x44>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <prvGetNextExpireTime+0x16>
 8004682:	2201      	movs	r2, #1
 8004684:	e000      	b.n	8004688 <prvGetNextExpireTime+0x18>
 8004686:	2200      	movs	r2, #0
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d105      	bne.n	80046a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004694:	4b07      	ldr	r3, [pc, #28]	@ (80046b4 <prvGetNextExpireTime+0x44>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	60fb      	str	r3, [r7, #12]
 800469e:	e001      	b.n	80046a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80046a0:	2300      	movs	r3, #0
 80046a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80046a4:	68fb      	ldr	r3, [r7, #12]
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3714      	adds	r7, #20
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	20000cec 	.word	0x20000cec

080046b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80046c0:	f7ff fa72 	bl	8003ba8 <xTaskGetTickCount>
 80046c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80046c6:	4b0b      	ldr	r3, [pc, #44]	@ (80046f4 <prvSampleTimeNow+0x3c>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d205      	bcs.n	80046dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80046d0:	f000 f93a 	bl	8004948 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	601a      	str	r2, [r3, #0]
 80046da:	e002      	b.n	80046e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80046e2:	4a04      	ldr	r2, [pc, #16]	@ (80046f4 <prvSampleTimeNow+0x3c>)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80046e8:	68fb      	ldr	r3, [r7, #12]
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3710      	adds	r7, #16
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	20000cfc 	.word	0x20000cfc

080046f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b086      	sub	sp, #24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
 8004704:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004706:	2300      	movs	r3, #0
 8004708:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004716:	68ba      	ldr	r2, [r7, #8]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	429a      	cmp	r2, r3
 800471c:	d812      	bhi.n	8004744 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	1ad2      	subs	r2, r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	429a      	cmp	r2, r3
 800472a:	d302      	bcc.n	8004732 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800472c:	2301      	movs	r3, #1
 800472e:	617b      	str	r3, [r7, #20]
 8004730:	e01b      	b.n	800476a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004732:	4b10      	ldr	r3, [pc, #64]	@ (8004774 <prvInsertTimerInActiveList+0x7c>)
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	3304      	adds	r3, #4
 800473a:	4619      	mov	r1, r3
 800473c:	4610      	mov	r0, r2
 800473e:	f7fe f9e6 	bl	8002b0e <vListInsert>
 8004742:	e012      	b.n	800476a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	429a      	cmp	r2, r3
 800474a:	d206      	bcs.n	800475a <prvInsertTimerInActiveList+0x62>
 800474c:	68ba      	ldr	r2, [r7, #8]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	429a      	cmp	r2, r3
 8004752:	d302      	bcc.n	800475a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004754:	2301      	movs	r3, #1
 8004756:	617b      	str	r3, [r7, #20]
 8004758:	e007      	b.n	800476a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800475a:	4b07      	ldr	r3, [pc, #28]	@ (8004778 <prvInsertTimerInActiveList+0x80>)
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	3304      	adds	r3, #4
 8004762:	4619      	mov	r1, r3
 8004764:	4610      	mov	r0, r2
 8004766:	f7fe f9d2 	bl	8002b0e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800476a:	697b      	ldr	r3, [r7, #20]
}
 800476c:	4618      	mov	r0, r3
 800476e:	3718      	adds	r7, #24
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	20000cf0 	.word	0x20000cf0
 8004778:	20000cec 	.word	0x20000cec

0800477c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b08e      	sub	sp, #56	@ 0x38
 8004780:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004782:	e0ce      	b.n	8004922 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	da19      	bge.n	80047be <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800478a:	1d3b      	adds	r3, r7, #4
 800478c:	3304      	adds	r3, #4
 800478e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10b      	bne.n	80047ae <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800479a:	f383 8811 	msr	BASEPRI, r3
 800479e:	f3bf 8f6f 	isb	sy
 80047a2:	f3bf 8f4f 	dsb	sy
 80047a6:	61fb      	str	r3, [r7, #28]
}
 80047a8:	bf00      	nop
 80047aa:	bf00      	nop
 80047ac:	e7fd      	b.n	80047aa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80047ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047b4:	6850      	ldr	r0, [r2, #4]
 80047b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047b8:	6892      	ldr	r2, [r2, #8]
 80047ba:	4611      	mov	r1, r2
 80047bc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f2c0 80ae 	blt.w	8004922 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80047ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d004      	beq.n	80047dc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80047d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d4:	3304      	adds	r3, #4
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7fe f9d2 	bl	8002b80 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80047dc:	463b      	mov	r3, r7
 80047de:	4618      	mov	r0, r3
 80047e0:	f7ff ff6a 	bl	80046b8 <prvSampleTimeNow>
 80047e4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2b09      	cmp	r3, #9
 80047ea:	f200 8097 	bhi.w	800491c <prvProcessReceivedCommands+0x1a0>
 80047ee:	a201      	add	r2, pc, #4	@ (adr r2, 80047f4 <prvProcessReceivedCommands+0x78>)
 80047f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f4:	0800481d 	.word	0x0800481d
 80047f8:	0800481d 	.word	0x0800481d
 80047fc:	0800481d 	.word	0x0800481d
 8004800:	08004893 	.word	0x08004893
 8004804:	080048a7 	.word	0x080048a7
 8004808:	080048f3 	.word	0x080048f3
 800480c:	0800481d 	.word	0x0800481d
 8004810:	0800481d 	.word	0x0800481d
 8004814:	08004893 	.word	0x08004893
 8004818:	080048a7 	.word	0x080048a7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800481c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800481e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004822:	f043 0301 	orr.w	r3, r3, #1
 8004826:	b2da      	uxtb	r2, r3
 8004828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800482a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800482e:	68ba      	ldr	r2, [r7, #8]
 8004830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	18d1      	adds	r1, r2, r3
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800483a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800483c:	f7ff ff5c 	bl	80046f8 <prvInsertTimerInActiveList>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d06c      	beq.n	8004920 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800484c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800484e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004850:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004854:	f003 0304 	and.w	r3, r3, #4
 8004858:	2b00      	cmp	r3, #0
 800485a:	d061      	beq.n	8004920 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	441a      	add	r2, r3
 8004864:	2300      	movs	r3, #0
 8004866:	9300      	str	r3, [sp, #0]
 8004868:	2300      	movs	r3, #0
 800486a:	2100      	movs	r1, #0
 800486c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800486e:	f7ff fe01 	bl	8004474 <xTimerGenericCommand>
 8004872:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004874:	6a3b      	ldr	r3, [r7, #32]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d152      	bne.n	8004920 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800487a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800487e:	f383 8811 	msr	BASEPRI, r3
 8004882:	f3bf 8f6f 	isb	sy
 8004886:	f3bf 8f4f 	dsb	sy
 800488a:	61bb      	str	r3, [r7, #24]
}
 800488c:	bf00      	nop
 800488e:	bf00      	nop
 8004890:	e7fd      	b.n	800488e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004894:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004898:	f023 0301 	bic.w	r3, r3, #1
 800489c:	b2da      	uxtb	r2, r3
 800489e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80048a4:	e03d      	b.n	8004922 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80048a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048ac:	f043 0301 	orr.w	r3, r3, #1
 80048b0:	b2da      	uxtb	r2, r3
 80048b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048bc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80048be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10b      	bne.n	80048de <prvProcessReceivedCommands+0x162>
	__asm volatile
 80048c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ca:	f383 8811 	msr	BASEPRI, r3
 80048ce:	f3bf 8f6f 	isb	sy
 80048d2:	f3bf 8f4f 	dsb	sy
 80048d6:	617b      	str	r3, [r7, #20]
}
 80048d8:	bf00      	nop
 80048da:	bf00      	nop
 80048dc:	e7fd      	b.n	80048da <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80048de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048e0:	699a      	ldr	r2, [r3, #24]
 80048e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e4:	18d1      	adds	r1, r2, r3
 80048e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80048ec:	f7ff ff04 	bl	80046f8 <prvInsertTimerInActiveList>
					break;
 80048f0:	e017      	b.n	8004922 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80048f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048f8:	f003 0302 	and.w	r3, r3, #2
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d103      	bne.n	8004908 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004900:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004902:	f000 fbe9 	bl	80050d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004906:	e00c      	b.n	8004922 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800490a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800490e:	f023 0301 	bic.w	r3, r3, #1
 8004912:	b2da      	uxtb	r2, r3
 8004914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004916:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800491a:	e002      	b.n	8004922 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800491c:	bf00      	nop
 800491e:	e000      	b.n	8004922 <prvProcessReceivedCommands+0x1a6>
					break;
 8004920:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004922:	4b08      	ldr	r3, [pc, #32]	@ (8004944 <prvProcessReceivedCommands+0x1c8>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	1d39      	adds	r1, r7, #4
 8004928:	2200      	movs	r2, #0
 800492a:	4618      	mov	r0, r3
 800492c:	f7fe fbfc 	bl	8003128 <xQueueReceive>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	f47f af26 	bne.w	8004784 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004938:	bf00      	nop
 800493a:	bf00      	nop
 800493c:	3730      	adds	r7, #48	@ 0x30
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	20000cf4 	.word	0x20000cf4

08004948 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b088      	sub	sp, #32
 800494c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800494e:	e049      	b.n	80049e4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004950:	4b2e      	ldr	r3, [pc, #184]	@ (8004a0c <prvSwitchTimerLists+0xc4>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800495a:	4b2c      	ldr	r3, [pc, #176]	@ (8004a0c <prvSwitchTimerLists+0xc4>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	3304      	adds	r3, #4
 8004968:	4618      	mov	r0, r3
 800496a:	f7fe f909 	bl	8002b80 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800497c:	f003 0304 	and.w	r3, r3, #4
 8004980:	2b00      	cmp	r3, #0
 8004982:	d02f      	beq.n	80049e4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	4413      	add	r3, r2
 800498c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	429a      	cmp	r2, r3
 8004994:	d90e      	bls.n	80049b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	68ba      	ldr	r2, [r7, #8]
 800499a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80049a2:	4b1a      	ldr	r3, [pc, #104]	@ (8004a0c <prvSwitchTimerLists+0xc4>)
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	3304      	adds	r3, #4
 80049aa:	4619      	mov	r1, r3
 80049ac:	4610      	mov	r0, r2
 80049ae:	f7fe f8ae 	bl	8002b0e <vListInsert>
 80049b2:	e017      	b.n	80049e4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80049b4:	2300      	movs	r3, #0
 80049b6:	9300      	str	r3, [sp, #0]
 80049b8:	2300      	movs	r3, #0
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	2100      	movs	r1, #0
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f7ff fd58 	bl	8004474 <xTimerGenericCommand>
 80049c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10b      	bne.n	80049e4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80049cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049d0:	f383 8811 	msr	BASEPRI, r3
 80049d4:	f3bf 8f6f 	isb	sy
 80049d8:	f3bf 8f4f 	dsb	sy
 80049dc:	603b      	str	r3, [r7, #0]
}
 80049de:	bf00      	nop
 80049e0:	bf00      	nop
 80049e2:	e7fd      	b.n	80049e0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80049e4:	4b09      	ldr	r3, [pc, #36]	@ (8004a0c <prvSwitchTimerLists+0xc4>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1b0      	bne.n	8004950 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80049ee:	4b07      	ldr	r3, [pc, #28]	@ (8004a0c <prvSwitchTimerLists+0xc4>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80049f4:	4b06      	ldr	r3, [pc, #24]	@ (8004a10 <prvSwitchTimerLists+0xc8>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a04      	ldr	r2, [pc, #16]	@ (8004a0c <prvSwitchTimerLists+0xc4>)
 80049fa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80049fc:	4a04      	ldr	r2, [pc, #16]	@ (8004a10 <prvSwitchTimerLists+0xc8>)
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	6013      	str	r3, [r2, #0]
}
 8004a02:	bf00      	nop
 8004a04:	3718      	adds	r7, #24
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	20000cec 	.word	0x20000cec
 8004a10:	20000cf0 	.word	0x20000cf0

08004a14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004a1a:	f000 f96d 	bl	8004cf8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004a1e:	4b15      	ldr	r3, [pc, #84]	@ (8004a74 <prvCheckForValidListAndQueue+0x60>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d120      	bne.n	8004a68 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004a26:	4814      	ldr	r0, [pc, #80]	@ (8004a78 <prvCheckForValidListAndQueue+0x64>)
 8004a28:	f7fe f820 	bl	8002a6c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004a2c:	4813      	ldr	r0, [pc, #76]	@ (8004a7c <prvCheckForValidListAndQueue+0x68>)
 8004a2e:	f7fe f81d 	bl	8002a6c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004a32:	4b13      	ldr	r3, [pc, #76]	@ (8004a80 <prvCheckForValidListAndQueue+0x6c>)
 8004a34:	4a10      	ldr	r2, [pc, #64]	@ (8004a78 <prvCheckForValidListAndQueue+0x64>)
 8004a36:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004a38:	4b12      	ldr	r3, [pc, #72]	@ (8004a84 <prvCheckForValidListAndQueue+0x70>)
 8004a3a:	4a10      	ldr	r2, [pc, #64]	@ (8004a7c <prvCheckForValidListAndQueue+0x68>)
 8004a3c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004a3e:	2300      	movs	r3, #0
 8004a40:	9300      	str	r3, [sp, #0]
 8004a42:	4b11      	ldr	r3, [pc, #68]	@ (8004a88 <prvCheckForValidListAndQueue+0x74>)
 8004a44:	4a11      	ldr	r2, [pc, #68]	@ (8004a8c <prvCheckForValidListAndQueue+0x78>)
 8004a46:	2110      	movs	r1, #16
 8004a48:	200a      	movs	r0, #10
 8004a4a:	f7fe f92d 	bl	8002ca8 <xQueueGenericCreateStatic>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	4a08      	ldr	r2, [pc, #32]	@ (8004a74 <prvCheckForValidListAndQueue+0x60>)
 8004a52:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004a54:	4b07      	ldr	r3, [pc, #28]	@ (8004a74 <prvCheckForValidListAndQueue+0x60>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d005      	beq.n	8004a68 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004a5c:	4b05      	ldr	r3, [pc, #20]	@ (8004a74 <prvCheckForValidListAndQueue+0x60>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	490b      	ldr	r1, [pc, #44]	@ (8004a90 <prvCheckForValidListAndQueue+0x7c>)
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7fe fd52 	bl	800350c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a68:	f000 f978 	bl	8004d5c <vPortExitCritical>
}
 8004a6c:	bf00      	nop
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	20000cf4 	.word	0x20000cf4
 8004a78:	20000cc4 	.word	0x20000cc4
 8004a7c:	20000cd8 	.word	0x20000cd8
 8004a80:	20000cec 	.word	0x20000cec
 8004a84:	20000cf0 	.word	0x20000cf0
 8004a88:	20000da0 	.word	0x20000da0
 8004a8c:	20000d00 	.word	0x20000d00
 8004a90:	080053c4 	.word	0x080053c4

08004a94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	3b04      	subs	r3, #4
 8004aa4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004aac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	3b04      	subs	r3, #4
 8004ab2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	f023 0201 	bic.w	r2, r3, #1
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	3b04      	subs	r3, #4
 8004ac2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004ac4:	4a0c      	ldr	r2, [pc, #48]	@ (8004af8 <pxPortInitialiseStack+0x64>)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	3b14      	subs	r3, #20
 8004ace:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	3b04      	subs	r3, #4
 8004ada:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f06f 0202 	mvn.w	r2, #2
 8004ae2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	3b20      	subs	r3, #32
 8004ae8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004aea:	68fb      	ldr	r3, [r7, #12]
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3714      	adds	r7, #20
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr
 8004af8:	08004afd 	.word	0x08004afd

08004afc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004b02:	2300      	movs	r3, #0
 8004b04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004b06:	4b13      	ldr	r3, [pc, #76]	@ (8004b54 <prvTaskExitError+0x58>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0e:	d00b      	beq.n	8004b28 <prvTaskExitError+0x2c>
	__asm volatile
 8004b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b14:	f383 8811 	msr	BASEPRI, r3
 8004b18:	f3bf 8f6f 	isb	sy
 8004b1c:	f3bf 8f4f 	dsb	sy
 8004b20:	60fb      	str	r3, [r7, #12]
}
 8004b22:	bf00      	nop
 8004b24:	bf00      	nop
 8004b26:	e7fd      	b.n	8004b24 <prvTaskExitError+0x28>
	__asm volatile
 8004b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b2c:	f383 8811 	msr	BASEPRI, r3
 8004b30:	f3bf 8f6f 	isb	sy
 8004b34:	f3bf 8f4f 	dsb	sy
 8004b38:	60bb      	str	r3, [r7, #8]
}
 8004b3a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004b3c:	bf00      	nop
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d0fc      	beq.n	8004b3e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004b44:	bf00      	nop
 8004b46:	bf00      	nop
 8004b48:	3714      	adds	r7, #20
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	2000000c 	.word	0x2000000c
	...

08004b60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004b60:	4b07      	ldr	r3, [pc, #28]	@ (8004b80 <pxCurrentTCBConst2>)
 8004b62:	6819      	ldr	r1, [r3, #0]
 8004b64:	6808      	ldr	r0, [r1, #0]
 8004b66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b6a:	f380 8809 	msr	PSP, r0
 8004b6e:	f3bf 8f6f 	isb	sy
 8004b72:	f04f 0000 	mov.w	r0, #0
 8004b76:	f380 8811 	msr	BASEPRI, r0
 8004b7a:	4770      	bx	lr
 8004b7c:	f3af 8000 	nop.w

08004b80 <pxCurrentTCBConst2>:
 8004b80:	200007c4 	.word	0x200007c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004b84:	bf00      	nop
 8004b86:	bf00      	nop

08004b88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004b88:	4808      	ldr	r0, [pc, #32]	@ (8004bac <prvPortStartFirstTask+0x24>)
 8004b8a:	6800      	ldr	r0, [r0, #0]
 8004b8c:	6800      	ldr	r0, [r0, #0]
 8004b8e:	f380 8808 	msr	MSP, r0
 8004b92:	f04f 0000 	mov.w	r0, #0
 8004b96:	f380 8814 	msr	CONTROL, r0
 8004b9a:	b662      	cpsie	i
 8004b9c:	b661      	cpsie	f
 8004b9e:	f3bf 8f4f 	dsb	sy
 8004ba2:	f3bf 8f6f 	isb	sy
 8004ba6:	df00      	svc	0
 8004ba8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004baa:	bf00      	nop
 8004bac:	e000ed08 	.word	0xe000ed08

08004bb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004bb6:	4b47      	ldr	r3, [pc, #284]	@ (8004cd4 <xPortStartScheduler+0x124>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a47      	ldr	r2, [pc, #284]	@ (8004cd8 <xPortStartScheduler+0x128>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d10b      	bne.n	8004bd8 <xPortStartScheduler+0x28>
	__asm volatile
 8004bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc4:	f383 8811 	msr	BASEPRI, r3
 8004bc8:	f3bf 8f6f 	isb	sy
 8004bcc:	f3bf 8f4f 	dsb	sy
 8004bd0:	60fb      	str	r3, [r7, #12]
}
 8004bd2:	bf00      	nop
 8004bd4:	bf00      	nop
 8004bd6:	e7fd      	b.n	8004bd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004bd8:	4b3e      	ldr	r3, [pc, #248]	@ (8004cd4 <xPortStartScheduler+0x124>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a3f      	ldr	r2, [pc, #252]	@ (8004cdc <xPortStartScheduler+0x12c>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d10b      	bne.n	8004bfa <xPortStartScheduler+0x4a>
	__asm volatile
 8004be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004be6:	f383 8811 	msr	BASEPRI, r3
 8004bea:	f3bf 8f6f 	isb	sy
 8004bee:	f3bf 8f4f 	dsb	sy
 8004bf2:	613b      	str	r3, [r7, #16]
}
 8004bf4:	bf00      	nop
 8004bf6:	bf00      	nop
 8004bf8:	e7fd      	b.n	8004bf6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004bfa:	4b39      	ldr	r3, [pc, #228]	@ (8004ce0 <xPortStartScheduler+0x130>)
 8004bfc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	22ff      	movs	r2, #255	@ 0xff
 8004c0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c14:	78fb      	ldrb	r3, [r7, #3]
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004c1c:	b2da      	uxtb	r2, r3
 8004c1e:	4b31      	ldr	r3, [pc, #196]	@ (8004ce4 <xPortStartScheduler+0x134>)
 8004c20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004c22:	4b31      	ldr	r3, [pc, #196]	@ (8004ce8 <xPortStartScheduler+0x138>)
 8004c24:	2207      	movs	r2, #7
 8004c26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c28:	e009      	b.n	8004c3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004c2a:	4b2f      	ldr	r3, [pc, #188]	@ (8004ce8 <xPortStartScheduler+0x138>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	4a2d      	ldr	r2, [pc, #180]	@ (8004ce8 <xPortStartScheduler+0x138>)
 8004c32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004c34:	78fb      	ldrb	r3, [r7, #3]
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	005b      	lsls	r3, r3, #1
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c3e:	78fb      	ldrb	r3, [r7, #3]
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c46:	2b80      	cmp	r3, #128	@ 0x80
 8004c48:	d0ef      	beq.n	8004c2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004c4a:	4b27      	ldr	r3, [pc, #156]	@ (8004ce8 <xPortStartScheduler+0x138>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f1c3 0307 	rsb	r3, r3, #7
 8004c52:	2b04      	cmp	r3, #4
 8004c54:	d00b      	beq.n	8004c6e <xPortStartScheduler+0xbe>
	__asm volatile
 8004c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c5a:	f383 8811 	msr	BASEPRI, r3
 8004c5e:	f3bf 8f6f 	isb	sy
 8004c62:	f3bf 8f4f 	dsb	sy
 8004c66:	60bb      	str	r3, [r7, #8]
}
 8004c68:	bf00      	nop
 8004c6a:	bf00      	nop
 8004c6c:	e7fd      	b.n	8004c6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ce8 <xPortStartScheduler+0x138>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	021b      	lsls	r3, r3, #8
 8004c74:	4a1c      	ldr	r2, [pc, #112]	@ (8004ce8 <xPortStartScheduler+0x138>)
 8004c76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004c78:	4b1b      	ldr	r3, [pc, #108]	@ (8004ce8 <xPortStartScheduler+0x138>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004c80:	4a19      	ldr	r2, [pc, #100]	@ (8004ce8 <xPortStartScheduler+0x138>)
 8004c82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	b2da      	uxtb	r2, r3
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004c8c:	4b17      	ldr	r3, [pc, #92]	@ (8004cec <xPortStartScheduler+0x13c>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a16      	ldr	r2, [pc, #88]	@ (8004cec <xPortStartScheduler+0x13c>)
 8004c92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004c96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004c98:	4b14      	ldr	r3, [pc, #80]	@ (8004cec <xPortStartScheduler+0x13c>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a13      	ldr	r2, [pc, #76]	@ (8004cec <xPortStartScheduler+0x13c>)
 8004c9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004ca2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004ca4:	f000 f8da 	bl	8004e5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004ca8:	4b11      	ldr	r3, [pc, #68]	@ (8004cf0 <xPortStartScheduler+0x140>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004cae:	f000 f8f9 	bl	8004ea4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004cb2:	4b10      	ldr	r3, [pc, #64]	@ (8004cf4 <xPortStartScheduler+0x144>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a0f      	ldr	r2, [pc, #60]	@ (8004cf4 <xPortStartScheduler+0x144>)
 8004cb8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004cbc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004cbe:	f7ff ff63 	bl	8004b88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004cc2:	f7ff f83b 	bl	8003d3c <vTaskSwitchContext>
	prvTaskExitError();
 8004cc6:	f7ff ff19 	bl	8004afc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3718      	adds	r7, #24
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	e000ed00 	.word	0xe000ed00
 8004cd8:	410fc271 	.word	0x410fc271
 8004cdc:	410fc270 	.word	0x410fc270
 8004ce0:	e000e400 	.word	0xe000e400
 8004ce4:	20000df0 	.word	0x20000df0
 8004ce8:	20000df4 	.word	0x20000df4
 8004cec:	e000ed20 	.word	0xe000ed20
 8004cf0:	2000000c 	.word	0x2000000c
 8004cf4:	e000ef34 	.word	0xe000ef34

08004cf8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
	__asm volatile
 8004cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d02:	f383 8811 	msr	BASEPRI, r3
 8004d06:	f3bf 8f6f 	isb	sy
 8004d0a:	f3bf 8f4f 	dsb	sy
 8004d0e:	607b      	str	r3, [r7, #4]
}
 8004d10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004d12:	4b10      	ldr	r3, [pc, #64]	@ (8004d54 <vPortEnterCritical+0x5c>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	3301      	adds	r3, #1
 8004d18:	4a0e      	ldr	r2, [pc, #56]	@ (8004d54 <vPortEnterCritical+0x5c>)
 8004d1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004d1c:	4b0d      	ldr	r3, [pc, #52]	@ (8004d54 <vPortEnterCritical+0x5c>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d110      	bne.n	8004d46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004d24:	4b0c      	ldr	r3, [pc, #48]	@ (8004d58 <vPortEnterCritical+0x60>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00b      	beq.n	8004d46 <vPortEnterCritical+0x4e>
	__asm volatile
 8004d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d32:	f383 8811 	msr	BASEPRI, r3
 8004d36:	f3bf 8f6f 	isb	sy
 8004d3a:	f3bf 8f4f 	dsb	sy
 8004d3e:	603b      	str	r3, [r7, #0]
}
 8004d40:	bf00      	nop
 8004d42:	bf00      	nop
 8004d44:	e7fd      	b.n	8004d42 <vPortEnterCritical+0x4a>
	}
}
 8004d46:	bf00      	nop
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	2000000c 	.word	0x2000000c
 8004d58:	e000ed04 	.word	0xe000ed04

08004d5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004d62:	4b12      	ldr	r3, [pc, #72]	@ (8004dac <vPortExitCritical+0x50>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10b      	bne.n	8004d82 <vPortExitCritical+0x26>
	__asm volatile
 8004d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d6e:	f383 8811 	msr	BASEPRI, r3
 8004d72:	f3bf 8f6f 	isb	sy
 8004d76:	f3bf 8f4f 	dsb	sy
 8004d7a:	607b      	str	r3, [r7, #4]
}
 8004d7c:	bf00      	nop
 8004d7e:	bf00      	nop
 8004d80:	e7fd      	b.n	8004d7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004d82:	4b0a      	ldr	r3, [pc, #40]	@ (8004dac <vPortExitCritical+0x50>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	3b01      	subs	r3, #1
 8004d88:	4a08      	ldr	r2, [pc, #32]	@ (8004dac <vPortExitCritical+0x50>)
 8004d8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004d8c:	4b07      	ldr	r3, [pc, #28]	@ (8004dac <vPortExitCritical+0x50>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d105      	bne.n	8004da0 <vPortExitCritical+0x44>
 8004d94:	2300      	movs	r3, #0
 8004d96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	f383 8811 	msr	BASEPRI, r3
}
 8004d9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr
 8004dac:	2000000c 	.word	0x2000000c

08004db0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004db0:	f3ef 8009 	mrs	r0, PSP
 8004db4:	f3bf 8f6f 	isb	sy
 8004db8:	4b15      	ldr	r3, [pc, #84]	@ (8004e10 <pxCurrentTCBConst>)
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	f01e 0f10 	tst.w	lr, #16
 8004dc0:	bf08      	it	eq
 8004dc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004dc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dca:	6010      	str	r0, [r2, #0]
 8004dcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004dd0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004dd4:	f380 8811 	msr	BASEPRI, r0
 8004dd8:	f3bf 8f4f 	dsb	sy
 8004ddc:	f3bf 8f6f 	isb	sy
 8004de0:	f7fe ffac 	bl	8003d3c <vTaskSwitchContext>
 8004de4:	f04f 0000 	mov.w	r0, #0
 8004de8:	f380 8811 	msr	BASEPRI, r0
 8004dec:	bc09      	pop	{r0, r3}
 8004dee:	6819      	ldr	r1, [r3, #0]
 8004df0:	6808      	ldr	r0, [r1, #0]
 8004df2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004df6:	f01e 0f10 	tst.w	lr, #16
 8004dfa:	bf08      	it	eq
 8004dfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004e00:	f380 8809 	msr	PSP, r0
 8004e04:	f3bf 8f6f 	isb	sy
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	f3af 8000 	nop.w

08004e10 <pxCurrentTCBConst>:
 8004e10:	200007c4 	.word	0x200007c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004e14:	bf00      	nop
 8004e16:	bf00      	nop

08004e18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
	__asm volatile
 8004e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e22:	f383 8811 	msr	BASEPRI, r3
 8004e26:	f3bf 8f6f 	isb	sy
 8004e2a:	f3bf 8f4f 	dsb	sy
 8004e2e:	607b      	str	r3, [r7, #4]
}
 8004e30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004e32:	f7fe fec9 	bl	8003bc8 <xTaskIncrementTick>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d003      	beq.n	8004e44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e3c:	4b06      	ldr	r3, [pc, #24]	@ (8004e58 <xPortSysTickHandler+0x40>)
 8004e3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e42:	601a      	str	r2, [r3, #0]
 8004e44:	2300      	movs	r3, #0
 8004e46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	f383 8811 	msr	BASEPRI, r3
}
 8004e4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004e50:	bf00      	nop
 8004e52:	3708      	adds	r7, #8
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	e000ed04 	.word	0xe000ed04

08004e5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004e60:	4b0b      	ldr	r3, [pc, #44]	@ (8004e90 <vPortSetupTimerInterrupt+0x34>)
 8004e62:	2200      	movs	r2, #0
 8004e64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004e66:	4b0b      	ldr	r3, [pc, #44]	@ (8004e94 <vPortSetupTimerInterrupt+0x38>)
 8004e68:	2200      	movs	r2, #0
 8004e6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8004e98 <vPortSetupTimerInterrupt+0x3c>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a0a      	ldr	r2, [pc, #40]	@ (8004e9c <vPortSetupTimerInterrupt+0x40>)
 8004e72:	fba2 2303 	umull	r2, r3, r2, r3
 8004e76:	099b      	lsrs	r3, r3, #6
 8004e78:	4a09      	ldr	r2, [pc, #36]	@ (8004ea0 <vPortSetupTimerInterrupt+0x44>)
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004e7e:	4b04      	ldr	r3, [pc, #16]	@ (8004e90 <vPortSetupTimerInterrupt+0x34>)
 8004e80:	2207      	movs	r2, #7
 8004e82:	601a      	str	r2, [r3, #0]
}
 8004e84:	bf00      	nop
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	e000e010 	.word	0xe000e010
 8004e94:	e000e018 	.word	0xe000e018
 8004e98:	20000000 	.word	0x20000000
 8004e9c:	10624dd3 	.word	0x10624dd3
 8004ea0:	e000e014 	.word	0xe000e014

08004ea4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004ea4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004eb4 <vPortEnableVFP+0x10>
 8004ea8:	6801      	ldr	r1, [r0, #0]
 8004eaa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004eae:	6001      	str	r1, [r0, #0]
 8004eb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004eb2:	bf00      	nop
 8004eb4:	e000ed88 	.word	0xe000ed88

08004eb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004ebe:	f3ef 8305 	mrs	r3, IPSR
 8004ec2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2b0f      	cmp	r3, #15
 8004ec8:	d915      	bls.n	8004ef6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004eca:	4a18      	ldr	r2, [pc, #96]	@ (8004f2c <vPortValidateInterruptPriority+0x74>)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	4413      	add	r3, r2
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004ed4:	4b16      	ldr	r3, [pc, #88]	@ (8004f30 <vPortValidateInterruptPriority+0x78>)
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	7afa      	ldrb	r2, [r7, #11]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d20b      	bcs.n	8004ef6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ee2:	f383 8811 	msr	BASEPRI, r3
 8004ee6:	f3bf 8f6f 	isb	sy
 8004eea:	f3bf 8f4f 	dsb	sy
 8004eee:	607b      	str	r3, [r7, #4]
}
 8004ef0:	bf00      	nop
 8004ef2:	bf00      	nop
 8004ef4:	e7fd      	b.n	8004ef2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004ef6:	4b0f      	ldr	r3, [pc, #60]	@ (8004f34 <vPortValidateInterruptPriority+0x7c>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004efe:	4b0e      	ldr	r3, [pc, #56]	@ (8004f38 <vPortValidateInterruptPriority+0x80>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d90b      	bls.n	8004f1e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f0a:	f383 8811 	msr	BASEPRI, r3
 8004f0e:	f3bf 8f6f 	isb	sy
 8004f12:	f3bf 8f4f 	dsb	sy
 8004f16:	603b      	str	r3, [r7, #0]
}
 8004f18:	bf00      	nop
 8004f1a:	bf00      	nop
 8004f1c:	e7fd      	b.n	8004f1a <vPortValidateInterruptPriority+0x62>
	}
 8004f1e:	bf00      	nop
 8004f20:	3714      	adds	r7, #20
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	e000e3f0 	.word	0xe000e3f0
 8004f30:	20000df0 	.word	0x20000df0
 8004f34:	e000ed0c 	.word	0xe000ed0c
 8004f38:	20000df4 	.word	0x20000df4

08004f3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b08a      	sub	sp, #40	@ 0x28
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004f44:	2300      	movs	r3, #0
 8004f46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004f48:	f7fe fd82 	bl	8003a50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004f4c:	4b5c      	ldr	r3, [pc, #368]	@ (80050c0 <pvPortMalloc+0x184>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d101      	bne.n	8004f58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004f54:	f000 f924 	bl	80051a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f58:	4b5a      	ldr	r3, [pc, #360]	@ (80050c4 <pvPortMalloc+0x188>)
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4013      	ands	r3, r2
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f040 8095 	bne.w	8005090 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d01e      	beq.n	8004faa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004f6c:	2208      	movs	r2, #8
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4413      	add	r3, r2
 8004f72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f003 0307 	and.w	r3, r3, #7
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d015      	beq.n	8004faa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f023 0307 	bic.w	r3, r3, #7
 8004f84:	3308      	adds	r3, #8
 8004f86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f003 0307 	and.w	r3, r3, #7
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00b      	beq.n	8004faa <pvPortMalloc+0x6e>
	__asm volatile
 8004f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f96:	f383 8811 	msr	BASEPRI, r3
 8004f9a:	f3bf 8f6f 	isb	sy
 8004f9e:	f3bf 8f4f 	dsb	sy
 8004fa2:	617b      	str	r3, [r7, #20]
}
 8004fa4:	bf00      	nop
 8004fa6:	bf00      	nop
 8004fa8:	e7fd      	b.n	8004fa6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d06f      	beq.n	8005090 <pvPortMalloc+0x154>
 8004fb0:	4b45      	ldr	r3, [pc, #276]	@ (80050c8 <pvPortMalloc+0x18c>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d86a      	bhi.n	8005090 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004fba:	4b44      	ldr	r3, [pc, #272]	@ (80050cc <pvPortMalloc+0x190>)
 8004fbc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004fbe:	4b43      	ldr	r3, [pc, #268]	@ (80050cc <pvPortMalloc+0x190>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004fc4:	e004      	b.n	8004fd0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d903      	bls.n	8004fe2 <pvPortMalloc+0xa6>
 8004fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1f1      	bne.n	8004fc6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004fe2:	4b37      	ldr	r3, [pc, #220]	@ (80050c0 <pvPortMalloc+0x184>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d051      	beq.n	8005090 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004fec:	6a3b      	ldr	r3, [r7, #32]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2208      	movs	r2, #8
 8004ff2:	4413      	add	r3, r2
 8004ff4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	6a3b      	ldr	r3, [r7, #32]
 8004ffc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005000:	685a      	ldr	r2, [r3, #4]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	1ad2      	subs	r2, r2, r3
 8005006:	2308      	movs	r3, #8
 8005008:	005b      	lsls	r3, r3, #1
 800500a:	429a      	cmp	r2, r3
 800500c:	d920      	bls.n	8005050 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800500e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4413      	add	r3, r2
 8005014:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	f003 0307 	and.w	r3, r3, #7
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00b      	beq.n	8005038 <pvPortMalloc+0xfc>
	__asm volatile
 8005020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005024:	f383 8811 	msr	BASEPRI, r3
 8005028:	f3bf 8f6f 	isb	sy
 800502c:	f3bf 8f4f 	dsb	sy
 8005030:	613b      	str	r3, [r7, #16]
}
 8005032:	bf00      	nop
 8005034:	bf00      	nop
 8005036:	e7fd      	b.n	8005034 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	1ad2      	subs	r2, r2, r3
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800504a:	69b8      	ldr	r0, [r7, #24]
 800504c:	f000 f90a 	bl	8005264 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005050:	4b1d      	ldr	r3, [pc, #116]	@ (80050c8 <pvPortMalloc+0x18c>)
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	4a1b      	ldr	r2, [pc, #108]	@ (80050c8 <pvPortMalloc+0x18c>)
 800505c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800505e:	4b1a      	ldr	r3, [pc, #104]	@ (80050c8 <pvPortMalloc+0x18c>)
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	4b1b      	ldr	r3, [pc, #108]	@ (80050d0 <pvPortMalloc+0x194>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	429a      	cmp	r2, r3
 8005068:	d203      	bcs.n	8005072 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800506a:	4b17      	ldr	r3, [pc, #92]	@ (80050c8 <pvPortMalloc+0x18c>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a18      	ldr	r2, [pc, #96]	@ (80050d0 <pvPortMalloc+0x194>)
 8005070:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005074:	685a      	ldr	r2, [r3, #4]
 8005076:	4b13      	ldr	r3, [pc, #76]	@ (80050c4 <pvPortMalloc+0x188>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	431a      	orrs	r2, r3
 800507c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005082:	2200      	movs	r2, #0
 8005084:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005086:	4b13      	ldr	r3, [pc, #76]	@ (80050d4 <pvPortMalloc+0x198>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	3301      	adds	r3, #1
 800508c:	4a11      	ldr	r2, [pc, #68]	@ (80050d4 <pvPortMalloc+0x198>)
 800508e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005090:	f7fe fcec 	bl	8003a6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	f003 0307 	and.w	r3, r3, #7
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00b      	beq.n	80050b6 <pvPortMalloc+0x17a>
	__asm volatile
 800509e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050a2:	f383 8811 	msr	BASEPRI, r3
 80050a6:	f3bf 8f6f 	isb	sy
 80050aa:	f3bf 8f4f 	dsb	sy
 80050ae:	60fb      	str	r3, [r7, #12]
}
 80050b0:	bf00      	nop
 80050b2:	bf00      	nop
 80050b4:	e7fd      	b.n	80050b2 <pvPortMalloc+0x176>
	return pvReturn;
 80050b6:	69fb      	ldr	r3, [r7, #28]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3728      	adds	r7, #40	@ 0x28
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	20004a00 	.word	0x20004a00
 80050c4:	20004a14 	.word	0x20004a14
 80050c8:	20004a04 	.word	0x20004a04
 80050cc:	200049f8 	.word	0x200049f8
 80050d0:	20004a08 	.word	0x20004a08
 80050d4:	20004a0c 	.word	0x20004a0c

080050d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b086      	sub	sp, #24
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d04f      	beq.n	800518a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80050ea:	2308      	movs	r3, #8
 80050ec:	425b      	negs	r3, r3
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	4413      	add	r3, r2
 80050f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	4b25      	ldr	r3, [pc, #148]	@ (8005194 <vPortFree+0xbc>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4013      	ands	r3, r2
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10b      	bne.n	800511e <vPortFree+0x46>
	__asm volatile
 8005106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800510a:	f383 8811 	msr	BASEPRI, r3
 800510e:	f3bf 8f6f 	isb	sy
 8005112:	f3bf 8f4f 	dsb	sy
 8005116:	60fb      	str	r3, [r7, #12]
}
 8005118:	bf00      	nop
 800511a:	bf00      	nop
 800511c:	e7fd      	b.n	800511a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00b      	beq.n	800513e <vPortFree+0x66>
	__asm volatile
 8005126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800512a:	f383 8811 	msr	BASEPRI, r3
 800512e:	f3bf 8f6f 	isb	sy
 8005132:	f3bf 8f4f 	dsb	sy
 8005136:	60bb      	str	r3, [r7, #8]
}
 8005138:	bf00      	nop
 800513a:	bf00      	nop
 800513c:	e7fd      	b.n	800513a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	4b14      	ldr	r3, [pc, #80]	@ (8005194 <vPortFree+0xbc>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4013      	ands	r3, r2
 8005148:	2b00      	cmp	r3, #0
 800514a:	d01e      	beq.n	800518a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d11a      	bne.n	800518a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	685a      	ldr	r2, [r3, #4]
 8005158:	4b0e      	ldr	r3, [pc, #56]	@ (8005194 <vPortFree+0xbc>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	43db      	mvns	r3, r3
 800515e:	401a      	ands	r2, r3
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005164:	f7fe fc74 	bl	8003a50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	4b0a      	ldr	r3, [pc, #40]	@ (8005198 <vPortFree+0xc0>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4413      	add	r3, r2
 8005172:	4a09      	ldr	r2, [pc, #36]	@ (8005198 <vPortFree+0xc0>)
 8005174:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005176:	6938      	ldr	r0, [r7, #16]
 8005178:	f000 f874 	bl	8005264 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800517c:	4b07      	ldr	r3, [pc, #28]	@ (800519c <vPortFree+0xc4>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	3301      	adds	r3, #1
 8005182:	4a06      	ldr	r2, [pc, #24]	@ (800519c <vPortFree+0xc4>)
 8005184:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005186:	f7fe fc71 	bl	8003a6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800518a:	bf00      	nop
 800518c:	3718      	adds	r7, #24
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	20004a14 	.word	0x20004a14
 8005198:	20004a04 	.word	0x20004a04
 800519c:	20004a10 	.word	0x20004a10

080051a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80051a6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80051aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80051ac:	4b27      	ldr	r3, [pc, #156]	@ (800524c <prvHeapInit+0xac>)
 80051ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f003 0307 	and.w	r3, r3, #7
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00c      	beq.n	80051d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	3307      	adds	r3, #7
 80051be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f023 0307 	bic.w	r3, r3, #7
 80051c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80051c8:	68ba      	ldr	r2, [r7, #8]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	4a1f      	ldr	r2, [pc, #124]	@ (800524c <prvHeapInit+0xac>)
 80051d0:	4413      	add	r3, r2
 80051d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80051d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005250 <prvHeapInit+0xb0>)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80051de:	4b1c      	ldr	r3, [pc, #112]	@ (8005250 <prvHeapInit+0xb0>)
 80051e0:	2200      	movs	r2, #0
 80051e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	4413      	add	r3, r2
 80051ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80051ec:	2208      	movs	r2, #8
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	1a9b      	subs	r3, r3, r2
 80051f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f023 0307 	bic.w	r3, r3, #7
 80051fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4a15      	ldr	r2, [pc, #84]	@ (8005254 <prvHeapInit+0xb4>)
 8005200:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005202:	4b14      	ldr	r3, [pc, #80]	@ (8005254 <prvHeapInit+0xb4>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2200      	movs	r2, #0
 8005208:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800520a:	4b12      	ldr	r3, [pc, #72]	@ (8005254 <prvHeapInit+0xb4>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2200      	movs	r2, #0
 8005210:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	1ad2      	subs	r2, r2, r3
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005220:	4b0c      	ldr	r3, [pc, #48]	@ (8005254 <prvHeapInit+0xb4>)
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	4a0a      	ldr	r2, [pc, #40]	@ (8005258 <prvHeapInit+0xb8>)
 800522e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	4a09      	ldr	r2, [pc, #36]	@ (800525c <prvHeapInit+0xbc>)
 8005236:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005238:	4b09      	ldr	r3, [pc, #36]	@ (8005260 <prvHeapInit+0xc0>)
 800523a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800523e:	601a      	str	r2, [r3, #0]
}
 8005240:	bf00      	nop
 8005242:	3714      	adds	r7, #20
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr
 800524c:	20000df8 	.word	0x20000df8
 8005250:	200049f8 	.word	0x200049f8
 8005254:	20004a00 	.word	0x20004a00
 8005258:	20004a08 	.word	0x20004a08
 800525c:	20004a04 	.word	0x20004a04
 8005260:	20004a14 	.word	0x20004a14

08005264 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800526c:	4b28      	ldr	r3, [pc, #160]	@ (8005310 <prvInsertBlockIntoFreeList+0xac>)
 800526e:	60fb      	str	r3, [r7, #12]
 8005270:	e002      	b.n	8005278 <prvInsertBlockIntoFreeList+0x14>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	60fb      	str	r3, [r7, #12]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	429a      	cmp	r2, r3
 8005280:	d8f7      	bhi.n	8005272 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	4413      	add	r3, r2
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	429a      	cmp	r2, r3
 8005292:	d108      	bne.n	80052a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	685a      	ldr	r2, [r3, #4]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	441a      	add	r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	68ba      	ldr	r2, [r7, #8]
 80052b0:	441a      	add	r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d118      	bne.n	80052ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	4b15      	ldr	r3, [pc, #84]	@ (8005314 <prvInsertBlockIntoFreeList+0xb0>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d00d      	beq.n	80052e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685a      	ldr	r2, [r3, #4]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	441a      	add	r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	601a      	str	r2, [r3, #0]
 80052e0:	e008      	b.n	80052f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80052e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005314 <prvInsertBlockIntoFreeList+0xb0>)
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	601a      	str	r2, [r3, #0]
 80052ea:	e003      	b.n	80052f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d002      	beq.n	8005302 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005302:	bf00      	nop
 8005304:	3714      	adds	r7, #20
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	200049f8 	.word	0x200049f8
 8005314:	20004a00 	.word	0x20004a00

08005318 <memset>:
 8005318:	4402      	add	r2, r0
 800531a:	4603      	mov	r3, r0
 800531c:	4293      	cmp	r3, r2
 800531e:	d100      	bne.n	8005322 <memset+0xa>
 8005320:	4770      	bx	lr
 8005322:	f803 1b01 	strb.w	r1, [r3], #1
 8005326:	e7f9      	b.n	800531c <memset+0x4>

08005328 <__libc_init_array>:
 8005328:	b570      	push	{r4, r5, r6, lr}
 800532a:	4d0d      	ldr	r5, [pc, #52]	@ (8005360 <__libc_init_array+0x38>)
 800532c:	4c0d      	ldr	r4, [pc, #52]	@ (8005364 <__libc_init_array+0x3c>)
 800532e:	1b64      	subs	r4, r4, r5
 8005330:	10a4      	asrs	r4, r4, #2
 8005332:	2600      	movs	r6, #0
 8005334:	42a6      	cmp	r6, r4
 8005336:	d109      	bne.n	800534c <__libc_init_array+0x24>
 8005338:	4d0b      	ldr	r5, [pc, #44]	@ (8005368 <__libc_init_array+0x40>)
 800533a:	4c0c      	ldr	r4, [pc, #48]	@ (800536c <__libc_init_array+0x44>)
 800533c:	f000 f826 	bl	800538c <_init>
 8005340:	1b64      	subs	r4, r4, r5
 8005342:	10a4      	asrs	r4, r4, #2
 8005344:	2600      	movs	r6, #0
 8005346:	42a6      	cmp	r6, r4
 8005348:	d105      	bne.n	8005356 <__libc_init_array+0x2e>
 800534a:	bd70      	pop	{r4, r5, r6, pc}
 800534c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005350:	4798      	blx	r3
 8005352:	3601      	adds	r6, #1
 8005354:	e7ee      	b.n	8005334 <__libc_init_array+0xc>
 8005356:	f855 3b04 	ldr.w	r3, [r5], #4
 800535a:	4798      	blx	r3
 800535c:	3601      	adds	r6, #1
 800535e:	e7f2      	b.n	8005346 <__libc_init_array+0x1e>
 8005360:	08005434 	.word	0x08005434
 8005364:	08005434 	.word	0x08005434
 8005368:	08005434 	.word	0x08005434
 800536c:	08005438 	.word	0x08005438

08005370 <memcpy>:
 8005370:	440a      	add	r2, r1
 8005372:	4291      	cmp	r1, r2
 8005374:	f100 33ff 	add.w	r3, r0, #4294967295
 8005378:	d100      	bne.n	800537c <memcpy+0xc>
 800537a:	4770      	bx	lr
 800537c:	b510      	push	{r4, lr}
 800537e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005382:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005386:	4291      	cmp	r1, r2
 8005388:	d1f9      	bne.n	800537e <memcpy+0xe>
 800538a:	bd10      	pop	{r4, pc}

0800538c <_init>:
 800538c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800538e:	bf00      	nop
 8005390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005392:	bc08      	pop	{r3}
 8005394:	469e      	mov	lr, r3
 8005396:	4770      	bx	lr

08005398 <_fini>:
 8005398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800539a:	bf00      	nop
 800539c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800539e:	bc08      	pop	{r3}
 80053a0:	469e      	mov	lr, r3
 80053a2:	4770      	bx	lr
