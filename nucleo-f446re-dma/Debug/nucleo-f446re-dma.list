
nucleo-f446re-dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028fc  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08002ac0  08002ac0  00003ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b44  08002b44  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002b44  08002b44  00003b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b4c  08002b4c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b4c  08002b4c  00003b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002b50  08002b50  00003b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002b54  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  2000000c  08002b60  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  08002b60  000040d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b46  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001884  00000000  00000000  0000cb82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000748  00000000  00000000  0000e408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000593  00000000  00000000  0000eb50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020c7f  00000000  00000000  0000f0e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009aed  00000000  00000000  0002fd62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7e7e  00000000  00000000  0003984f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001016cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d08  00000000  00000000  00101710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00103418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002aa8 	.word	0x08002aa8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002aa8 	.word	0x08002aa8

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b988 	b.w	800053c <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	468e      	mov	lr, r1
 800024c:	4604      	mov	r4, r0
 800024e:	4688      	mov	r8, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14a      	bne.n	80002ea <__udivmoddi4+0xa6>
 8000254:	428a      	cmp	r2, r1
 8000256:	4617      	mov	r7, r2
 8000258:	d962      	bls.n	8000320 <__udivmoddi4+0xdc>
 800025a:	fab2 f682 	clz	r6, r2
 800025e:	b14e      	cbz	r6, 8000274 <__udivmoddi4+0x30>
 8000260:	f1c6 0320 	rsb	r3, r6, #32
 8000264:	fa01 f806 	lsl.w	r8, r1, r6
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	40b7      	lsls	r7, r6
 800026e:	ea43 0808 	orr.w	r8, r3, r8
 8000272:	40b4      	lsls	r4, r6
 8000274:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000278:	fa1f fc87 	uxth.w	ip, r7
 800027c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000280:	0c23      	lsrs	r3, r4, #16
 8000282:	fb0e 8811 	mls	r8, lr, r1, r8
 8000286:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028a:	fb01 f20c 	mul.w	r2, r1, ip
 800028e:	429a      	cmp	r2, r3
 8000290:	d909      	bls.n	80002a6 <__udivmoddi4+0x62>
 8000292:	18fb      	adds	r3, r7, r3
 8000294:	f101 30ff 	add.w	r0, r1, #4294967295
 8000298:	f080 80ea 	bcs.w	8000470 <__udivmoddi4+0x22c>
 800029c:	429a      	cmp	r2, r3
 800029e:	f240 80e7 	bls.w	8000470 <__udivmoddi4+0x22c>
 80002a2:	3902      	subs	r1, #2
 80002a4:	443b      	add	r3, r7
 80002a6:	1a9a      	subs	r2, r3, r2
 80002a8:	b2a3      	uxth	r3, r4
 80002aa:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ae:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ba:	459c      	cmp	ip, r3
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0x8e>
 80002be:	18fb      	adds	r3, r7, r3
 80002c0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c4:	f080 80d6 	bcs.w	8000474 <__udivmoddi4+0x230>
 80002c8:	459c      	cmp	ip, r3
 80002ca:	f240 80d3 	bls.w	8000474 <__udivmoddi4+0x230>
 80002ce:	443b      	add	r3, r7
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d6:	eba3 030c 	sub.w	r3, r3, ip
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa2>
 80002de:	40f3      	lsrs	r3, r6
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xb6>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb0>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa2>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x14c>
 8000302:	4573      	cmp	r3, lr
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xc8>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 8105 	bhi.w	8000516 <__udivmoddi4+0x2d2>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000312:	2001      	movs	r0, #1
 8000314:	4690      	mov	r8, r2
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e5      	beq.n	80002e6 <__udivmoddi4+0xa2>
 800031a:	e9c5 4800 	strd	r4, r8, [r5]
 800031e:	e7e2      	b.n	80002e6 <__udivmoddi4+0xa2>
 8000320:	2a00      	cmp	r2, #0
 8000322:	f000 8090 	beq.w	8000446 <__udivmoddi4+0x202>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	2e00      	cmp	r6, #0
 800032c:	f040 80a4 	bne.w	8000478 <__udivmoddi4+0x234>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	0c03      	lsrs	r3, r0, #16
 8000334:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000338:	b280      	uxth	r0, r0
 800033a:	b2bc      	uxth	r4, r7
 800033c:	2101      	movs	r1, #1
 800033e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000342:	fb0e 221c 	mls	r2, lr, ip, r2
 8000346:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034a:	fb04 f20c 	mul.w	r2, r4, ip
 800034e:	429a      	cmp	r2, r3
 8000350:	d907      	bls.n	8000362 <__udivmoddi4+0x11e>
 8000352:	18fb      	adds	r3, r7, r3
 8000354:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000358:	d202      	bcs.n	8000360 <__udivmoddi4+0x11c>
 800035a:	429a      	cmp	r2, r3
 800035c:	f200 80e0 	bhi.w	8000520 <__udivmoddi4+0x2dc>
 8000360:	46c4      	mov	ip, r8
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	fbb3 f2fe 	udiv	r2, r3, lr
 8000368:	fb0e 3312 	mls	r3, lr, r2, r3
 800036c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000370:	fb02 f404 	mul.w	r4, r2, r4
 8000374:	429c      	cmp	r4, r3
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0x144>
 8000378:	18fb      	adds	r3, r7, r3
 800037a:	f102 30ff 	add.w	r0, r2, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x142>
 8000380:	429c      	cmp	r4, r3
 8000382:	f200 80ca 	bhi.w	800051a <__udivmoddi4+0x2d6>
 8000386:	4602      	mov	r2, r0
 8000388:	1b1b      	subs	r3, r3, r4
 800038a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x98>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa0e f401 	lsl.w	r4, lr, r1
 80003a0:	fa20 f306 	lsr.w	r3, r0, r6
 80003a4:	fa2e fe06 	lsr.w	lr, lr, r6
 80003a8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fa00 f801 	lsl.w	r8, r0, r1
 80003b2:	fa1f fc87 	uxth.w	ip, r7
 80003b6:	fbbe f0f9 	udiv	r0, lr, r9
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x1a0>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003d6:	f080 809c 	bcs.w	8000512 <__udivmoddi4+0x2ce>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	f240 8099 	bls.w	8000512 <__udivmoddi4+0x2ce>
 80003e0:	3802      	subs	r0, #2
 80003e2:	443c      	add	r4, r7
 80003e4:	eba4 040e 	sub.w	r4, r4, lr
 80003e8:	fa1f fe83 	uxth.w	lr, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003f8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fc:	45a4      	cmp	ip, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1ce>
 8000400:	193c      	adds	r4, r7, r4
 8000402:	f103 3eff 	add.w	lr, r3, #4294967295
 8000406:	f080 8082 	bcs.w	800050e <__udivmoddi4+0x2ca>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d97f      	bls.n	800050e <__udivmoddi4+0x2ca>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000416:	eba4 040c 	sub.w	r4, r4, ip
 800041a:	fba0 ec02 	umull	lr, ip, r0, r2
 800041e:	4564      	cmp	r4, ip
 8000420:	4673      	mov	r3, lr
 8000422:	46e1      	mov	r9, ip
 8000424:	d362      	bcc.n	80004ec <__udivmoddi4+0x2a8>
 8000426:	d05f      	beq.n	80004e8 <__udivmoddi4+0x2a4>
 8000428:	b15d      	cbz	r5, 8000442 <__udivmoddi4+0x1fe>
 800042a:	ebb8 0203 	subs.w	r2, r8, r3
 800042e:	eb64 0409 	sbc.w	r4, r4, r9
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	fa22 f301 	lsr.w	r3, r2, r1
 800043a:	431e      	orrs	r6, r3
 800043c:	40cc      	lsrs	r4, r1
 800043e:	e9c5 6400 	strd	r6, r4, [r5]
 8000442:	2100      	movs	r1, #0
 8000444:	e74f      	b.n	80002e6 <__udivmoddi4+0xa2>
 8000446:	fbb1 fcf2 	udiv	ip, r1, r2
 800044a:	0c01      	lsrs	r1, r0, #16
 800044c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000450:	b280      	uxth	r0, r0
 8000452:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000456:	463b      	mov	r3, r7
 8000458:	4638      	mov	r0, r7
 800045a:	463c      	mov	r4, r7
 800045c:	46b8      	mov	r8, r7
 800045e:	46be      	mov	lr, r7
 8000460:	2620      	movs	r6, #32
 8000462:	fbb1 f1f7 	udiv	r1, r1, r7
 8000466:	eba2 0208 	sub.w	r2, r2, r8
 800046a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046e:	e766      	b.n	800033e <__udivmoddi4+0xfa>
 8000470:	4601      	mov	r1, r0
 8000472:	e718      	b.n	80002a6 <__udivmoddi4+0x62>
 8000474:	4610      	mov	r0, r2
 8000476:	e72c      	b.n	80002d2 <__udivmoddi4+0x8e>
 8000478:	f1c6 0220 	rsb	r2, r6, #32
 800047c:	fa2e f302 	lsr.w	r3, lr, r2
 8000480:	40b7      	lsls	r7, r6
 8000482:	40b1      	lsls	r1, r6
 8000484:	fa20 f202 	lsr.w	r2, r0, r2
 8000488:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800048c:	430a      	orrs	r2, r1
 800048e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000492:	b2bc      	uxth	r4, r7
 8000494:	fb0e 3318 	mls	r3, lr, r8, r3
 8000498:	0c11      	lsrs	r1, r2, #16
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb08 f904 	mul.w	r9, r8, r4
 80004a2:	40b0      	lsls	r0, r6
 80004a4:	4589      	cmp	r9, r1
 80004a6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004aa:	b280      	uxth	r0, r0
 80004ac:	d93e      	bls.n	800052c <__udivmoddi4+0x2e8>
 80004ae:	1879      	adds	r1, r7, r1
 80004b0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b4:	d201      	bcs.n	80004ba <__udivmoddi4+0x276>
 80004b6:	4589      	cmp	r9, r1
 80004b8:	d81f      	bhi.n	80004fa <__udivmoddi4+0x2b6>
 80004ba:	eba1 0109 	sub.w	r1, r1, r9
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fb09 f804 	mul.w	r8, r9, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	b292      	uxth	r2, r2
 80004cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d0:	4542      	cmp	r2, r8
 80004d2:	d229      	bcs.n	8000528 <__udivmoddi4+0x2e4>
 80004d4:	18ba      	adds	r2, r7, r2
 80004d6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004da:	d2c4      	bcs.n	8000466 <__udivmoddi4+0x222>
 80004dc:	4542      	cmp	r2, r8
 80004de:	d2c2      	bcs.n	8000466 <__udivmoddi4+0x222>
 80004e0:	f1a9 0102 	sub.w	r1, r9, #2
 80004e4:	443a      	add	r2, r7
 80004e6:	e7be      	b.n	8000466 <__udivmoddi4+0x222>
 80004e8:	45f0      	cmp	r8, lr
 80004ea:	d29d      	bcs.n	8000428 <__udivmoddi4+0x1e4>
 80004ec:	ebbe 0302 	subs.w	r3, lr, r2
 80004f0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f4:	3801      	subs	r0, #1
 80004f6:	46e1      	mov	r9, ip
 80004f8:	e796      	b.n	8000428 <__udivmoddi4+0x1e4>
 80004fa:	eba7 0909 	sub.w	r9, r7, r9
 80004fe:	4449      	add	r1, r9
 8000500:	f1a8 0c02 	sub.w	ip, r8, #2
 8000504:	fbb1 f9fe 	udiv	r9, r1, lr
 8000508:	fb09 f804 	mul.w	r8, r9, r4
 800050c:	e7db      	b.n	80004c6 <__udivmoddi4+0x282>
 800050e:	4673      	mov	r3, lr
 8000510:	e77f      	b.n	8000412 <__udivmoddi4+0x1ce>
 8000512:	4650      	mov	r0, sl
 8000514:	e766      	b.n	80003e4 <__udivmoddi4+0x1a0>
 8000516:	4608      	mov	r0, r1
 8000518:	e6fd      	b.n	8000316 <__udivmoddi4+0xd2>
 800051a:	443b      	add	r3, r7
 800051c:	3a02      	subs	r2, #2
 800051e:	e733      	b.n	8000388 <__udivmoddi4+0x144>
 8000520:	f1ac 0c02 	sub.w	ip, ip, #2
 8000524:	443b      	add	r3, r7
 8000526:	e71c      	b.n	8000362 <__udivmoddi4+0x11e>
 8000528:	4649      	mov	r1, r9
 800052a:	e79c      	b.n	8000466 <__udivmoddi4+0x222>
 800052c:	eba1 0109 	sub.w	r1, r1, r9
 8000530:	46c4      	mov	ip, r8
 8000532:	fbb1 f9fe 	udiv	r9, r1, lr
 8000536:	fb09 f804 	mul.w	r8, r9, r4
 800053a:	e7c4      	b.n	80004c6 <__udivmoddi4+0x282>

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b5b0      	push	{r4, r5, r7, lr}
 8000542:	b09a      	sub	sp, #104	@ 0x68
 8000544:	af00      	add	r7, sp, #0
	char msg[] = "once upon a time in germany there was a beautiful girl her name is leyla, she is so beautiful \r\n";
 8000546:	4a19      	ldr	r2, [pc, #100]	@ (80005ac <main+0x6c>)
 8000548:	1d3b      	adds	r3, r7, #4
 800054a:	4611      	mov	r1, r2
 800054c:	2261      	movs	r2, #97	@ 0x61
 800054e:	4618      	mov	r0, r3
 8000550:	f002 fa9c 	bl	8002a8c <memcpy>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000554:	f000 fa8e 	bl	8000a74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000558:	f000 f830 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055c:	f000 f8e6 	bl	800072c <MX_GPIO_Init>
  MX_DMA_Init();
 8000560:	f000 f8c4 	bl	80006ec <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000564:	f000 f898 	bl	8000698 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_DMA_RegisterCallback(&hdma_usart2_tx, HAL_DMA_XFER_CPLT_CB_ID, &DMATransferComplete);
 8000568:	4a11      	ldr	r2, [pc, #68]	@ (80005b0 <main+0x70>)
 800056a:	2100      	movs	r1, #0
 800056c:	4811      	ldr	r0, [pc, #68]	@ (80005b4 <main+0x74>)
 800056e:	f000 feb9 	bl	80012e4 <HAL_DMA_RegisterCallback>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	huart2.Instance->CR3 |= USART_CR3_DMAT;
 8000572:	4b11      	ldr	r3, [pc, #68]	@ (80005b8 <main+0x78>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	695a      	ldr	r2, [r3, #20]
 8000578:	4b0f      	ldr	r3, [pc, #60]	@ (80005b8 <main+0x78>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000580:	615a      	str	r2, [r3, #20]
	HAL_DMA_Start_IT(&hdma_usart2_tx, (uint32_t)msg, (uint32_t)&huart2.Instance->DR, strlen(msg));
 8000582:	1d3c      	adds	r4, r7, #4
 8000584:	4b0c      	ldr	r3, [pc, #48]	@ (80005b8 <main+0x78>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	3304      	adds	r3, #4
 800058a:	461d      	mov	r5, r3
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	4618      	mov	r0, r3
 8000590:	f7ff fe38 	bl	8000204 <strlen>
 8000594:	4603      	mov	r3, r0
 8000596:	462a      	mov	r2, r5
 8000598:	4621      	mov	r1, r4
 800059a:	4806      	ldr	r0, [pc, #24]	@ (80005b4 <main+0x74>)
 800059c:	f000 fcc0 	bl	8000f20 <HAL_DMA_Start_IT>
	HAL_Delay(1000);
 80005a0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005a4:	f000 fad8 	bl	8000b58 <HAL_Delay>
	huart2.Instance->CR3 |= USART_CR3_DMAT;
 80005a8:	bf00      	nop
 80005aa:	e7e2      	b.n	8000572 <main+0x32>
 80005ac:	08002ac0 	.word	0x08002ac0
 80005b0:	08000809 	.word	0x08000809
 80005b4:	20000070 	.word	0x20000070
 80005b8:	20000028 	.word	0x20000028

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	@ 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 031c 	add.w	r3, r7, #28
 80005c6:	2234      	movs	r2, #52	@ 0x34
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f002 fa32 	bl	8002a34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 0308 	add.w	r3, r7, #8
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	2300      	movs	r3, #0
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	4b2a      	ldr	r3, [pc, #168]	@ (8000690 <SystemClock_Config+0xd4>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e8:	4a29      	ldr	r2, [pc, #164]	@ (8000690 <SystemClock_Config+0xd4>)
 80005ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80005f0:	4b27      	ldr	r3, [pc, #156]	@ (8000690 <SystemClock_Config+0xd4>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005fc:	2300      	movs	r3, #0
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	4b24      	ldr	r3, [pc, #144]	@ (8000694 <SystemClock_Config+0xd8>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000608:	4a22      	ldr	r2, [pc, #136]	@ (8000694 <SystemClock_Config+0xd8>)
 800060a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800060e:	6013      	str	r3, [r2, #0]
 8000610:	4b20      	ldr	r3, [pc, #128]	@ (8000694 <SystemClock_Config+0xd8>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000618:	603b      	str	r3, [r7, #0]
 800061a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800061c:	2302      	movs	r3, #2
 800061e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000620:	2301      	movs	r3, #1
 8000622:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000624:	2310      	movs	r3, #16
 8000626:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000628:	2302      	movs	r3, #2
 800062a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800062c:	2300      	movs	r3, #0
 800062e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000630:	2310      	movs	r3, #16
 8000632:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000634:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000638:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800063a:	2304      	movs	r3, #4
 800063c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800063e:	2302      	movs	r3, #2
 8000640:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000642:	2302      	movs	r3, #2
 8000644:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000646:	f107 031c 	add.w	r3, r7, #28
 800064a:	4618      	mov	r0, r3
 800064c:	f001 fc90 	bl	8001f70 <HAL_RCC_OscConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000656:	f000 f8ef 	bl	8000838 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065a:	230f      	movs	r3, #15
 800065c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065e:	2302      	movs	r3, #2
 8000660:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000666:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800066a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000670:	f107 0308 	add.w	r3, r7, #8
 8000674:	2102      	movs	r1, #2
 8000676:	4618      	mov	r0, r3
 8000678:	f001 f930 	bl	80018dc <HAL_RCC_ClockConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000682:	f000 f8d9 	bl	8000838 <Error_Handler>
  }
}
 8000686:	bf00      	nop
 8000688:	3750      	adds	r7, #80	@ 0x50
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40023800 	.word	0x40023800
 8000694:	40007000 	.word	0x40007000

08000698 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800069c:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <MX_USART2_UART_Init+0x4c>)
 800069e:	4a12      	ldr	r2, [pc, #72]	@ (80006e8 <MX_USART2_UART_Init+0x50>)
 80006a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006a2:	4b10      	ldr	r3, [pc, #64]	@ (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006aa:	4b0e      	ldr	r3, [pc, #56]	@ (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006b0:	4b0c      	ldr	r3, [pc, #48]	@ (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006b6:	4b0b      	ldr	r3, [pc, #44]	@ (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006bc:	4b09      	ldr	r3, [pc, #36]	@ (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006be:	220c      	movs	r2, #12
 80006c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c2:	4b08      	ldr	r3, [pc, #32]	@ (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c8:	4b06      	ldr	r3, [pc, #24]	@ (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ce:	4805      	ldr	r0, [pc, #20]	@ (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006d0:	f001 feec 	bl	80024ac <HAL_UART_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006da:	f000 f8ad 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000028 	.word	0x20000028
 80006e8:	40004400 	.word	0x40004400

080006ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000728 <MX_DMA_Init+0x3c>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	4a0b      	ldr	r2, [pc, #44]	@ (8000728 <MX_DMA_Init+0x3c>)
 80006fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000700:	6313      	str	r3, [r2, #48]	@ 0x30
 8000702:	4b09      	ldr	r3, [pc, #36]	@ (8000728 <MX_DMA_Init+0x3c>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800070e:	2200      	movs	r2, #0
 8000710:	2100      	movs	r1, #0
 8000712:	2011      	movs	r0, #17
 8000714:	f000 fb1f 	bl	8000d56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000718:	2011      	movs	r0, #17
 800071a:	f000 fb38 	bl	8000d8e <HAL_NVIC_EnableIRQ>

}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800

0800072c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	@ 0x28
 8000730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
 8000746:	4b2d      	ldr	r3, [pc, #180]	@ (80007fc <MX_GPIO_Init+0xd0>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	4a2c      	ldr	r2, [pc, #176]	@ (80007fc <MX_GPIO_Init+0xd0>)
 800074c:	f043 0304 	orr.w	r3, r3, #4
 8000750:	6313      	str	r3, [r2, #48]	@ 0x30
 8000752:	4b2a      	ldr	r3, [pc, #168]	@ (80007fc <MX_GPIO_Init+0xd0>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	f003 0304 	and.w	r3, r3, #4
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	4b26      	ldr	r3, [pc, #152]	@ (80007fc <MX_GPIO_Init+0xd0>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	4a25      	ldr	r2, [pc, #148]	@ (80007fc <MX_GPIO_Init+0xd0>)
 8000768:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800076c:	6313      	str	r3, [r2, #48]	@ 0x30
 800076e:	4b23      	ldr	r3, [pc, #140]	@ (80007fc <MX_GPIO_Init+0xd0>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	4b1f      	ldr	r3, [pc, #124]	@ (80007fc <MX_GPIO_Init+0xd0>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	4a1e      	ldr	r2, [pc, #120]	@ (80007fc <MX_GPIO_Init+0xd0>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6313      	str	r3, [r2, #48]	@ 0x30
 800078a:	4b1c      	ldr	r3, [pc, #112]	@ (80007fc <MX_GPIO_Init+0xd0>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	4b18      	ldr	r3, [pc, #96]	@ (80007fc <MX_GPIO_Init+0xd0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	4a17      	ldr	r2, [pc, #92]	@ (80007fc <MX_GPIO_Init+0xd0>)
 80007a0:	f043 0302 	orr.w	r3, r3, #2
 80007a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a6:	4b15      	ldr	r3, [pc, #84]	@ (80007fc <MX_GPIO_Init+0xd0>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	f003 0302 	and.w	r3, r3, #2
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2120      	movs	r1, #32
 80007b6:	4812      	ldr	r0, [pc, #72]	@ (8000800 <MX_GPIO_Init+0xd4>)
 80007b8:	f001 f85c 	bl	8001874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007c2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	4619      	mov	r1, r3
 80007d2:	480c      	ldr	r0, [pc, #48]	@ (8000804 <MX_GPIO_Init+0xd8>)
 80007d4:	f000 feba 	bl	800154c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007d8:	2320      	movs	r3, #32
 80007da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007dc:	2301      	movs	r3, #1
 80007de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	2300      	movs	r3, #0
 80007e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	4619      	mov	r1, r3
 80007ee:	4804      	ldr	r0, [pc, #16]	@ (8000800 <MX_GPIO_Init+0xd4>)
 80007f0:	f000 feac 	bl	800154c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007f4:	bf00      	nop
 80007f6:	3728      	adds	r7, #40	@ 0x28
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40023800 	.word	0x40023800
 8000800:	40020000 	.word	0x40020000
 8000804:	40020800 	.word	0x40020800

08000808 <DMATransferComplete>:

/* USER CODE BEGIN 4 */
void DMATransferComplete(DMA_HandleTypeDef *hdma){
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	huart2.Instance->CR3 &= ~USART_CR3_DMAT;
 8000810:	4b07      	ldr	r3, [pc, #28]	@ (8000830 <DMATransferComplete+0x28>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	695a      	ldr	r2, [r3, #20]
 8000816:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <DMATransferComplete+0x28>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800081e:	615a      	str	r2, [r3, #20]
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000820:	2120      	movs	r1, #32
 8000822:	4804      	ldr	r0, [pc, #16]	@ (8000834 <DMATransferComplete+0x2c>)
 8000824:	f001 f83f 	bl	80018a6 <HAL_GPIO_TogglePin>
}
 8000828:	bf00      	nop
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000028 	.word	0x20000028
 8000834:	40020000 	.word	0x40020000

08000838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800083c:	b672      	cpsid	i
}
 800083e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000840:	bf00      	nop
 8000842:	e7fd      	b.n	8000840 <Error_Handler+0x8>

08000844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	4b10      	ldr	r3, [pc, #64]	@ (8000890 <HAL_MspInit+0x4c>)
 8000850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000852:	4a0f      	ldr	r2, [pc, #60]	@ (8000890 <HAL_MspInit+0x4c>)
 8000854:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000858:	6453      	str	r3, [r2, #68]	@ 0x44
 800085a:	4b0d      	ldr	r3, [pc, #52]	@ (8000890 <HAL_MspInit+0x4c>)
 800085c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800085e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	4b09      	ldr	r3, [pc, #36]	@ (8000890 <HAL_MspInit+0x4c>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800086e:	4a08      	ldr	r2, [pc, #32]	@ (8000890 <HAL_MspInit+0x4c>)
 8000870:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000874:	6413      	str	r3, [r2, #64]	@ 0x40
 8000876:	4b06      	ldr	r3, [pc, #24]	@ (8000890 <HAL_MspInit+0x4c>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000882:	2007      	movs	r0, #7
 8000884:	f000 fa5c 	bl	8000d40 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000888:	bf00      	nop
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40023800 	.word	0x40023800

08000894 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08a      	sub	sp, #40	@ 0x28
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a30      	ldr	r2, [pc, #192]	@ (8000974 <HAL_UART_MspInit+0xe0>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d159      	bne.n	800096a <HAL_UART_MspInit+0xd6>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	613b      	str	r3, [r7, #16]
 80008ba:	4b2f      	ldr	r3, [pc, #188]	@ (8000978 <HAL_UART_MspInit+0xe4>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008be:	4a2e      	ldr	r2, [pc, #184]	@ (8000978 <HAL_UART_MspInit+0xe4>)
 80008c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008c6:	4b2c      	ldr	r3, [pc, #176]	@ (8000978 <HAL_UART_MspInit+0xe4>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	4b28      	ldr	r3, [pc, #160]	@ (8000978 <HAL_UART_MspInit+0xe4>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	4a27      	ldr	r2, [pc, #156]	@ (8000978 <HAL_UART_MspInit+0xe4>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e2:	4b25      	ldr	r3, [pc, #148]	@ (8000978 <HAL_UART_MspInit+0xe4>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008ee:	230c      	movs	r3, #12
 80008f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f2:	2302      	movs	r3, #2
 80008f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fa:	2303      	movs	r3, #3
 80008fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008fe:	2307      	movs	r3, #7
 8000900:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	4619      	mov	r1, r3
 8000908:	481c      	ldr	r0, [pc, #112]	@ (800097c <HAL_UART_MspInit+0xe8>)
 800090a:	f000 fe1f 	bl	800154c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800090e:	4b1c      	ldr	r3, [pc, #112]	@ (8000980 <HAL_UART_MspInit+0xec>)
 8000910:	4a1c      	ldr	r2, [pc, #112]	@ (8000984 <HAL_UART_MspInit+0xf0>)
 8000912:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000914:	4b1a      	ldr	r3, [pc, #104]	@ (8000980 <HAL_UART_MspInit+0xec>)
 8000916:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800091a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800091c:	4b18      	ldr	r3, [pc, #96]	@ (8000980 <HAL_UART_MspInit+0xec>)
 800091e:	2240      	movs	r2, #64	@ 0x40
 8000920:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000922:	4b17      	ldr	r3, [pc, #92]	@ (8000980 <HAL_UART_MspInit+0xec>)
 8000924:	2200      	movs	r2, #0
 8000926:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000928:	4b15      	ldr	r3, [pc, #84]	@ (8000980 <HAL_UART_MspInit+0xec>)
 800092a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800092e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000930:	4b13      	ldr	r3, [pc, #76]	@ (8000980 <HAL_UART_MspInit+0xec>)
 8000932:	2200      	movs	r2, #0
 8000934:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000936:	4b12      	ldr	r3, [pc, #72]	@ (8000980 <HAL_UART_MspInit+0xec>)
 8000938:	2200      	movs	r2, #0
 800093a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800093c:	4b10      	ldr	r3, [pc, #64]	@ (8000980 <HAL_UART_MspInit+0xec>)
 800093e:	2200      	movs	r2, #0
 8000940:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000942:	4b0f      	ldr	r3, [pc, #60]	@ (8000980 <HAL_UART_MspInit+0xec>)
 8000944:	2200      	movs	r2, #0
 8000946:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000948:	4b0d      	ldr	r3, [pc, #52]	@ (8000980 <HAL_UART_MspInit+0xec>)
 800094a:	2200      	movs	r2, #0
 800094c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800094e:	480c      	ldr	r0, [pc, #48]	@ (8000980 <HAL_UART_MspInit+0xec>)
 8000950:	f000 fa38 	bl	8000dc4 <HAL_DMA_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800095a:	f7ff ff6d 	bl	8000838 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4a07      	ldr	r2, [pc, #28]	@ (8000980 <HAL_UART_MspInit+0xec>)
 8000962:	639a      	str	r2, [r3, #56]	@ 0x38
 8000964:	4a06      	ldr	r2, [pc, #24]	@ (8000980 <HAL_UART_MspInit+0xec>)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800096a:	bf00      	nop
 800096c:	3728      	adds	r7, #40	@ 0x28
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40004400 	.word	0x40004400
 8000978:	40023800 	.word	0x40023800
 800097c:	40020000 	.word	0x40020000
 8000980:	20000070 	.word	0x20000070
 8000984:	400260a0 	.word	0x400260a0

08000988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <NMI_Handler+0x4>

08000990 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <HardFault_Handler+0x4>

08000998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <MemManage_Handler+0x4>

080009a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <BusFault_Handler+0x4>

080009a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <UsageFault_Handler+0x4>

080009b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009de:	f000 f89b 	bl	8000b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80009ec:	4802      	ldr	r0, [pc, #8]	@ (80009f8 <DMA1_Stream6_IRQHandler+0x10>)
 80009ee:	f000 faef 	bl	8000fd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000070 	.word	0x20000070

080009fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a00:	4b06      	ldr	r3, [pc, #24]	@ (8000a1c <SystemInit+0x20>)
 8000a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a06:	4a05      	ldr	r2, [pc, #20]	@ (8000a1c <SystemInit+0x20>)
 8000a08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a58 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a24:	f7ff ffea 	bl	80009fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a28:	480c      	ldr	r0, [pc, #48]	@ (8000a5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a2a:	490d      	ldr	r1, [pc, #52]	@ (8000a60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a30:	e002      	b.n	8000a38 <LoopCopyDataInit>

08000a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a36:	3304      	adds	r3, #4

08000a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a3c:	d3f9      	bcc.n	8000a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a40:	4c0a      	ldr	r4, [pc, #40]	@ (8000a6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a44:	e001      	b.n	8000a4a <LoopFillZerobss>

08000a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a48:	3204      	adds	r2, #4

08000a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a4c:	d3fb      	bcc.n	8000a46 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000a4e:	f001 fff9 	bl	8002a44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a52:	f7ff fd75 	bl	8000540 <main>
  bx  lr    
 8000a56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a60:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a64:	08002b54 	.word	0x08002b54
  ldr r2, =_sbss
 8000a68:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a6c:	200000d4 	.word	0x200000d4

08000a70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a70:	e7fe      	b.n	8000a70 <ADC_IRQHandler>
	...

08000a74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a78:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab4 <HAL_Init+0x40>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ab4 <HAL_Init+0x40>)
 8000a7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a84:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab4 <HAL_Init+0x40>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab4 <HAL_Init+0x40>)
 8000a8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a90:	4b08      	ldr	r3, [pc, #32]	@ (8000ab4 <HAL_Init+0x40>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a07      	ldr	r2, [pc, #28]	@ (8000ab4 <HAL_Init+0x40>)
 8000a96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a9c:	2003      	movs	r0, #3
 8000a9e:	f000 f94f 	bl	8000d40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	f000 f808 	bl	8000ab8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa8:	f7ff fecc 	bl	8000844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aac:	2300      	movs	r3, #0
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40023c00 	.word	0x40023c00

08000ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ac0:	4b12      	ldr	r3, [pc, #72]	@ (8000b0c <HAL_InitTick+0x54>)
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	4b12      	ldr	r3, [pc, #72]	@ (8000b10 <HAL_InitTick+0x58>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 f967 	bl	8000daa <HAL_SYSTICK_Config>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e00e      	b.n	8000b04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2b0f      	cmp	r3, #15
 8000aea:	d80a      	bhi.n	8000b02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aec:	2200      	movs	r2, #0
 8000aee:	6879      	ldr	r1, [r7, #4]
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	f000 f92f 	bl	8000d56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af8:	4a06      	ldr	r2, [pc, #24]	@ (8000b14 <HAL_InitTick+0x5c>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000afe:	2300      	movs	r3, #0
 8000b00:	e000      	b.n	8000b04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000000 	.word	0x20000000
 8000b10:	20000008 	.word	0x20000008
 8000b14:	20000004 	.word	0x20000004

08000b18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	@ (8000b38 <HAL_IncTick+0x20>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	461a      	mov	r2, r3
 8000b22:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <HAL_IncTick+0x24>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4413      	add	r3, r2
 8000b28:	4a04      	ldr	r2, [pc, #16]	@ (8000b3c <HAL_IncTick+0x24>)
 8000b2a:	6013      	str	r3, [r2, #0]
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	20000008 	.word	0x20000008
 8000b3c:	200000d0 	.word	0x200000d0

08000b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  return uwTick;
 8000b44:	4b03      	ldr	r3, [pc, #12]	@ (8000b54 <HAL_GetTick+0x14>)
 8000b46:	681b      	ldr	r3, [r3, #0]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	200000d0 	.word	0x200000d0

08000b58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b60:	f7ff ffee 	bl	8000b40 <HAL_GetTick>
 8000b64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b70:	d005      	beq.n	8000b7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b72:	4b0a      	ldr	r3, [pc, #40]	@ (8000b9c <HAL_Delay+0x44>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	461a      	mov	r2, r3
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b7e:	bf00      	nop
 8000b80:	f7ff ffde 	bl	8000b40 <HAL_GetTick>
 8000b84:	4602      	mov	r2, r0
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	68fa      	ldr	r2, [r7, #12]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d8f7      	bhi.n	8000b80 <HAL_Delay+0x28>
  {
  }
}
 8000b90:	bf00      	nop
 8000b92:	bf00      	nop
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000008 	.word	0x20000008

08000ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f003 0307 	and.w	r3, r3, #7
 8000bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000be4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bd2:	4a04      	ldr	r2, [pc, #16]	@ (8000be4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	60d3      	str	r3, [r2, #12]
}
 8000bd8:	bf00      	nop
 8000bda:	3714      	adds	r7, #20
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bec:	4b04      	ldr	r3, [pc, #16]	@ (8000c00 <__NVIC_GetPriorityGrouping+0x18>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	0a1b      	lsrs	r3, r3, #8
 8000bf2:	f003 0307 	and.w	r3, r3, #7
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	db0b      	blt.n	8000c2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	f003 021f 	and.w	r2, r3, #31
 8000c1c:	4907      	ldr	r1, [pc, #28]	@ (8000c3c <__NVIC_EnableIRQ+0x38>)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	095b      	lsrs	r3, r3, #5
 8000c24:	2001      	movs	r0, #1
 8000c26:	fa00 f202 	lsl.w	r2, r0, r2
 8000c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	e000e100 	.word	0xe000e100

08000c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	6039      	str	r1, [r7, #0]
 8000c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db0a      	blt.n	8000c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	b2da      	uxtb	r2, r3
 8000c58:	490c      	ldr	r1, [pc, #48]	@ (8000c8c <__NVIC_SetPriority+0x4c>)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	0112      	lsls	r2, r2, #4
 8000c60:	b2d2      	uxtb	r2, r2
 8000c62:	440b      	add	r3, r1
 8000c64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c68:	e00a      	b.n	8000c80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	4908      	ldr	r1, [pc, #32]	@ (8000c90 <__NVIC_SetPriority+0x50>)
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	f003 030f 	and.w	r3, r3, #15
 8000c76:	3b04      	subs	r3, #4
 8000c78:	0112      	lsls	r2, r2, #4
 8000c7a:	b2d2      	uxtb	r2, r2
 8000c7c:	440b      	add	r3, r1
 8000c7e:	761a      	strb	r2, [r3, #24]
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	e000e100 	.word	0xe000e100
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b089      	sub	sp, #36	@ 0x24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	f1c3 0307 	rsb	r3, r3, #7
 8000cae:	2b04      	cmp	r3, #4
 8000cb0:	bf28      	it	cs
 8000cb2:	2304      	movcs	r3, #4
 8000cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	3304      	adds	r3, #4
 8000cba:	2b06      	cmp	r3, #6
 8000cbc:	d902      	bls.n	8000cc4 <NVIC_EncodePriority+0x30>
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	3b03      	subs	r3, #3
 8000cc2:	e000      	b.n	8000cc6 <NVIC_EncodePriority+0x32>
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	43da      	mvns	r2, r3
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	401a      	ands	r2, r3
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce6:	43d9      	mvns	r1, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cec:	4313      	orrs	r3, r2
         );
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3724      	adds	r7, #36	@ 0x24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
	...

08000cfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3b01      	subs	r3, #1
 8000d08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d0c:	d301      	bcc.n	8000d12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e00f      	b.n	8000d32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d12:	4a0a      	ldr	r2, [pc, #40]	@ (8000d3c <SysTick_Config+0x40>)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d1a:	210f      	movs	r1, #15
 8000d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d20:	f7ff ff8e 	bl	8000c40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d24:	4b05      	ldr	r3, [pc, #20]	@ (8000d3c <SysTick_Config+0x40>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d2a:	4b04      	ldr	r3, [pc, #16]	@ (8000d3c <SysTick_Config+0x40>)
 8000d2c:	2207      	movs	r2, #7
 8000d2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	e000e010 	.word	0xe000e010

08000d40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f7ff ff29 	bl	8000ba0 <__NVIC_SetPriorityGrouping>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b086      	sub	sp, #24
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	60b9      	str	r1, [r7, #8]
 8000d60:	607a      	str	r2, [r7, #4]
 8000d62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d68:	f7ff ff3e 	bl	8000be8 <__NVIC_GetPriorityGrouping>
 8000d6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	68b9      	ldr	r1, [r7, #8]
 8000d72:	6978      	ldr	r0, [r7, #20]
 8000d74:	f7ff ff8e 	bl	8000c94 <NVIC_EncodePriority>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d7e:	4611      	mov	r1, r2
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff ff5d 	bl	8000c40 <__NVIC_SetPriority>
}
 8000d86:	bf00      	nop
 8000d88:	3718      	adds	r7, #24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	4603      	mov	r3, r0
 8000d96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ff31 	bl	8000c04 <__NVIC_EnableIRQ>
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff ffa2 	bl	8000cfc <SysTick_Config>
 8000db8:	4603      	mov	r3, r0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
	...

08000dc4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000dd0:	f7ff feb6 	bl	8000b40 <HAL_GetTick>
 8000dd4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d101      	bne.n	8000de0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	e099      	b.n	8000f14 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2202      	movs	r2, #2
 8000de4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2200      	movs	r2, #0
 8000dec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f022 0201 	bic.w	r2, r2, #1
 8000dfe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e00:	e00f      	b.n	8000e22 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e02:	f7ff fe9d 	bl	8000b40 <HAL_GetTick>
 8000e06:	4602      	mov	r2, r0
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	2b05      	cmp	r3, #5
 8000e0e:	d908      	bls.n	8000e22 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2220      	movs	r2, #32
 8000e14:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2203      	movs	r2, #3
 8000e1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	e078      	b.n	8000f14 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f003 0301 	and.w	r3, r3, #1
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d1e8      	bne.n	8000e02 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000e38:	697a      	ldr	r2, [r7, #20]
 8000e3a:	4b38      	ldr	r3, [pc, #224]	@ (8000f1c <HAL_DMA_Init+0x158>)
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	685a      	ldr	r2, [r3, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	691b      	ldr	r3, [r3, #16]
 8000e54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6a1b      	ldr	r3, [r3, #32]
 8000e6c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e6e:	697a      	ldr	r2, [r7, #20]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e78:	2b04      	cmp	r3, #4
 8000e7a:	d107      	bne.n	8000e8c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e84:	4313      	orrs	r3, r2
 8000e86:	697a      	ldr	r2, [r7, #20]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	697a      	ldr	r2, [r7, #20]
 8000e92:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	695b      	ldr	r3, [r3, #20]
 8000e9a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	f023 0307 	bic.w	r3, r3, #7
 8000ea2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ea8:	697a      	ldr	r2, [r7, #20]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eb2:	2b04      	cmp	r3, #4
 8000eb4:	d117      	bne.n	8000ee6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000eba:	697a      	ldr	r2, [r7, #20]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d00e      	beq.n	8000ee6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f000 fac3 	bl	8001454 <DMA_CheckFifoParam>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d008      	beq.n	8000ee6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2240      	movs	r2, #64	@ 0x40
 8000ed8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2201      	movs	r2, #1
 8000ede:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e016      	b.n	8000f14 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	697a      	ldr	r2, [r7, #20]
 8000eec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f000 fa7a 	bl	80013e8 <DMA_CalcBaseAndBitshift>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000efc:	223f      	movs	r2, #63	@ 0x3f
 8000efe:	409a      	lsls	r2, r3
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8000f12:	2300      	movs	r3, #0
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3718      	adds	r7, #24
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	f010803f 	.word	0xf010803f

08000f20 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
 8000f2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f36:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d101      	bne.n	8000f46 <HAL_DMA_Start_IT+0x26>
 8000f42:	2302      	movs	r3, #2
 8000f44:	e040      	b.n	8000fc8 <HAL_DMA_Start_IT+0xa8>
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	2201      	movs	r2, #1
 8000f4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d12f      	bne.n	8000fba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	2202      	movs	r2, #2
 8000f5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	2200      	movs	r2, #0
 8000f66:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	68b9      	ldr	r1, [r7, #8]
 8000f6e:	68f8      	ldr	r0, [r7, #12]
 8000f70:	f000 fa0c 	bl	800138c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f78:	223f      	movs	r2, #63	@ 0x3f
 8000f7a:	409a      	lsls	r2, r3
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f042 0216 	orr.w	r2, r2, #22
 8000f8e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d007      	beq.n	8000fa8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f042 0208 	orr.w	r2, r2, #8
 8000fa6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f042 0201 	orr.w	r2, r2, #1
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	e005      	b.n	8000fc6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000fc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3718      	adds	r7, #24
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000fdc:	4b8e      	ldr	r3, [pc, #568]	@ (8001218 <HAL_DMA_IRQHandler+0x248>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a8e      	ldr	r2, [pc, #568]	@ (800121c <HAL_DMA_IRQHandler+0x24c>)
 8000fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe6:	0a9b      	lsrs	r3, r3, #10
 8000fe8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ffa:	2208      	movs	r2, #8
 8000ffc:	409a      	lsls	r2, r3
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	4013      	ands	r3, r2
 8001002:	2b00      	cmp	r3, #0
 8001004:	d01a      	beq.n	800103c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 0304 	and.w	r3, r3, #4
 8001010:	2b00      	cmp	r3, #0
 8001012:	d013      	beq.n	800103c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f022 0204 	bic.w	r2, r2, #4
 8001022:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001028:	2208      	movs	r2, #8
 800102a:	409a      	lsls	r2, r3
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001034:	f043 0201 	orr.w	r2, r3, #1
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001040:	2201      	movs	r2, #1
 8001042:	409a      	lsls	r2, r3
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	4013      	ands	r3, r2
 8001048:	2b00      	cmp	r3, #0
 800104a:	d012      	beq.n	8001072 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001056:	2b00      	cmp	r3, #0
 8001058:	d00b      	beq.n	8001072 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800105e:	2201      	movs	r2, #1
 8001060:	409a      	lsls	r2, r3
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800106a:	f043 0202 	orr.w	r2, r3, #2
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001076:	2204      	movs	r2, #4
 8001078:	409a      	lsls	r2, r3
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	4013      	ands	r3, r2
 800107e:	2b00      	cmp	r3, #0
 8001080:	d012      	beq.n	80010a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 0302 	and.w	r3, r3, #2
 800108c:	2b00      	cmp	r3, #0
 800108e:	d00b      	beq.n	80010a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001094:	2204      	movs	r2, #4
 8001096:	409a      	lsls	r2, r3
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010a0:	f043 0204 	orr.w	r2, r3, #4
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010ac:	2210      	movs	r2, #16
 80010ae:	409a      	lsls	r2, r3
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4013      	ands	r3, r2
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d043      	beq.n	8001140 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 0308 	and.w	r3, r3, #8
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d03c      	beq.n	8001140 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010ca:	2210      	movs	r2, #16
 80010cc:	409a      	lsls	r2, r3
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d018      	beq.n	8001112 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d108      	bne.n	8001100 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d024      	beq.n	8001140 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	4798      	blx	r3
 80010fe:	e01f      	b.n	8001140 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001104:	2b00      	cmp	r3, #0
 8001106:	d01b      	beq.n	8001140 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	4798      	blx	r3
 8001110:	e016      	b.n	8001140 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800111c:	2b00      	cmp	r3, #0
 800111e:	d107      	bne.n	8001130 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f022 0208 	bic.w	r2, r2, #8
 800112e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001134:	2b00      	cmp	r3, #0
 8001136:	d003      	beq.n	8001140 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001144:	2220      	movs	r2, #32
 8001146:	409a      	lsls	r2, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4013      	ands	r3, r2
 800114c:	2b00      	cmp	r3, #0
 800114e:	f000 808f 	beq.w	8001270 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0310 	and.w	r3, r3, #16
 800115c:	2b00      	cmp	r3, #0
 800115e:	f000 8087 	beq.w	8001270 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001166:	2220      	movs	r2, #32
 8001168:	409a      	lsls	r2, r3
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001174:	b2db      	uxtb	r3, r3
 8001176:	2b05      	cmp	r3, #5
 8001178:	d136      	bne.n	80011e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f022 0216 	bic.w	r2, r2, #22
 8001188:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	695a      	ldr	r2, [r3, #20]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001198:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d103      	bne.n	80011aa <HAL_DMA_IRQHandler+0x1da>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d007      	beq.n	80011ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f022 0208 	bic.w	r2, r2, #8
 80011b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011be:	223f      	movs	r2, #63	@ 0x3f
 80011c0:	409a      	lsls	r2, r3
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2201      	movs	r2, #1
 80011ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d07e      	beq.n	80012dc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	4798      	blx	r3
        }
        return;
 80011e6:	e079      	b.n	80012dc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d01d      	beq.n	8001232 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d10d      	bne.n	8001220 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001208:	2b00      	cmp	r3, #0
 800120a:	d031      	beq.n	8001270 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	4798      	blx	r3
 8001214:	e02c      	b.n	8001270 <HAL_DMA_IRQHandler+0x2a0>
 8001216:	bf00      	nop
 8001218:	20000000 	.word	0x20000000
 800121c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001224:	2b00      	cmp	r3, #0
 8001226:	d023      	beq.n	8001270 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	4798      	blx	r3
 8001230:	e01e      	b.n	8001270 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800123c:	2b00      	cmp	r3, #0
 800123e:	d10f      	bne.n	8001260 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f022 0210 	bic.w	r2, r2, #16
 800124e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2201      	movs	r2, #1
 8001254:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001264:	2b00      	cmp	r3, #0
 8001266:	d003      	beq.n	8001270 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001274:	2b00      	cmp	r3, #0
 8001276:	d032      	beq.n	80012de <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	2b00      	cmp	r3, #0
 8001282:	d022      	beq.n	80012ca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2205      	movs	r2, #5
 8001288:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f022 0201 	bic.w	r2, r2, #1
 800129a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	3301      	adds	r3, #1
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	697a      	ldr	r2, [r7, #20]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d307      	bcc.n	80012b8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1f2      	bne.n	800129c <HAL_DMA_IRQHandler+0x2cc>
 80012b6:	e000      	b.n	80012ba <HAL_DMA_IRQHandler+0x2ea>
          break;
 80012b8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2201      	movs	r2, #1
 80012be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d005      	beq.n	80012de <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	4798      	blx	r3
 80012da:	e000      	b.n	80012de <HAL_DMA_IRQHandler+0x30e>
        return;
 80012dc:	bf00      	nop
    }
  }
}
 80012de:	3718      	adds	r7, #24
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callback function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 80012e4:	b480      	push	{r7}
 80012e6:	b087      	sub	sp, #28
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	460b      	mov	r3, r1
 80012ee:	607a      	str	r2, [r7, #4]
 80012f0:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 80012f2:	2300      	movs	r3, #0
 80012f4:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d101      	bne.n	8001304 <HAL_DMA_RegisterCallback+0x20>
 8001300:	2302      	movs	r3, #2
 8001302:	e03d      	b.n	8001380 <HAL_DMA_RegisterCallback+0x9c>
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	2201      	movs	r2, #1
 8001308:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001312:	b2db      	uxtb	r3, r3
 8001314:	2b01      	cmp	r3, #1
 8001316:	d12c      	bne.n	8001372 <HAL_DMA_RegisterCallback+0x8e>
  {
    switch (CallbackID)
 8001318:	7afb      	ldrb	r3, [r7, #11]
 800131a:	2b05      	cmp	r3, #5
 800131c:	d826      	bhi.n	800136c <HAL_DMA_RegisterCallback+0x88>
 800131e:	a201      	add	r2, pc, #4	@ (adr r2, 8001324 <HAL_DMA_RegisterCallback+0x40>)
 8001320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001324:	0800133d 	.word	0x0800133d
 8001328:	08001345 	.word	0x08001345
 800132c:	0800134d 	.word	0x0800134d
 8001330:	08001355 	.word	0x08001355
 8001334:	0800135d 	.word	0x0800135d
 8001338:	08001365 	.word	0x08001365
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 8001342:	e018      	b.n	8001376 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800134a:	e014      	b.n	8001376 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	645a      	str	r2, [r3, #68]	@ 0x44
      break;
 8001352:	e010      	b.n	8001376 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	649a      	str	r2, [r3, #72]	@ 0x48
      break;
 800135a:	e00c      	b.n	8001376 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	64da      	str	r2, [r3, #76]	@ 0x4c
      break;
 8001362:	e008      	b.n	8001376 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800136a:	e004      	b.n	8001376 <HAL_DMA_RegisterCallback+0x92>

    default:
      /* Return error status */
      status =  HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	75fb      	strb	r3, [r7, #23]
      break;
 8001370:	e001      	b.n	8001376 <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2200      	movs	r2, #0
 800137a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  return status;
 800137e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001380:	4618      	mov	r0, r3
 8001382:	371c      	adds	r7, #28
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
 8001398:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80013a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	683a      	ldr	r2, [r7, #0]
 80013b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	2b40      	cmp	r3, #64	@ 0x40
 80013b8:	d108      	bne.n	80013cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	68ba      	ldr	r2, [r7, #8]
 80013c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80013ca:	e007      	b.n	80013dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	68ba      	ldr	r2, [r7, #8]
 80013d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	60da      	str	r2, [r3, #12]
}
 80013dc:	bf00      	nop
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	3b10      	subs	r3, #16
 80013f8:	4a14      	ldr	r2, [pc, #80]	@ (800144c <DMA_CalcBaseAndBitshift+0x64>)
 80013fa:	fba2 2303 	umull	r2, r3, r2, r3
 80013fe:	091b      	lsrs	r3, r3, #4
 8001400:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001402:	4a13      	ldr	r2, [pc, #76]	@ (8001450 <DMA_CalcBaseAndBitshift+0x68>)
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	4413      	add	r3, r2
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	461a      	mov	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2b03      	cmp	r3, #3
 8001414:	d909      	bls.n	800142a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800141e:	f023 0303 	bic.w	r3, r3, #3
 8001422:	1d1a      	adds	r2, r3, #4
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	659a      	str	r2, [r3, #88]	@ 0x58
 8001428:	e007      	b.n	800143a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001432:	f023 0303 	bic.w	r3, r3, #3
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800143e:	4618      	mov	r0, r3
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	aaaaaaab 	.word	0xaaaaaaab
 8001450:	08002b3c 	.word	0x08002b3c

08001454 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800145c:	2300      	movs	r3, #0
 800145e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001464:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d11f      	bne.n	80014ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	2b03      	cmp	r3, #3
 8001472:	d856      	bhi.n	8001522 <DMA_CheckFifoParam+0xce>
 8001474:	a201      	add	r2, pc, #4	@ (adr r2, 800147c <DMA_CheckFifoParam+0x28>)
 8001476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800147a:	bf00      	nop
 800147c:	0800148d 	.word	0x0800148d
 8001480:	0800149f 	.word	0x0800149f
 8001484:	0800148d 	.word	0x0800148d
 8001488:	08001523 	.word	0x08001523
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001490:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d046      	beq.n	8001526 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800149c:	e043      	b.n	8001526 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014a2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80014a6:	d140      	bne.n	800152a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014ac:	e03d      	b.n	800152a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80014b6:	d121      	bne.n	80014fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	2b03      	cmp	r3, #3
 80014bc:	d837      	bhi.n	800152e <DMA_CheckFifoParam+0xda>
 80014be:	a201      	add	r2, pc, #4	@ (adr r2, 80014c4 <DMA_CheckFifoParam+0x70>)
 80014c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c4:	080014d5 	.word	0x080014d5
 80014c8:	080014db 	.word	0x080014db
 80014cc:	080014d5 	.word	0x080014d5
 80014d0:	080014ed 	.word	0x080014ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	73fb      	strb	r3, [r7, #15]
      break;
 80014d8:	e030      	b.n	800153c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d025      	beq.n	8001532 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014ea:	e022      	b.n	8001532 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014f0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80014f4:	d11f      	bne.n	8001536 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80014fa:	e01c      	b.n	8001536 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d903      	bls.n	800150a <DMA_CheckFifoParam+0xb6>
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	2b03      	cmp	r3, #3
 8001506:	d003      	beq.n	8001510 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001508:	e018      	b.n	800153c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	73fb      	strb	r3, [r7, #15]
      break;
 800150e:	e015      	b.n	800153c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001514:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d00e      	beq.n	800153a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	73fb      	strb	r3, [r7, #15]
      break;
 8001520:	e00b      	b.n	800153a <DMA_CheckFifoParam+0xe6>
      break;
 8001522:	bf00      	nop
 8001524:	e00a      	b.n	800153c <DMA_CheckFifoParam+0xe8>
      break;
 8001526:	bf00      	nop
 8001528:	e008      	b.n	800153c <DMA_CheckFifoParam+0xe8>
      break;
 800152a:	bf00      	nop
 800152c:	e006      	b.n	800153c <DMA_CheckFifoParam+0xe8>
      break;
 800152e:	bf00      	nop
 8001530:	e004      	b.n	800153c <DMA_CheckFifoParam+0xe8>
      break;
 8001532:	bf00      	nop
 8001534:	e002      	b.n	800153c <DMA_CheckFifoParam+0xe8>
      break;   
 8001536:	bf00      	nop
 8001538:	e000      	b.n	800153c <DMA_CheckFifoParam+0xe8>
      break;
 800153a:	bf00      	nop
    }
  } 
  
  return status; 
 800153c:	7bfb      	ldrb	r3, [r7, #15]
}
 800153e:	4618      	mov	r0, r3
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop

0800154c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800154c:	b480      	push	{r7}
 800154e:	b089      	sub	sp, #36	@ 0x24
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800155e:	2300      	movs	r3, #0
 8001560:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001562:	2300      	movs	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]
 8001566:	e165      	b.n	8001834 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001568:	2201      	movs	r2, #1
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	697a      	ldr	r2, [r7, #20]
 8001578:	4013      	ands	r3, r2
 800157a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	429a      	cmp	r2, r3
 8001582:	f040 8154 	bne.w	800182e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f003 0303 	and.w	r3, r3, #3
 800158e:	2b01      	cmp	r3, #1
 8001590:	d005      	beq.n	800159e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800159a:	2b02      	cmp	r3, #2
 800159c:	d130      	bne.n	8001600 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	2203      	movs	r2, #3
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	43db      	mvns	r3, r3
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4013      	ands	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	68da      	ldr	r2, [r3, #12]
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015d4:	2201      	movs	r2, #1
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4013      	ands	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	091b      	lsrs	r3, r3, #4
 80015ea:	f003 0201 	and.w	r2, r3, #1
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 0303 	and.w	r3, r3, #3
 8001608:	2b03      	cmp	r3, #3
 800160a:	d017      	beq.n	800163c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	2203      	movs	r2, #3
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4013      	ands	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	689a      	ldr	r2, [r3, #8]
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	4313      	orrs	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f003 0303 	and.w	r3, r3, #3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d123      	bne.n	8001690 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	08da      	lsrs	r2, r3, #3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3208      	adds	r2, #8
 8001650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001654:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	f003 0307 	and.w	r3, r3, #7
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	220f      	movs	r2, #15
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	691a      	ldr	r2, [r3, #16]
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4313      	orrs	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	08da      	lsrs	r2, r3, #3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	3208      	adds	r2, #8
 800168a:	69b9      	ldr	r1, [r7, #24]
 800168c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	2203      	movs	r2, #3
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4013      	ands	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 0203 	and.w	r2, r3, #3
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f000 80ae 	beq.w	800182e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	4b5d      	ldr	r3, [pc, #372]	@ (800184c <HAL_GPIO_Init+0x300>)
 80016d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016da:	4a5c      	ldr	r2, [pc, #368]	@ (800184c <HAL_GPIO_Init+0x300>)
 80016dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80016e2:	4b5a      	ldr	r3, [pc, #360]	@ (800184c <HAL_GPIO_Init+0x300>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016ee:	4a58      	ldr	r2, [pc, #352]	@ (8001850 <HAL_GPIO_Init+0x304>)
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	089b      	lsrs	r3, r3, #2
 80016f4:	3302      	adds	r3, #2
 80016f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	f003 0303 	and.w	r3, r3, #3
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	220f      	movs	r2, #15
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43db      	mvns	r3, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4013      	ands	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a4f      	ldr	r2, [pc, #316]	@ (8001854 <HAL_GPIO_Init+0x308>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d025      	beq.n	8001766 <HAL_GPIO_Init+0x21a>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a4e      	ldr	r2, [pc, #312]	@ (8001858 <HAL_GPIO_Init+0x30c>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d01f      	beq.n	8001762 <HAL_GPIO_Init+0x216>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a4d      	ldr	r2, [pc, #308]	@ (800185c <HAL_GPIO_Init+0x310>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d019      	beq.n	800175e <HAL_GPIO_Init+0x212>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a4c      	ldr	r2, [pc, #304]	@ (8001860 <HAL_GPIO_Init+0x314>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d013      	beq.n	800175a <HAL_GPIO_Init+0x20e>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a4b      	ldr	r2, [pc, #300]	@ (8001864 <HAL_GPIO_Init+0x318>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d00d      	beq.n	8001756 <HAL_GPIO_Init+0x20a>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a4a      	ldr	r2, [pc, #296]	@ (8001868 <HAL_GPIO_Init+0x31c>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d007      	beq.n	8001752 <HAL_GPIO_Init+0x206>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a49      	ldr	r2, [pc, #292]	@ (800186c <HAL_GPIO_Init+0x320>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d101      	bne.n	800174e <HAL_GPIO_Init+0x202>
 800174a:	2306      	movs	r3, #6
 800174c:	e00c      	b.n	8001768 <HAL_GPIO_Init+0x21c>
 800174e:	2307      	movs	r3, #7
 8001750:	e00a      	b.n	8001768 <HAL_GPIO_Init+0x21c>
 8001752:	2305      	movs	r3, #5
 8001754:	e008      	b.n	8001768 <HAL_GPIO_Init+0x21c>
 8001756:	2304      	movs	r3, #4
 8001758:	e006      	b.n	8001768 <HAL_GPIO_Init+0x21c>
 800175a:	2303      	movs	r3, #3
 800175c:	e004      	b.n	8001768 <HAL_GPIO_Init+0x21c>
 800175e:	2302      	movs	r3, #2
 8001760:	e002      	b.n	8001768 <HAL_GPIO_Init+0x21c>
 8001762:	2301      	movs	r3, #1
 8001764:	e000      	b.n	8001768 <HAL_GPIO_Init+0x21c>
 8001766:	2300      	movs	r3, #0
 8001768:	69fa      	ldr	r2, [r7, #28]
 800176a:	f002 0203 	and.w	r2, r2, #3
 800176e:	0092      	lsls	r2, r2, #2
 8001770:	4093      	lsls	r3, r2
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4313      	orrs	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001778:	4935      	ldr	r1, [pc, #212]	@ (8001850 <HAL_GPIO_Init+0x304>)
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	089b      	lsrs	r3, r3, #2
 800177e:	3302      	adds	r3, #2
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001786:	4b3a      	ldr	r3, [pc, #232]	@ (8001870 <HAL_GPIO_Init+0x324>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	43db      	mvns	r3, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4013      	ands	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017aa:	4a31      	ldr	r2, [pc, #196]	@ (8001870 <HAL_GPIO_Init+0x324>)
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017b0:	4b2f      	ldr	r3, [pc, #188]	@ (8001870 <HAL_GPIO_Init+0x324>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	43db      	mvns	r3, r3
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4013      	ands	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d003      	beq.n	80017d4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017d4:	4a26      	ldr	r2, [pc, #152]	@ (8001870 <HAL_GPIO_Init+0x324>)
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017da:	4b25      	ldr	r3, [pc, #148]	@ (8001870 <HAL_GPIO_Init+0x324>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	43db      	mvns	r3, r3
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4013      	ands	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d003      	beq.n	80017fe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001870 <HAL_GPIO_Init+0x324>)
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001804:	4b1a      	ldr	r3, [pc, #104]	@ (8001870 <HAL_GPIO_Init+0x324>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	43db      	mvns	r3, r3
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4013      	ands	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d003      	beq.n	8001828 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	4313      	orrs	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001828:	4a11      	ldr	r2, [pc, #68]	@ (8001870 <HAL_GPIO_Init+0x324>)
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	3301      	adds	r3, #1
 8001832:	61fb      	str	r3, [r7, #28]
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	2b0f      	cmp	r3, #15
 8001838:	f67f ae96 	bls.w	8001568 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800183c:	bf00      	nop
 800183e:	bf00      	nop
 8001840:	3724      	adds	r7, #36	@ 0x24
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	40023800 	.word	0x40023800
 8001850:	40013800 	.word	0x40013800
 8001854:	40020000 	.word	0x40020000
 8001858:	40020400 	.word	0x40020400
 800185c:	40020800 	.word	0x40020800
 8001860:	40020c00 	.word	0x40020c00
 8001864:	40021000 	.word	0x40021000
 8001868:	40021400 	.word	0x40021400
 800186c:	40021800 	.word	0x40021800
 8001870:	40013c00 	.word	0x40013c00

08001874 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	460b      	mov	r3, r1
 800187e:	807b      	strh	r3, [r7, #2]
 8001880:	4613      	mov	r3, r2
 8001882:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001884:	787b      	ldrb	r3, [r7, #1]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800188a:	887a      	ldrh	r2, [r7, #2]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001890:	e003      	b.n	800189a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001892:	887b      	ldrh	r3, [r7, #2]
 8001894:	041a      	lsls	r2, r3, #16
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	619a      	str	r2, [r3, #24]
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b085      	sub	sp, #20
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
 80018ae:	460b      	mov	r3, r1
 80018b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018b8:	887a      	ldrh	r2, [r7, #2]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	4013      	ands	r3, r2
 80018be:	041a      	lsls	r2, r3, #16
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	43d9      	mvns	r1, r3
 80018c4:	887b      	ldrh	r3, [r7, #2]
 80018c6:	400b      	ands	r3, r1
 80018c8:	431a      	orrs	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	619a      	str	r2, [r3, #24]
}
 80018ce:	bf00      	nop
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
	...

080018dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d101      	bne.n	80018f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e0cc      	b.n	8001a8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018f0:	4b68      	ldr	r3, [pc, #416]	@ (8001a94 <HAL_RCC_ClockConfig+0x1b8>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 030f 	and.w	r3, r3, #15
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d90c      	bls.n	8001918 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018fe:	4b65      	ldr	r3, [pc, #404]	@ (8001a94 <HAL_RCC_ClockConfig+0x1b8>)
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	b2d2      	uxtb	r2, r2
 8001904:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001906:	4b63      	ldr	r3, [pc, #396]	@ (8001a94 <HAL_RCC_ClockConfig+0x1b8>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	683a      	ldr	r2, [r7, #0]
 8001910:	429a      	cmp	r2, r3
 8001912:	d001      	beq.n	8001918 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e0b8      	b.n	8001a8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d020      	beq.n	8001966 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	2b00      	cmp	r3, #0
 800192e:	d005      	beq.n	800193c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001930:	4b59      	ldr	r3, [pc, #356]	@ (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	4a58      	ldr	r2, [pc, #352]	@ (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 8001936:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800193a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0308 	and.w	r3, r3, #8
 8001944:	2b00      	cmp	r3, #0
 8001946:	d005      	beq.n	8001954 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001948:	4b53      	ldr	r3, [pc, #332]	@ (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	4a52      	ldr	r2, [pc, #328]	@ (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 800194e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001952:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001954:	4b50      	ldr	r3, [pc, #320]	@ (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	494d      	ldr	r1, [pc, #308]	@ (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 8001962:	4313      	orrs	r3, r2
 8001964:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	2b00      	cmp	r3, #0
 8001970:	d044      	beq.n	80019fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d107      	bne.n	800198a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800197a:	4b47      	ldr	r3, [pc, #284]	@ (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d119      	bne.n	80019ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e07f      	b.n	8001a8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b02      	cmp	r3, #2
 8001990:	d003      	beq.n	800199a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001996:	2b03      	cmp	r3, #3
 8001998:	d107      	bne.n	80019aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800199a:	4b3f      	ldr	r3, [pc, #252]	@ (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d109      	bne.n	80019ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e06f      	b.n	8001a8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e067      	b.n	8001a8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019ba:	4b37      	ldr	r3, [pc, #220]	@ (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f023 0203 	bic.w	r2, r3, #3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	4934      	ldr	r1, [pc, #208]	@ (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 80019c8:	4313      	orrs	r3, r2
 80019ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019cc:	f7ff f8b8 	bl	8000b40 <HAL_GetTick>
 80019d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019d2:	e00a      	b.n	80019ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019d4:	f7ff f8b4 	bl	8000b40 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e04f      	b.n	8001a8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 020c 	and.w	r2, r3, #12
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d1eb      	bne.n	80019d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019fc:	4b25      	ldr	r3, [pc, #148]	@ (8001a94 <HAL_RCC_ClockConfig+0x1b8>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 030f 	and.w	r3, r3, #15
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d20c      	bcs.n	8001a24 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a0a:	4b22      	ldr	r3, [pc, #136]	@ (8001a94 <HAL_RCC_ClockConfig+0x1b8>)
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	b2d2      	uxtb	r2, r2
 8001a10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a12:	4b20      	ldr	r3, [pc, #128]	@ (8001a94 <HAL_RCC_ClockConfig+0x1b8>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 030f 	and.w	r3, r3, #15
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d001      	beq.n	8001a24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e032      	b.n	8001a8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0304 	and.w	r3, r3, #4
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d008      	beq.n	8001a42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a30:	4b19      	ldr	r3, [pc, #100]	@ (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	4916      	ldr	r1, [pc, #88]	@ (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0308 	and.w	r3, r3, #8
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d009      	beq.n	8001a62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a4e:	4b12      	ldr	r3, [pc, #72]	@ (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	490e      	ldr	r1, [pc, #56]	@ (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a62:	f000 f855 	bl	8001b10 <HAL_RCC_GetSysClockFreq>
 8001a66:	4602      	mov	r2, r0
 8001a68:	4b0b      	ldr	r3, [pc, #44]	@ (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	091b      	lsrs	r3, r3, #4
 8001a6e:	f003 030f 	and.w	r3, r3, #15
 8001a72:	490a      	ldr	r1, [pc, #40]	@ (8001a9c <HAL_RCC_ClockConfig+0x1c0>)
 8001a74:	5ccb      	ldrb	r3, [r1, r3]
 8001a76:	fa22 f303 	lsr.w	r3, r2, r3
 8001a7a:	4a09      	ldr	r2, [pc, #36]	@ (8001aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001a7e:	4b09      	ldr	r3, [pc, #36]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff f818 	bl	8000ab8 <HAL_InitTick>

  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40023c00 	.word	0x40023c00
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	08002b24 	.word	0x08002b24
 8001aa0:	20000000 	.word	0x20000000
 8001aa4:	20000004 	.word	0x20000004

08001aa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001aac:	4b03      	ldr	r3, [pc, #12]	@ (8001abc <HAL_RCC_GetHCLKFreq+0x14>)
 8001aae:	681b      	ldr	r3, [r3, #0]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	20000000 	.word	0x20000000

08001ac0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ac4:	f7ff fff0 	bl	8001aa8 <HAL_RCC_GetHCLKFreq>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	4b05      	ldr	r3, [pc, #20]	@ (8001ae0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	0a9b      	lsrs	r3, r3, #10
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	4903      	ldr	r1, [pc, #12]	@ (8001ae4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ad6:	5ccb      	ldrb	r3, [r1, r3]
 8001ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	08002b34 	.word	0x08002b34

08001ae8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001aec:	f7ff ffdc 	bl	8001aa8 <HAL_RCC_GetHCLKFreq>
 8001af0:	4602      	mov	r2, r0
 8001af2:	4b05      	ldr	r3, [pc, #20]	@ (8001b08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	0b5b      	lsrs	r3, r3, #13
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	4903      	ldr	r1, [pc, #12]	@ (8001b0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001afe:	5ccb      	ldrb	r3, [r1, r3]
 8001b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	08002b34 	.word	0x08002b34

08001b10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b14:	b0ae      	sub	sp, #184	@ 0xb8
 8001b16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001b24:	2300      	movs	r3, #0
 8001b26:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001b30:	2300      	movs	r3, #0
 8001b32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b36:	4bcb      	ldr	r3, [pc, #812]	@ (8001e64 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f003 030c 	and.w	r3, r3, #12
 8001b3e:	2b0c      	cmp	r3, #12
 8001b40:	f200 8206 	bhi.w	8001f50 <HAL_RCC_GetSysClockFreq+0x440>
 8001b44:	a201      	add	r2, pc, #4	@ (adr r2, 8001b4c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b4a:	bf00      	nop
 8001b4c:	08001b81 	.word	0x08001b81
 8001b50:	08001f51 	.word	0x08001f51
 8001b54:	08001f51 	.word	0x08001f51
 8001b58:	08001f51 	.word	0x08001f51
 8001b5c:	08001b89 	.word	0x08001b89
 8001b60:	08001f51 	.word	0x08001f51
 8001b64:	08001f51 	.word	0x08001f51
 8001b68:	08001f51 	.word	0x08001f51
 8001b6c:	08001b91 	.word	0x08001b91
 8001b70:	08001f51 	.word	0x08001f51
 8001b74:	08001f51 	.word	0x08001f51
 8001b78:	08001f51 	.word	0x08001f51
 8001b7c:	08001d81 	.word	0x08001d81
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b80:	4bb9      	ldr	r3, [pc, #740]	@ (8001e68 <HAL_RCC_GetSysClockFreq+0x358>)
 8001b82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001b86:	e1e7      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b88:	4bb8      	ldr	r3, [pc, #736]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x35c>)
 8001b8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001b8e:	e1e3      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b90:	4bb4      	ldr	r3, [pc, #720]	@ (8001e64 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b9c:	4bb1      	ldr	r3, [pc, #708]	@ (8001e64 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d071      	beq.n	8001c8c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ba8:	4bae      	ldr	r3, [pc, #696]	@ (8001e64 <HAL_RCC_GetSysClockFreq+0x354>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	099b      	lsrs	r3, r3, #6
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001bb4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001bb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001bbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bc0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001bca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001bce:	4622      	mov	r2, r4
 8001bd0:	462b      	mov	r3, r5
 8001bd2:	f04f 0000 	mov.w	r0, #0
 8001bd6:	f04f 0100 	mov.w	r1, #0
 8001bda:	0159      	lsls	r1, r3, #5
 8001bdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001be0:	0150      	lsls	r0, r2, #5
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	4621      	mov	r1, r4
 8001be8:	1a51      	subs	r1, r2, r1
 8001bea:	6439      	str	r1, [r7, #64]	@ 0x40
 8001bec:	4629      	mov	r1, r5
 8001bee:	eb63 0301 	sbc.w	r3, r3, r1
 8001bf2:	647b      	str	r3, [r7, #68]	@ 0x44
 8001bf4:	f04f 0200 	mov.w	r2, #0
 8001bf8:	f04f 0300 	mov.w	r3, #0
 8001bfc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001c00:	4649      	mov	r1, r9
 8001c02:	018b      	lsls	r3, r1, #6
 8001c04:	4641      	mov	r1, r8
 8001c06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c0a:	4641      	mov	r1, r8
 8001c0c:	018a      	lsls	r2, r1, #6
 8001c0e:	4641      	mov	r1, r8
 8001c10:	1a51      	subs	r1, r2, r1
 8001c12:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001c14:	4649      	mov	r1, r9
 8001c16:	eb63 0301 	sbc.w	r3, r3, r1
 8001c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c1c:	f04f 0200 	mov.w	r2, #0
 8001c20:	f04f 0300 	mov.w	r3, #0
 8001c24:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001c28:	4649      	mov	r1, r9
 8001c2a:	00cb      	lsls	r3, r1, #3
 8001c2c:	4641      	mov	r1, r8
 8001c2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001c32:	4641      	mov	r1, r8
 8001c34:	00ca      	lsls	r2, r1, #3
 8001c36:	4610      	mov	r0, r2
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	4622      	mov	r2, r4
 8001c3e:	189b      	adds	r3, r3, r2
 8001c40:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c42:	462b      	mov	r3, r5
 8001c44:	460a      	mov	r2, r1
 8001c46:	eb42 0303 	adc.w	r3, r2, r3
 8001c4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	f04f 0300 	mov.w	r3, #0
 8001c54:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001c58:	4629      	mov	r1, r5
 8001c5a:	024b      	lsls	r3, r1, #9
 8001c5c:	4621      	mov	r1, r4
 8001c5e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c62:	4621      	mov	r1, r4
 8001c64:	024a      	lsls	r2, r1, #9
 8001c66:	4610      	mov	r0, r2
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001c74:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001c78:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001c7c:	f7fe faca 	bl	8000214 <__aeabi_uldivmod>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4613      	mov	r3, r2
 8001c86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001c8a:	e067      	b.n	8001d5c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c8c:	4b75      	ldr	r3, [pc, #468]	@ (8001e64 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	099b      	lsrs	r3, r3, #6
 8001c92:	2200      	movs	r2, #0
 8001c94:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001c98:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001c9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001ca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ca4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001caa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001cae:	4622      	mov	r2, r4
 8001cb0:	462b      	mov	r3, r5
 8001cb2:	f04f 0000 	mov.w	r0, #0
 8001cb6:	f04f 0100 	mov.w	r1, #0
 8001cba:	0159      	lsls	r1, r3, #5
 8001cbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cc0:	0150      	lsls	r0, r2, #5
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	4621      	mov	r1, r4
 8001cc8:	1a51      	subs	r1, r2, r1
 8001cca:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001ccc:	4629      	mov	r1, r5
 8001cce:	eb63 0301 	sbc.w	r3, r3, r1
 8001cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001cd4:	f04f 0200 	mov.w	r2, #0
 8001cd8:	f04f 0300 	mov.w	r3, #0
 8001cdc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001ce0:	4649      	mov	r1, r9
 8001ce2:	018b      	lsls	r3, r1, #6
 8001ce4:	4641      	mov	r1, r8
 8001ce6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cea:	4641      	mov	r1, r8
 8001cec:	018a      	lsls	r2, r1, #6
 8001cee:	4641      	mov	r1, r8
 8001cf0:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cf4:	4649      	mov	r1, r9
 8001cf6:	eb63 0b01 	sbc.w	fp, r3, r1
 8001cfa:	f04f 0200 	mov.w	r2, #0
 8001cfe:	f04f 0300 	mov.w	r3, #0
 8001d02:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001d06:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001d0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d0e:	4692      	mov	sl, r2
 8001d10:	469b      	mov	fp, r3
 8001d12:	4623      	mov	r3, r4
 8001d14:	eb1a 0303 	adds.w	r3, sl, r3
 8001d18:	623b      	str	r3, [r7, #32]
 8001d1a:	462b      	mov	r3, r5
 8001d1c:	eb4b 0303 	adc.w	r3, fp, r3
 8001d20:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d22:	f04f 0200 	mov.w	r2, #0
 8001d26:	f04f 0300 	mov.w	r3, #0
 8001d2a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001d2e:	4629      	mov	r1, r5
 8001d30:	028b      	lsls	r3, r1, #10
 8001d32:	4621      	mov	r1, r4
 8001d34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d38:	4621      	mov	r1, r4
 8001d3a:	028a      	lsls	r2, r1, #10
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	4619      	mov	r1, r3
 8001d40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001d44:	2200      	movs	r2, #0
 8001d46:	673b      	str	r3, [r7, #112]	@ 0x70
 8001d48:	677a      	str	r2, [r7, #116]	@ 0x74
 8001d4a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001d4e:	f7fe fa61 	bl	8000214 <__aeabi_uldivmod>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	4613      	mov	r3, r2
 8001d58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001d5c:	4b41      	ldr	r3, [pc, #260]	@ (8001e64 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	0c1b      	lsrs	r3, r3, #16
 8001d62:	f003 0303 	and.w	r3, r3, #3
 8001d66:	3301      	adds	r3, #1
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001d6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001d72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001d7e:	e0eb      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d80:	4b38      	ldr	r3, [pc, #224]	@ (8001e64 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d8c:	4b35      	ldr	r3, [pc, #212]	@ (8001e64 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d06b      	beq.n	8001e70 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d98:	4b32      	ldr	r3, [pc, #200]	@ (8001e64 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	099b      	lsrs	r3, r3, #6
 8001d9e:	2200      	movs	r2, #0
 8001da0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001da2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001da4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001daa:	663b      	str	r3, [r7, #96]	@ 0x60
 8001dac:	2300      	movs	r3, #0
 8001dae:	667b      	str	r3, [r7, #100]	@ 0x64
 8001db0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001db4:	4622      	mov	r2, r4
 8001db6:	462b      	mov	r3, r5
 8001db8:	f04f 0000 	mov.w	r0, #0
 8001dbc:	f04f 0100 	mov.w	r1, #0
 8001dc0:	0159      	lsls	r1, r3, #5
 8001dc2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dc6:	0150      	lsls	r0, r2, #5
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	4621      	mov	r1, r4
 8001dce:	1a51      	subs	r1, r2, r1
 8001dd0:	61b9      	str	r1, [r7, #24]
 8001dd2:	4629      	mov	r1, r5
 8001dd4:	eb63 0301 	sbc.w	r3, r3, r1
 8001dd8:	61fb      	str	r3, [r7, #28]
 8001dda:	f04f 0200 	mov.w	r2, #0
 8001dde:	f04f 0300 	mov.w	r3, #0
 8001de2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001de6:	4659      	mov	r1, fp
 8001de8:	018b      	lsls	r3, r1, #6
 8001dea:	4651      	mov	r1, sl
 8001dec:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001df0:	4651      	mov	r1, sl
 8001df2:	018a      	lsls	r2, r1, #6
 8001df4:	4651      	mov	r1, sl
 8001df6:	ebb2 0801 	subs.w	r8, r2, r1
 8001dfa:	4659      	mov	r1, fp
 8001dfc:	eb63 0901 	sbc.w	r9, r3, r1
 8001e00:	f04f 0200 	mov.w	r2, #0
 8001e04:	f04f 0300 	mov.w	r3, #0
 8001e08:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e0c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e10:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e14:	4690      	mov	r8, r2
 8001e16:	4699      	mov	r9, r3
 8001e18:	4623      	mov	r3, r4
 8001e1a:	eb18 0303 	adds.w	r3, r8, r3
 8001e1e:	613b      	str	r3, [r7, #16]
 8001e20:	462b      	mov	r3, r5
 8001e22:	eb49 0303 	adc.w	r3, r9, r3
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	f04f 0200 	mov.w	r2, #0
 8001e2c:	f04f 0300 	mov.w	r3, #0
 8001e30:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001e34:	4629      	mov	r1, r5
 8001e36:	024b      	lsls	r3, r1, #9
 8001e38:	4621      	mov	r1, r4
 8001e3a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e3e:	4621      	mov	r1, r4
 8001e40:	024a      	lsls	r2, r1, #9
 8001e42:	4610      	mov	r0, r2
 8001e44:	4619      	mov	r1, r3
 8001e46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001e4e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001e50:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001e54:	f7fe f9de 	bl	8000214 <__aeabi_uldivmod>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001e62:	e065      	b.n	8001f30 <HAL_RCC_GetSysClockFreq+0x420>
 8001e64:	40023800 	.word	0x40023800
 8001e68:	00f42400 	.word	0x00f42400
 8001e6c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e70:	4b3d      	ldr	r3, [pc, #244]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x458>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	099b      	lsrs	r3, r3, #6
 8001e76:	2200      	movs	r2, #0
 8001e78:	4618      	mov	r0, r3
 8001e7a:	4611      	mov	r1, r2
 8001e7c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e80:	653b      	str	r3, [r7, #80]	@ 0x50
 8001e82:	2300      	movs	r3, #0
 8001e84:	657b      	str	r3, [r7, #84]	@ 0x54
 8001e86:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001e8a:	4642      	mov	r2, r8
 8001e8c:	464b      	mov	r3, r9
 8001e8e:	f04f 0000 	mov.w	r0, #0
 8001e92:	f04f 0100 	mov.w	r1, #0
 8001e96:	0159      	lsls	r1, r3, #5
 8001e98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e9c:	0150      	lsls	r0, r2, #5
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	4641      	mov	r1, r8
 8001ea4:	1a51      	subs	r1, r2, r1
 8001ea6:	60b9      	str	r1, [r7, #8]
 8001ea8:	4649      	mov	r1, r9
 8001eaa:	eb63 0301 	sbc.w	r3, r3, r1
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	f04f 0200 	mov.w	r2, #0
 8001eb4:	f04f 0300 	mov.w	r3, #0
 8001eb8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001ebc:	4659      	mov	r1, fp
 8001ebe:	018b      	lsls	r3, r1, #6
 8001ec0:	4651      	mov	r1, sl
 8001ec2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ec6:	4651      	mov	r1, sl
 8001ec8:	018a      	lsls	r2, r1, #6
 8001eca:	4651      	mov	r1, sl
 8001ecc:	1a54      	subs	r4, r2, r1
 8001ece:	4659      	mov	r1, fp
 8001ed0:	eb63 0501 	sbc.w	r5, r3, r1
 8001ed4:	f04f 0200 	mov.w	r2, #0
 8001ed8:	f04f 0300 	mov.w	r3, #0
 8001edc:	00eb      	lsls	r3, r5, #3
 8001ede:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ee2:	00e2      	lsls	r2, r4, #3
 8001ee4:	4614      	mov	r4, r2
 8001ee6:	461d      	mov	r5, r3
 8001ee8:	4643      	mov	r3, r8
 8001eea:	18e3      	adds	r3, r4, r3
 8001eec:	603b      	str	r3, [r7, #0]
 8001eee:	464b      	mov	r3, r9
 8001ef0:	eb45 0303 	adc.w	r3, r5, r3
 8001ef4:	607b      	str	r3, [r7, #4]
 8001ef6:	f04f 0200 	mov.w	r2, #0
 8001efa:	f04f 0300 	mov.w	r3, #0
 8001efe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f02:	4629      	mov	r1, r5
 8001f04:	028b      	lsls	r3, r1, #10
 8001f06:	4621      	mov	r1, r4
 8001f08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f0c:	4621      	mov	r1, r4
 8001f0e:	028a      	lsls	r2, r1, #10
 8001f10:	4610      	mov	r0, r2
 8001f12:	4619      	mov	r1, r3
 8001f14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f18:	2200      	movs	r2, #0
 8001f1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001f1c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001f1e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001f22:	f7fe f977 	bl	8000214 <__aeabi_uldivmod>
 8001f26:	4602      	mov	r2, r0
 8001f28:	460b      	mov	r3, r1
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001f30:	4b0d      	ldr	r3, [pc, #52]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x458>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	0f1b      	lsrs	r3, r3, #28
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001f3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001f42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001f4e:	e003      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f50:	4b06      	ldr	r3, [pc, #24]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x45c>)
 8001f52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001f56:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	37b8      	adds	r7, #184	@ 0xb8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f66:	bf00      	nop
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	00f42400 	.word	0x00f42400

08001f70 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e28d      	b.n	800249e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f000 8083 	beq.w	8002096 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001f90:	4b94      	ldr	r3, [pc, #592]	@ (80021e4 <HAL_RCC_OscConfig+0x274>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f003 030c 	and.w	r3, r3, #12
 8001f98:	2b04      	cmp	r3, #4
 8001f9a:	d019      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001f9c:	4b91      	ldr	r3, [pc, #580]	@ (80021e4 <HAL_RCC_OscConfig+0x274>)
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 030c 	and.w	r3, r3, #12
        || \
 8001fa4:	2b08      	cmp	r3, #8
 8001fa6:	d106      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001fa8:	4b8e      	ldr	r3, [pc, #568]	@ (80021e4 <HAL_RCC_OscConfig+0x274>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fb0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001fb4:	d00c      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fb6:	4b8b      	ldr	r3, [pc, #556]	@ (80021e4 <HAL_RCC_OscConfig+0x274>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001fbe:	2b0c      	cmp	r3, #12
 8001fc0:	d112      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fc2:	4b88      	ldr	r3, [pc, #544]	@ (80021e4 <HAL_RCC_OscConfig+0x274>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001fce:	d10b      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd0:	4b84      	ldr	r3, [pc, #528]	@ (80021e4 <HAL_RCC_OscConfig+0x274>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d05b      	beq.n	8002094 <HAL_RCC_OscConfig+0x124>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d157      	bne.n	8002094 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e25a      	b.n	800249e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ff0:	d106      	bne.n	8002000 <HAL_RCC_OscConfig+0x90>
 8001ff2:	4b7c      	ldr	r3, [pc, #496]	@ (80021e4 <HAL_RCC_OscConfig+0x274>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a7b      	ldr	r2, [pc, #492]	@ (80021e4 <HAL_RCC_OscConfig+0x274>)
 8001ff8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	e01d      	b.n	800203c <HAL_RCC_OscConfig+0xcc>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002008:	d10c      	bne.n	8002024 <HAL_RCC_OscConfig+0xb4>
 800200a:	4b76      	ldr	r3, [pc, #472]	@ (80021e4 <HAL_RCC_OscConfig+0x274>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a75      	ldr	r2, [pc, #468]	@ (80021e4 <HAL_RCC_OscConfig+0x274>)
 8002010:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002014:	6013      	str	r3, [r2, #0]
 8002016:	4b73      	ldr	r3, [pc, #460]	@ (80021e4 <HAL_RCC_OscConfig+0x274>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a72      	ldr	r2, [pc, #456]	@ (80021e4 <HAL_RCC_OscConfig+0x274>)
 800201c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002020:	6013      	str	r3, [r2, #0]
 8002022:	e00b      	b.n	800203c <HAL_RCC_OscConfig+0xcc>
 8002024:	4b6f      	ldr	r3, [pc, #444]	@ (80021e4 <HAL_RCC_OscConfig+0x274>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a6e      	ldr	r2, [pc, #440]	@ (80021e4 <HAL_RCC_OscConfig+0x274>)
 800202a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800202e:	6013      	str	r3, [r2, #0]
 8002030:	4b6c      	ldr	r3, [pc, #432]	@ (80021e4 <HAL_RCC_OscConfig+0x274>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a6b      	ldr	r2, [pc, #428]	@ (80021e4 <HAL_RCC_OscConfig+0x274>)
 8002036:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800203a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d013      	beq.n	800206c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002044:	f7fe fd7c 	bl	8000b40 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800204c:	f7fe fd78 	bl	8000b40 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b64      	cmp	r3, #100	@ 0x64
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e21f      	b.n	800249e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205e:	4b61      	ldr	r3, [pc, #388]	@ (80021e4 <HAL_RCC_OscConfig+0x274>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0f0      	beq.n	800204c <HAL_RCC_OscConfig+0xdc>
 800206a:	e014      	b.n	8002096 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206c:	f7fe fd68 	bl	8000b40 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002074:	f7fe fd64 	bl	8000b40 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b64      	cmp	r3, #100	@ 0x64
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e20b      	b.n	800249e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002086:	4b57      	ldr	r3, [pc, #348]	@ (80021e4 <HAL_RCC_OscConfig+0x274>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1f0      	bne.n	8002074 <HAL_RCC_OscConfig+0x104>
 8002092:	e000      	b.n	8002096 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d06f      	beq.n	8002182 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80020a2:	4b50      	ldr	r3, [pc, #320]	@ (80021e4 <HAL_RCC_OscConfig+0x274>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f003 030c 	and.w	r3, r3, #12
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d017      	beq.n	80020de <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80020ae:	4b4d      	ldr	r3, [pc, #308]	@ (80021e4 <HAL_RCC_OscConfig+0x274>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 030c 	and.w	r3, r3, #12
        || \
 80020b6:	2b08      	cmp	r3, #8
 80020b8:	d105      	bne.n	80020c6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80020ba:	4b4a      	ldr	r3, [pc, #296]	@ (80021e4 <HAL_RCC_OscConfig+0x274>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00b      	beq.n	80020de <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020c6:	4b47      	ldr	r3, [pc, #284]	@ (80021e4 <HAL_RCC_OscConfig+0x274>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80020ce:	2b0c      	cmp	r3, #12
 80020d0:	d11c      	bne.n	800210c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020d2:	4b44      	ldr	r3, [pc, #272]	@ (80021e4 <HAL_RCC_OscConfig+0x274>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d116      	bne.n	800210c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020de:	4b41      	ldr	r3, [pc, #260]	@ (80021e4 <HAL_RCC_OscConfig+0x274>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d005      	beq.n	80020f6 <HAL_RCC_OscConfig+0x186>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d001      	beq.n	80020f6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e1d3      	b.n	800249e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f6:	4b3b      	ldr	r3, [pc, #236]	@ (80021e4 <HAL_RCC_OscConfig+0x274>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	4937      	ldr	r1, [pc, #220]	@ (80021e4 <HAL_RCC_OscConfig+0x274>)
 8002106:	4313      	orrs	r3, r2
 8002108:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800210a:	e03a      	b.n	8002182 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d020      	beq.n	8002156 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002114:	4b34      	ldr	r3, [pc, #208]	@ (80021e8 <HAL_RCC_OscConfig+0x278>)
 8002116:	2201      	movs	r2, #1
 8002118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211a:	f7fe fd11 	bl	8000b40 <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002122:	f7fe fd0d 	bl	8000b40 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e1b4      	b.n	800249e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002134:	4b2b      	ldr	r3, [pc, #172]	@ (80021e4 <HAL_RCC_OscConfig+0x274>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d0f0      	beq.n	8002122 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002140:	4b28      	ldr	r3, [pc, #160]	@ (80021e4 <HAL_RCC_OscConfig+0x274>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	4925      	ldr	r1, [pc, #148]	@ (80021e4 <HAL_RCC_OscConfig+0x274>)
 8002150:	4313      	orrs	r3, r2
 8002152:	600b      	str	r3, [r1, #0]
 8002154:	e015      	b.n	8002182 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002156:	4b24      	ldr	r3, [pc, #144]	@ (80021e8 <HAL_RCC_OscConfig+0x278>)
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215c:	f7fe fcf0 	bl	8000b40 <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002164:	f7fe fcec 	bl	8000b40 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e193      	b.n	800249e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002176:	4b1b      	ldr	r3, [pc, #108]	@ (80021e4 <HAL_RCC_OscConfig+0x274>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1f0      	bne.n	8002164 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0308 	and.w	r3, r3, #8
 800218a:	2b00      	cmp	r3, #0
 800218c:	d036      	beq.n	80021fc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d016      	beq.n	80021c4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002196:	4b15      	ldr	r3, [pc, #84]	@ (80021ec <HAL_RCC_OscConfig+0x27c>)
 8002198:	2201      	movs	r2, #1
 800219a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800219c:	f7fe fcd0 	bl	8000b40 <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021a4:	f7fe fccc 	bl	8000b40 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e173      	b.n	800249e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021b6:	4b0b      	ldr	r3, [pc, #44]	@ (80021e4 <HAL_RCC_OscConfig+0x274>)
 80021b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d0f0      	beq.n	80021a4 <HAL_RCC_OscConfig+0x234>
 80021c2:	e01b      	b.n	80021fc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021c4:	4b09      	ldr	r3, [pc, #36]	@ (80021ec <HAL_RCC_OscConfig+0x27c>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ca:	f7fe fcb9 	bl	8000b40 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021d0:	e00e      	b.n	80021f0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021d2:	f7fe fcb5 	bl	8000b40 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d907      	bls.n	80021f0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e15c      	b.n	800249e <HAL_RCC_OscConfig+0x52e>
 80021e4:	40023800 	.word	0x40023800
 80021e8:	42470000 	.word	0x42470000
 80021ec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021f0:	4b8a      	ldr	r3, [pc, #552]	@ (800241c <HAL_RCC_OscConfig+0x4ac>)
 80021f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1ea      	bne.n	80021d2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0304 	and.w	r3, r3, #4
 8002204:	2b00      	cmp	r3, #0
 8002206:	f000 8097 	beq.w	8002338 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800220a:	2300      	movs	r3, #0
 800220c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800220e:	4b83      	ldr	r3, [pc, #524]	@ (800241c <HAL_RCC_OscConfig+0x4ac>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002212:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10f      	bne.n	800223a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	60bb      	str	r3, [r7, #8]
 800221e:	4b7f      	ldr	r3, [pc, #508]	@ (800241c <HAL_RCC_OscConfig+0x4ac>)
 8002220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002222:	4a7e      	ldr	r2, [pc, #504]	@ (800241c <HAL_RCC_OscConfig+0x4ac>)
 8002224:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002228:	6413      	str	r3, [r2, #64]	@ 0x40
 800222a:	4b7c      	ldr	r3, [pc, #496]	@ (800241c <HAL_RCC_OscConfig+0x4ac>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002232:	60bb      	str	r3, [r7, #8]
 8002234:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002236:	2301      	movs	r3, #1
 8002238:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800223a:	4b79      	ldr	r3, [pc, #484]	@ (8002420 <HAL_RCC_OscConfig+0x4b0>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002242:	2b00      	cmp	r3, #0
 8002244:	d118      	bne.n	8002278 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002246:	4b76      	ldr	r3, [pc, #472]	@ (8002420 <HAL_RCC_OscConfig+0x4b0>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a75      	ldr	r2, [pc, #468]	@ (8002420 <HAL_RCC_OscConfig+0x4b0>)
 800224c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002250:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002252:	f7fe fc75 	bl	8000b40 <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800225a:	f7fe fc71 	bl	8000b40 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e118      	b.n	800249e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800226c:	4b6c      	ldr	r3, [pc, #432]	@ (8002420 <HAL_RCC_OscConfig+0x4b0>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0f0      	beq.n	800225a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d106      	bne.n	800228e <HAL_RCC_OscConfig+0x31e>
 8002280:	4b66      	ldr	r3, [pc, #408]	@ (800241c <HAL_RCC_OscConfig+0x4ac>)
 8002282:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002284:	4a65      	ldr	r2, [pc, #404]	@ (800241c <HAL_RCC_OscConfig+0x4ac>)
 8002286:	f043 0301 	orr.w	r3, r3, #1
 800228a:	6713      	str	r3, [r2, #112]	@ 0x70
 800228c:	e01c      	b.n	80022c8 <HAL_RCC_OscConfig+0x358>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	2b05      	cmp	r3, #5
 8002294:	d10c      	bne.n	80022b0 <HAL_RCC_OscConfig+0x340>
 8002296:	4b61      	ldr	r3, [pc, #388]	@ (800241c <HAL_RCC_OscConfig+0x4ac>)
 8002298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800229a:	4a60      	ldr	r2, [pc, #384]	@ (800241c <HAL_RCC_OscConfig+0x4ac>)
 800229c:	f043 0304 	orr.w	r3, r3, #4
 80022a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80022a2:	4b5e      	ldr	r3, [pc, #376]	@ (800241c <HAL_RCC_OscConfig+0x4ac>)
 80022a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022a6:	4a5d      	ldr	r2, [pc, #372]	@ (800241c <HAL_RCC_OscConfig+0x4ac>)
 80022a8:	f043 0301 	orr.w	r3, r3, #1
 80022ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80022ae:	e00b      	b.n	80022c8 <HAL_RCC_OscConfig+0x358>
 80022b0:	4b5a      	ldr	r3, [pc, #360]	@ (800241c <HAL_RCC_OscConfig+0x4ac>)
 80022b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022b4:	4a59      	ldr	r2, [pc, #356]	@ (800241c <HAL_RCC_OscConfig+0x4ac>)
 80022b6:	f023 0301 	bic.w	r3, r3, #1
 80022ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80022bc:	4b57      	ldr	r3, [pc, #348]	@ (800241c <HAL_RCC_OscConfig+0x4ac>)
 80022be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022c0:	4a56      	ldr	r2, [pc, #344]	@ (800241c <HAL_RCC_OscConfig+0x4ac>)
 80022c2:	f023 0304 	bic.w	r3, r3, #4
 80022c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d015      	beq.n	80022fc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d0:	f7fe fc36 	bl	8000b40 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d6:	e00a      	b.n	80022ee <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022d8:	f7fe fc32 	bl	8000b40 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e0d7      	b.n	800249e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ee:	4b4b      	ldr	r3, [pc, #300]	@ (800241c <HAL_RCC_OscConfig+0x4ac>)
 80022f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0ee      	beq.n	80022d8 <HAL_RCC_OscConfig+0x368>
 80022fa:	e014      	b.n	8002326 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022fc:	f7fe fc20 	bl	8000b40 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002302:	e00a      	b.n	800231a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002304:	f7fe fc1c 	bl	8000b40 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002312:	4293      	cmp	r3, r2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e0c1      	b.n	800249e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800231a:	4b40      	ldr	r3, [pc, #256]	@ (800241c <HAL_RCC_OscConfig+0x4ac>)
 800231c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1ee      	bne.n	8002304 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002326:	7dfb      	ldrb	r3, [r7, #23]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d105      	bne.n	8002338 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800232c:	4b3b      	ldr	r3, [pc, #236]	@ (800241c <HAL_RCC_OscConfig+0x4ac>)
 800232e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002330:	4a3a      	ldr	r2, [pc, #232]	@ (800241c <HAL_RCC_OscConfig+0x4ac>)
 8002332:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002336:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 80ad 	beq.w	800249c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002342:	4b36      	ldr	r3, [pc, #216]	@ (800241c <HAL_RCC_OscConfig+0x4ac>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 030c 	and.w	r3, r3, #12
 800234a:	2b08      	cmp	r3, #8
 800234c:	d060      	beq.n	8002410 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	2b02      	cmp	r3, #2
 8002354:	d145      	bne.n	80023e2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002356:	4b33      	ldr	r3, [pc, #204]	@ (8002424 <HAL_RCC_OscConfig+0x4b4>)
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235c:	f7fe fbf0 	bl	8000b40 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002364:	f7fe fbec 	bl	8000b40 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e093      	b.n	800249e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002376:	4b29      	ldr	r3, [pc, #164]	@ (800241c <HAL_RCC_OscConfig+0x4ac>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f0      	bne.n	8002364 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69da      	ldr	r2, [r3, #28]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	431a      	orrs	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002390:	019b      	lsls	r3, r3, #6
 8002392:	431a      	orrs	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002398:	085b      	lsrs	r3, r3, #1
 800239a:	3b01      	subs	r3, #1
 800239c:	041b      	lsls	r3, r3, #16
 800239e:	431a      	orrs	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a4:	061b      	lsls	r3, r3, #24
 80023a6:	431a      	orrs	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ac:	071b      	lsls	r3, r3, #28
 80023ae:	491b      	ldr	r1, [pc, #108]	@ (800241c <HAL_RCC_OscConfig+0x4ac>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002424 <HAL_RCC_OscConfig+0x4b4>)
 80023b6:	2201      	movs	r2, #1
 80023b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ba:	f7fe fbc1 	bl	8000b40 <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c2:	f7fe fbbd 	bl	8000b40 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e064      	b.n	800249e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023d4:	4b11      	ldr	r3, [pc, #68]	@ (800241c <HAL_RCC_OscConfig+0x4ac>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d0f0      	beq.n	80023c2 <HAL_RCC_OscConfig+0x452>
 80023e0:	e05c      	b.n	800249c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023e2:	4b10      	ldr	r3, [pc, #64]	@ (8002424 <HAL_RCC_OscConfig+0x4b4>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e8:	f7fe fbaa 	bl	8000b40 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f0:	f7fe fba6 	bl	8000b40 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e04d      	b.n	800249e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002402:	4b06      	ldr	r3, [pc, #24]	@ (800241c <HAL_RCC_OscConfig+0x4ac>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1f0      	bne.n	80023f0 <HAL_RCC_OscConfig+0x480>
 800240e:	e045      	b.n	800249c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d107      	bne.n	8002428 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e040      	b.n	800249e <HAL_RCC_OscConfig+0x52e>
 800241c:	40023800 	.word	0x40023800
 8002420:	40007000 	.word	0x40007000
 8002424:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002428:	4b1f      	ldr	r3, [pc, #124]	@ (80024a8 <HAL_RCC_OscConfig+0x538>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d030      	beq.n	8002498 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002440:	429a      	cmp	r2, r3
 8002442:	d129      	bne.n	8002498 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800244e:	429a      	cmp	r2, r3
 8002450:	d122      	bne.n	8002498 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002458:	4013      	ands	r3, r2
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800245e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002460:	4293      	cmp	r3, r2
 8002462:	d119      	bne.n	8002498 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800246e:	085b      	lsrs	r3, r3, #1
 8002470:	3b01      	subs	r3, #1
 8002472:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002474:	429a      	cmp	r2, r3
 8002476:	d10f      	bne.n	8002498 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002482:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002484:	429a      	cmp	r2, r3
 8002486:	d107      	bne.n	8002498 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002492:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002494:	429a      	cmp	r2, r3
 8002496:	d001      	beq.n	800249c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e000      	b.n	800249e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40023800 	.word	0x40023800

080024ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e042      	b.n	8002544 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d106      	bne.n	80024d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7fe f9de 	bl	8000894 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2224      	movs	r2, #36	@ 0x24
 80024dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68da      	ldr	r2, [r3, #12]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80024ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 f82b 	bl	800254c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	691a      	ldr	r2, [r3, #16]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002504:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	695a      	ldr	r2, [r3, #20]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002514:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68da      	ldr	r2, [r3, #12]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002524:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2220      	movs	r2, #32
 8002530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2220      	movs	r2, #32
 8002538:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800254c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002550:	b0c0      	sub	sp, #256	@ 0x100
 8002552:	af00      	add	r7, sp, #0
 8002554:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002568:	68d9      	ldr	r1, [r3, #12]
 800256a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	ea40 0301 	orr.w	r3, r0, r1
 8002574:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	431a      	orrs	r2, r3
 8002584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	431a      	orrs	r2, r3
 800258c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	4313      	orrs	r3, r2
 8002594:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80025a4:	f021 010c 	bic.w	r1, r1, #12
 80025a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80025b2:	430b      	orrs	r3, r1
 80025b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80025c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025c6:	6999      	ldr	r1, [r3, #24]
 80025c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	ea40 0301 	orr.w	r3, r0, r1
 80025d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80025d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	4b8f      	ldr	r3, [pc, #572]	@ (8002818 <UART_SetConfig+0x2cc>)
 80025dc:	429a      	cmp	r2, r3
 80025de:	d005      	beq.n	80025ec <UART_SetConfig+0xa0>
 80025e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	4b8d      	ldr	r3, [pc, #564]	@ (800281c <UART_SetConfig+0x2d0>)
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d104      	bne.n	80025f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80025ec:	f7ff fa7c 	bl	8001ae8 <HAL_RCC_GetPCLK2Freq>
 80025f0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80025f4:	e003      	b.n	80025fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80025f6:	f7ff fa63 	bl	8001ac0 <HAL_RCC_GetPCLK1Freq>
 80025fa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002608:	f040 810c 	bne.w	8002824 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800260c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002610:	2200      	movs	r2, #0
 8002612:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002616:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800261a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800261e:	4622      	mov	r2, r4
 8002620:	462b      	mov	r3, r5
 8002622:	1891      	adds	r1, r2, r2
 8002624:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002626:	415b      	adcs	r3, r3
 8002628:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800262a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800262e:	4621      	mov	r1, r4
 8002630:	eb12 0801 	adds.w	r8, r2, r1
 8002634:	4629      	mov	r1, r5
 8002636:	eb43 0901 	adc.w	r9, r3, r1
 800263a:	f04f 0200 	mov.w	r2, #0
 800263e:	f04f 0300 	mov.w	r3, #0
 8002642:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002646:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800264a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800264e:	4690      	mov	r8, r2
 8002650:	4699      	mov	r9, r3
 8002652:	4623      	mov	r3, r4
 8002654:	eb18 0303 	adds.w	r3, r8, r3
 8002658:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800265c:	462b      	mov	r3, r5
 800265e:	eb49 0303 	adc.w	r3, r9, r3
 8002662:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002672:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002676:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800267a:	460b      	mov	r3, r1
 800267c:	18db      	adds	r3, r3, r3
 800267e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002680:	4613      	mov	r3, r2
 8002682:	eb42 0303 	adc.w	r3, r2, r3
 8002686:	657b      	str	r3, [r7, #84]	@ 0x54
 8002688:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800268c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002690:	f7fd fdc0 	bl	8000214 <__aeabi_uldivmod>
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	4b61      	ldr	r3, [pc, #388]	@ (8002820 <UART_SetConfig+0x2d4>)
 800269a:	fba3 2302 	umull	r2, r3, r3, r2
 800269e:	095b      	lsrs	r3, r3, #5
 80026a0:	011c      	lsls	r4, r3, #4
 80026a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026a6:	2200      	movs	r2, #0
 80026a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80026ac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80026b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80026b4:	4642      	mov	r2, r8
 80026b6:	464b      	mov	r3, r9
 80026b8:	1891      	adds	r1, r2, r2
 80026ba:	64b9      	str	r1, [r7, #72]	@ 0x48
 80026bc:	415b      	adcs	r3, r3
 80026be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80026c4:	4641      	mov	r1, r8
 80026c6:	eb12 0a01 	adds.w	sl, r2, r1
 80026ca:	4649      	mov	r1, r9
 80026cc:	eb43 0b01 	adc.w	fp, r3, r1
 80026d0:	f04f 0200 	mov.w	r2, #0
 80026d4:	f04f 0300 	mov.w	r3, #0
 80026d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80026dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80026e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026e4:	4692      	mov	sl, r2
 80026e6:	469b      	mov	fp, r3
 80026e8:	4643      	mov	r3, r8
 80026ea:	eb1a 0303 	adds.w	r3, sl, r3
 80026ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80026f2:	464b      	mov	r3, r9
 80026f4:	eb4b 0303 	adc.w	r3, fp, r3
 80026f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80026fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002708:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800270c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002710:	460b      	mov	r3, r1
 8002712:	18db      	adds	r3, r3, r3
 8002714:	643b      	str	r3, [r7, #64]	@ 0x40
 8002716:	4613      	mov	r3, r2
 8002718:	eb42 0303 	adc.w	r3, r2, r3
 800271c:	647b      	str	r3, [r7, #68]	@ 0x44
 800271e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002722:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002726:	f7fd fd75 	bl	8000214 <__aeabi_uldivmod>
 800272a:	4602      	mov	r2, r0
 800272c:	460b      	mov	r3, r1
 800272e:	4611      	mov	r1, r2
 8002730:	4b3b      	ldr	r3, [pc, #236]	@ (8002820 <UART_SetConfig+0x2d4>)
 8002732:	fba3 2301 	umull	r2, r3, r3, r1
 8002736:	095b      	lsrs	r3, r3, #5
 8002738:	2264      	movs	r2, #100	@ 0x64
 800273a:	fb02 f303 	mul.w	r3, r2, r3
 800273e:	1acb      	subs	r3, r1, r3
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002746:	4b36      	ldr	r3, [pc, #216]	@ (8002820 <UART_SetConfig+0x2d4>)
 8002748:	fba3 2302 	umull	r2, r3, r3, r2
 800274c:	095b      	lsrs	r3, r3, #5
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002754:	441c      	add	r4, r3
 8002756:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800275a:	2200      	movs	r2, #0
 800275c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002760:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002764:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002768:	4642      	mov	r2, r8
 800276a:	464b      	mov	r3, r9
 800276c:	1891      	adds	r1, r2, r2
 800276e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002770:	415b      	adcs	r3, r3
 8002772:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002774:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002778:	4641      	mov	r1, r8
 800277a:	1851      	adds	r1, r2, r1
 800277c:	6339      	str	r1, [r7, #48]	@ 0x30
 800277e:	4649      	mov	r1, r9
 8002780:	414b      	adcs	r3, r1
 8002782:	637b      	str	r3, [r7, #52]	@ 0x34
 8002784:	f04f 0200 	mov.w	r2, #0
 8002788:	f04f 0300 	mov.w	r3, #0
 800278c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002790:	4659      	mov	r1, fp
 8002792:	00cb      	lsls	r3, r1, #3
 8002794:	4651      	mov	r1, sl
 8002796:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800279a:	4651      	mov	r1, sl
 800279c:	00ca      	lsls	r2, r1, #3
 800279e:	4610      	mov	r0, r2
 80027a0:	4619      	mov	r1, r3
 80027a2:	4603      	mov	r3, r0
 80027a4:	4642      	mov	r2, r8
 80027a6:	189b      	adds	r3, r3, r2
 80027a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80027ac:	464b      	mov	r3, r9
 80027ae:	460a      	mov	r2, r1
 80027b0:	eb42 0303 	adc.w	r3, r2, r3
 80027b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80027b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80027c4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80027c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80027cc:	460b      	mov	r3, r1
 80027ce:	18db      	adds	r3, r3, r3
 80027d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027d2:	4613      	mov	r3, r2
 80027d4:	eb42 0303 	adc.w	r3, r2, r3
 80027d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80027de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80027e2:	f7fd fd17 	bl	8000214 <__aeabi_uldivmod>
 80027e6:	4602      	mov	r2, r0
 80027e8:	460b      	mov	r3, r1
 80027ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002820 <UART_SetConfig+0x2d4>)
 80027ec:	fba3 1302 	umull	r1, r3, r3, r2
 80027f0:	095b      	lsrs	r3, r3, #5
 80027f2:	2164      	movs	r1, #100	@ 0x64
 80027f4:	fb01 f303 	mul.w	r3, r1, r3
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	3332      	adds	r3, #50	@ 0x32
 80027fe:	4a08      	ldr	r2, [pc, #32]	@ (8002820 <UART_SetConfig+0x2d4>)
 8002800:	fba2 2303 	umull	r2, r3, r2, r3
 8002804:	095b      	lsrs	r3, r3, #5
 8002806:	f003 0207 	and.w	r2, r3, #7
 800280a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4422      	add	r2, r4
 8002812:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002814:	e106      	b.n	8002a24 <UART_SetConfig+0x4d8>
 8002816:	bf00      	nop
 8002818:	40011000 	.word	0x40011000
 800281c:	40011400 	.word	0x40011400
 8002820:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002824:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002828:	2200      	movs	r2, #0
 800282a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800282e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002832:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002836:	4642      	mov	r2, r8
 8002838:	464b      	mov	r3, r9
 800283a:	1891      	adds	r1, r2, r2
 800283c:	6239      	str	r1, [r7, #32]
 800283e:	415b      	adcs	r3, r3
 8002840:	627b      	str	r3, [r7, #36]	@ 0x24
 8002842:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002846:	4641      	mov	r1, r8
 8002848:	1854      	adds	r4, r2, r1
 800284a:	4649      	mov	r1, r9
 800284c:	eb43 0501 	adc.w	r5, r3, r1
 8002850:	f04f 0200 	mov.w	r2, #0
 8002854:	f04f 0300 	mov.w	r3, #0
 8002858:	00eb      	lsls	r3, r5, #3
 800285a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800285e:	00e2      	lsls	r2, r4, #3
 8002860:	4614      	mov	r4, r2
 8002862:	461d      	mov	r5, r3
 8002864:	4643      	mov	r3, r8
 8002866:	18e3      	adds	r3, r4, r3
 8002868:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800286c:	464b      	mov	r3, r9
 800286e:	eb45 0303 	adc.w	r3, r5, r3
 8002872:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002882:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002886:	f04f 0200 	mov.w	r2, #0
 800288a:	f04f 0300 	mov.w	r3, #0
 800288e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002892:	4629      	mov	r1, r5
 8002894:	008b      	lsls	r3, r1, #2
 8002896:	4621      	mov	r1, r4
 8002898:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800289c:	4621      	mov	r1, r4
 800289e:	008a      	lsls	r2, r1, #2
 80028a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80028a4:	f7fd fcb6 	bl	8000214 <__aeabi_uldivmod>
 80028a8:	4602      	mov	r2, r0
 80028aa:	460b      	mov	r3, r1
 80028ac:	4b60      	ldr	r3, [pc, #384]	@ (8002a30 <UART_SetConfig+0x4e4>)
 80028ae:	fba3 2302 	umull	r2, r3, r3, r2
 80028b2:	095b      	lsrs	r3, r3, #5
 80028b4:	011c      	lsls	r4, r3, #4
 80028b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028ba:	2200      	movs	r2, #0
 80028bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80028c0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80028c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80028c8:	4642      	mov	r2, r8
 80028ca:	464b      	mov	r3, r9
 80028cc:	1891      	adds	r1, r2, r2
 80028ce:	61b9      	str	r1, [r7, #24]
 80028d0:	415b      	adcs	r3, r3
 80028d2:	61fb      	str	r3, [r7, #28]
 80028d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028d8:	4641      	mov	r1, r8
 80028da:	1851      	adds	r1, r2, r1
 80028dc:	6139      	str	r1, [r7, #16]
 80028de:	4649      	mov	r1, r9
 80028e0:	414b      	adcs	r3, r1
 80028e2:	617b      	str	r3, [r7, #20]
 80028e4:	f04f 0200 	mov.w	r2, #0
 80028e8:	f04f 0300 	mov.w	r3, #0
 80028ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028f0:	4659      	mov	r1, fp
 80028f2:	00cb      	lsls	r3, r1, #3
 80028f4:	4651      	mov	r1, sl
 80028f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028fa:	4651      	mov	r1, sl
 80028fc:	00ca      	lsls	r2, r1, #3
 80028fe:	4610      	mov	r0, r2
 8002900:	4619      	mov	r1, r3
 8002902:	4603      	mov	r3, r0
 8002904:	4642      	mov	r2, r8
 8002906:	189b      	adds	r3, r3, r2
 8002908:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800290c:	464b      	mov	r3, r9
 800290e:	460a      	mov	r2, r1
 8002910:	eb42 0303 	adc.w	r3, r2, r3
 8002914:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002922:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002924:	f04f 0200 	mov.w	r2, #0
 8002928:	f04f 0300 	mov.w	r3, #0
 800292c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002930:	4649      	mov	r1, r9
 8002932:	008b      	lsls	r3, r1, #2
 8002934:	4641      	mov	r1, r8
 8002936:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800293a:	4641      	mov	r1, r8
 800293c:	008a      	lsls	r2, r1, #2
 800293e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002942:	f7fd fc67 	bl	8000214 <__aeabi_uldivmod>
 8002946:	4602      	mov	r2, r0
 8002948:	460b      	mov	r3, r1
 800294a:	4611      	mov	r1, r2
 800294c:	4b38      	ldr	r3, [pc, #224]	@ (8002a30 <UART_SetConfig+0x4e4>)
 800294e:	fba3 2301 	umull	r2, r3, r3, r1
 8002952:	095b      	lsrs	r3, r3, #5
 8002954:	2264      	movs	r2, #100	@ 0x64
 8002956:	fb02 f303 	mul.w	r3, r2, r3
 800295a:	1acb      	subs	r3, r1, r3
 800295c:	011b      	lsls	r3, r3, #4
 800295e:	3332      	adds	r3, #50	@ 0x32
 8002960:	4a33      	ldr	r2, [pc, #204]	@ (8002a30 <UART_SetConfig+0x4e4>)
 8002962:	fba2 2303 	umull	r2, r3, r2, r3
 8002966:	095b      	lsrs	r3, r3, #5
 8002968:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800296c:	441c      	add	r4, r3
 800296e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002972:	2200      	movs	r2, #0
 8002974:	673b      	str	r3, [r7, #112]	@ 0x70
 8002976:	677a      	str	r2, [r7, #116]	@ 0x74
 8002978:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800297c:	4642      	mov	r2, r8
 800297e:	464b      	mov	r3, r9
 8002980:	1891      	adds	r1, r2, r2
 8002982:	60b9      	str	r1, [r7, #8]
 8002984:	415b      	adcs	r3, r3
 8002986:	60fb      	str	r3, [r7, #12]
 8002988:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800298c:	4641      	mov	r1, r8
 800298e:	1851      	adds	r1, r2, r1
 8002990:	6039      	str	r1, [r7, #0]
 8002992:	4649      	mov	r1, r9
 8002994:	414b      	adcs	r3, r1
 8002996:	607b      	str	r3, [r7, #4]
 8002998:	f04f 0200 	mov.w	r2, #0
 800299c:	f04f 0300 	mov.w	r3, #0
 80029a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80029a4:	4659      	mov	r1, fp
 80029a6:	00cb      	lsls	r3, r1, #3
 80029a8:	4651      	mov	r1, sl
 80029aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029ae:	4651      	mov	r1, sl
 80029b0:	00ca      	lsls	r2, r1, #3
 80029b2:	4610      	mov	r0, r2
 80029b4:	4619      	mov	r1, r3
 80029b6:	4603      	mov	r3, r0
 80029b8:	4642      	mov	r2, r8
 80029ba:	189b      	adds	r3, r3, r2
 80029bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80029be:	464b      	mov	r3, r9
 80029c0:	460a      	mov	r2, r1
 80029c2:	eb42 0303 	adc.w	r3, r2, r3
 80029c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80029c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80029d2:	667a      	str	r2, [r7, #100]	@ 0x64
 80029d4:	f04f 0200 	mov.w	r2, #0
 80029d8:	f04f 0300 	mov.w	r3, #0
 80029dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80029e0:	4649      	mov	r1, r9
 80029e2:	008b      	lsls	r3, r1, #2
 80029e4:	4641      	mov	r1, r8
 80029e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029ea:	4641      	mov	r1, r8
 80029ec:	008a      	lsls	r2, r1, #2
 80029ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80029f2:	f7fd fc0f 	bl	8000214 <__aeabi_uldivmod>
 80029f6:	4602      	mov	r2, r0
 80029f8:	460b      	mov	r3, r1
 80029fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002a30 <UART_SetConfig+0x4e4>)
 80029fc:	fba3 1302 	umull	r1, r3, r3, r2
 8002a00:	095b      	lsrs	r3, r3, #5
 8002a02:	2164      	movs	r1, #100	@ 0x64
 8002a04:	fb01 f303 	mul.w	r3, r1, r3
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	011b      	lsls	r3, r3, #4
 8002a0c:	3332      	adds	r3, #50	@ 0x32
 8002a0e:	4a08      	ldr	r2, [pc, #32]	@ (8002a30 <UART_SetConfig+0x4e4>)
 8002a10:	fba2 2303 	umull	r2, r3, r2, r3
 8002a14:	095b      	lsrs	r3, r3, #5
 8002a16:	f003 020f 	and.w	r2, r3, #15
 8002a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4422      	add	r2, r4
 8002a22:	609a      	str	r2, [r3, #8]
}
 8002a24:	bf00      	nop
 8002a26:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a30:	51eb851f 	.word	0x51eb851f

08002a34 <memset>:
 8002a34:	4402      	add	r2, r0
 8002a36:	4603      	mov	r3, r0
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d100      	bne.n	8002a3e <memset+0xa>
 8002a3c:	4770      	bx	lr
 8002a3e:	f803 1b01 	strb.w	r1, [r3], #1
 8002a42:	e7f9      	b.n	8002a38 <memset+0x4>

08002a44 <__libc_init_array>:
 8002a44:	b570      	push	{r4, r5, r6, lr}
 8002a46:	4d0d      	ldr	r5, [pc, #52]	@ (8002a7c <__libc_init_array+0x38>)
 8002a48:	4c0d      	ldr	r4, [pc, #52]	@ (8002a80 <__libc_init_array+0x3c>)
 8002a4a:	1b64      	subs	r4, r4, r5
 8002a4c:	10a4      	asrs	r4, r4, #2
 8002a4e:	2600      	movs	r6, #0
 8002a50:	42a6      	cmp	r6, r4
 8002a52:	d109      	bne.n	8002a68 <__libc_init_array+0x24>
 8002a54:	4d0b      	ldr	r5, [pc, #44]	@ (8002a84 <__libc_init_array+0x40>)
 8002a56:	4c0c      	ldr	r4, [pc, #48]	@ (8002a88 <__libc_init_array+0x44>)
 8002a58:	f000 f826 	bl	8002aa8 <_init>
 8002a5c:	1b64      	subs	r4, r4, r5
 8002a5e:	10a4      	asrs	r4, r4, #2
 8002a60:	2600      	movs	r6, #0
 8002a62:	42a6      	cmp	r6, r4
 8002a64:	d105      	bne.n	8002a72 <__libc_init_array+0x2e>
 8002a66:	bd70      	pop	{r4, r5, r6, pc}
 8002a68:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a6c:	4798      	blx	r3
 8002a6e:	3601      	adds	r6, #1
 8002a70:	e7ee      	b.n	8002a50 <__libc_init_array+0xc>
 8002a72:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a76:	4798      	blx	r3
 8002a78:	3601      	adds	r6, #1
 8002a7a:	e7f2      	b.n	8002a62 <__libc_init_array+0x1e>
 8002a7c:	08002b4c 	.word	0x08002b4c
 8002a80:	08002b4c 	.word	0x08002b4c
 8002a84:	08002b4c 	.word	0x08002b4c
 8002a88:	08002b50 	.word	0x08002b50

08002a8c <memcpy>:
 8002a8c:	440a      	add	r2, r1
 8002a8e:	4291      	cmp	r1, r2
 8002a90:	f100 33ff 	add.w	r3, r0, #4294967295
 8002a94:	d100      	bne.n	8002a98 <memcpy+0xc>
 8002a96:	4770      	bx	lr
 8002a98:	b510      	push	{r4, lr}
 8002a9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002aa2:	4291      	cmp	r1, r2
 8002aa4:	d1f9      	bne.n	8002a9a <memcpy+0xe>
 8002aa6:	bd10      	pop	{r4, pc}

08002aa8 <_init>:
 8002aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aaa:	bf00      	nop
 8002aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aae:	bc08      	pop	{r3}
 8002ab0:	469e      	mov	lr, r3
 8002ab2:	4770      	bx	lr

08002ab4 <_fini>:
 8002ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ab6:	bf00      	nop
 8002ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aba:	bc08      	pop	{r3}
 8002abc:	469e      	mov	lr, r3
 8002abe:	4770      	bx	lr
