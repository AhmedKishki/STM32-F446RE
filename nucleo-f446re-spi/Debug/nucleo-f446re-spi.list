
nucleo-f446re-spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002f4  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004b8  080004b8  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004b8  080004b8  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080004b8  080004b8  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080004b8  080004b8  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004b8  080004b8  000014b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004bc  080004bc  000014bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080004c0  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080004c4  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080004c4  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000018b1  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000632  00000000  00000000  000038e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000240  00000000  00000000  00003f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000193  00000000  00000000  00004158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001900e  00000000  00000000  000042eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000025b3  00000000  00000000  0001d2f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c157a  00000000  00000000  0001f8ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e0e26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006e8  00000000  00000000  000e0e6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000e1554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080004a0 	.word	0x080004a0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	080004a0 	.word	0x080004a0

08000204 <initTim2>:
#include "stm32f446xx.h"
#include "Timer.h"

void initTim2(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
    // 1. Enable TIM2 clock (APB1)
    RCC->APB1ENR |= (1 << 0);  // TIM2EN = 1
 8000208:	4b0d      	ldr	r3, [pc, #52]	@ (8000240 <initTim2+0x3c>)
 800020a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800020c:	4a0c      	ldr	r2, [pc, #48]	@ (8000240 <initTim2+0x3c>)
 800020e:	f043 0301 	orr.w	r3, r3, #1
 8000212:	6413      	str	r3, [r2, #64]	@ 0x40

    // 2. Set prescaler (PSC)
    // TIM2 clock = 84 MHz (APB1 Timer Clock) / (PSC + 1)
    // Target: 1 MHz tick frequency (1 µs per tick)
    TIM2->PSC = 83;  // 84 MHz / (83 + 1) = 1 MHz
 8000214:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000218:	2253      	movs	r2, #83	@ 0x53
 800021a:	629a      	str	r2, [r3, #40]	@ 0x28

    // 3. Set Auto-Reload Register (ARR) for 1 millisecond delay
    TIM2->ARR = 1000 - 1;  // Overflow every 1 ms
 800021c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000220:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000224:	62da      	str	r2, [r3, #44]	@ 0x2c

    // 4. Enable counter
    TIM2->CR1 |= (1 << 0);  // CEN = 1
 8000226:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000230:	f043 0301 	orr.w	r3, r3, #1
 8000234:	6013      	str	r3, [r2, #0]
}
 8000236:	bf00      	nop
 8000238:	46bd      	mov	sp, r7
 800023a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023e:	4770      	bx	lr
 8000240:	40023800 	.word	0x40023800

08000244 <delayUs>:
        // Wait until required time has elapsed
    }
}

void delayUs(unsigned int us)
{
 8000244:	b480      	push	{r7}
 8000246:	b085      	sub	sp, #20
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
    uint32_t startTick = TIM2->CNT;
 800024c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000252:	60fb      	str	r3, [r7, #12]

    // Since the timer is running at 1 MHz, 1 tick = 1 µs
    while ((TIM2->CNT - startTick) < us)
 8000254:	bf00      	nop
 8000256:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800025a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	1ad3      	subs	r3, r2, r3
 8000260:	687a      	ldr	r2, [r7, #4]
 8000262:	429a      	cmp	r2, r3
 8000264:	d8f7      	bhi.n	8000256 <delayUs+0x12>
    {
        // Busy wait until time has elapsed
    }
}
 8000266:	bf00      	nop
 8000268:	bf00      	nop
 800026a:	3714      	adds	r7, #20
 800026c:	46bd      	mov	sp, r7
 800026e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000272:	4770      	bx	lr

08000274 <main>:
void initLED(void);
void toggleLED(void);
uint8_t transferSPI(uint8_t);


int main(void){
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
//
//	// STORE DATA RECEIVED FROM MPU9250
//	uint8_t rxd = 0;

	// SET UP TIMER
	initTim2();
 8000278:	f7ff ffc4 	bl	8000204 <initTim2>
	initLED();
 800027c:	f000 f850 	bl	8000320 <initLED>

	while(1){
//		 // WRITE TO SPI
//		rxd = transferSPI(data[0]);
//		delay(50);
		toggleLED();
 8000280:	f000 f856 	bl	8000330 <toggleLED>
 8000284:	e7fc      	b.n	8000280 <main+0xc>
	...

08000288 <initClocks>:
	}
}


void initClocks(void){
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
    // - GPIO ports (GPIOA and GPIOB)
    // - SPI1 peripheral
    //

    // Enable clocks for GPIO ports (AHB1 peripheral bus)
    RCC->AHB1ENR |= ((1 << 0)       // Enable GPIOA clock
 800028c:	4b08      	ldr	r3, [pc, #32]	@ (80002b0 <initClocks+0x28>)
 800028e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000290:	4a07      	ldr	r2, [pc, #28]	@ (80002b0 <initClocks+0x28>)
 8000292:	f043 0303 	orr.w	r3, r3, #3
 8000296:	6313      	str	r3, [r2, #48]	@ 0x30
                    |(1 << 1));     // Enable GPIOB clock

    // Enable clock for SPI1 peripheral (APB2 peripheral bus)
    RCC->APB2ENR |= (1 << 12);      // SPI1 clock enabled (bit 12)
 8000298:	4b05      	ldr	r3, [pc, #20]	@ (80002b0 <initClocks+0x28>)
 800029a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800029c:	4a04      	ldr	r2, [pc, #16]	@ (80002b0 <initClocks+0x28>)
 800029e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80002a2:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80002a4:	bf00      	nop
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	40023800 	.word	0x40023800

080002b4 <setPinMode>:

    // Steps 4 and 5 (CRC polynomial and DMA configuration) are not included
    // since CRC and DMA are not used in this configuration.
}

void setPinMode(void){
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0
    // PA7  - SPI1 MOSI (Master Out Slave In - Data sent by Master)
    // PB3  - SPI1 SCLK (SPI Clock generated by Master)
    //

    // RESET PIN MODES: First clear the existing pin mode configuration
    GPIOA->MODER &= ~(
 80002b8:	4b17      	ldr	r3, [pc, #92]	@ (8000318 <setPinMode+0x64>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a16      	ldr	r2, [pc, #88]	@ (8000318 <setPinMode+0x64>)
 80002be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80002c2:	6013      	str	r3, [r2, #0]
    				 (3 << (2 * 4))   // Clear bits [9:8]   for PA4
					|(3 << (2 * 5))	  // Clear bits [11:10]	for PA5 (LED)
                    |(3 << (2 * 6))   // Clear bits [13:12] for PA6
                    |(3 << (2 * 7))   // Clear bits [15:14] for PA7
                    );
    GPIOB->MODER &= ~(3 << (2 * 3));   // Clear bits [7:6] for PB3
 80002c4:	4b15      	ldr	r3, [pc, #84]	@ (800031c <setPinMode+0x68>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a14      	ldr	r2, [pc, #80]	@ (800031c <setPinMode+0x68>)
 80002ca:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80002ce:	6013      	str	r3, [r2, #0]

    // CONFIGURE PIN MODES: Set pins to Alternate Function (AF) mode (binary '10')
    GPIOA->MODER |= (
 80002d0:	4b11      	ldr	r3, [pc, #68]	@ (8000318 <setPinMode+0x64>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4a10      	ldr	r2, [pc, #64]	@ (8000318 <setPinMode+0x64>)
 80002d6:	f443 4326 	orr.w	r3, r3, #42496	@ 0xa600
 80002da:	6013      	str	r3, [r2, #0]
    				 (2 << (2 * 4))    // Set PA4 (SSEL) to AF mode
					|(1 << (5 * 2))	   // Set PA5 (LED) to Output mode
                    |(2 << (2 * 6))    // Set PA6 (MISO) to AF mode
                    |(2 << (2 * 7))    // Set PA7 (MOSI) to AF mode
                    );
    GPIOB->MODER |= (2 << (2 * 3));    // Set PB3 (SCLK) to AF mode
 80002dc:	4b0f      	ldr	r3, [pc, #60]	@ (800031c <setPinMode+0x68>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a0e      	ldr	r2, [pc, #56]	@ (800031c <setPinMode+0x68>)
 80002e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80002e6:	6013      	str	r3, [r2, #0]

    // LED Setup
    GPIOA->OTYPER &= ~(1 << 5); // Push-pull mode
 80002e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000318 <setPinMode+0x64>)
 80002ea:	685b      	ldr	r3, [r3, #4]
 80002ec:	4a0a      	ldr	r2, [pc, #40]	@ (8000318 <setPinMode+0x64>)
 80002ee:	f023 0320 	bic.w	r3, r3, #32
 80002f2:	6053      	str	r3, [r2, #4]

    // Set PA5 speed to medium speed (optional, default is low)
    GPIOA->OSPEEDR |= (1 << (5 * 2)); // Medium speed
 80002f4:	4b08      	ldr	r3, [pc, #32]	@ (8000318 <setPinMode+0x64>)
 80002f6:	689b      	ldr	r3, [r3, #8]
 80002f8:	4a07      	ldr	r2, [pc, #28]	@ (8000318 <setPinMode+0x64>)
 80002fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002fe:	6093      	str	r3, [r2, #8]

    // Disable pull-up/pull-down (optional, default is no pull-up/pull-down)
    GPIOA->PUPDR &= ~(3 << (5 * 2)); // No pull-up, no pull-down
 8000300:	4b05      	ldr	r3, [pc, #20]	@ (8000318 <setPinMode+0x64>)
 8000302:	68db      	ldr	r3, [r3, #12]
 8000304:	4a04      	ldr	r2, [pc, #16]	@ (8000318 <setPinMode+0x64>)
 8000306:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800030a:	60d3      	str	r3, [r2, #12]
}
 800030c:	bf00      	nop
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	40020000 	.word	0x40020000
 800031c:	40020400 	.word	0x40020400

08000320 <initLED>:
	initClocks();
	configSPIPins();
	configSPI();
}

void initLED(void){
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
	initClocks();
 8000324:	f7ff ffb0 	bl	8000288 <initClocks>
	setPinMode();
 8000328:	f7ff ffc4 	bl	80002b4 <setPinMode>
}
 800032c:	bf00      	nop
 800032e:	bd80      	pop	{r7, pc}

08000330 <toggleLED>:

void toggleLED(void){
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
	// Toggle PA5 using BSRR (atomic operation)
	GPIOA->BSRR = (1 << 5);     // Set PA5
 8000334:	4b07      	ldr	r3, [pc, #28]	@ (8000354 <toggleLED+0x24>)
 8000336:	2220      	movs	r2, #32
 8000338:	619a      	str	r2, [r3, #24]
	delayUs(1);
 800033a:	2001      	movs	r0, #1
 800033c:	f7ff ff82 	bl	8000244 <delayUs>
	GPIOA->BSRR = (1 << (5 + 16)); // Reset PA5
 8000340:	4b04      	ldr	r3, [pc, #16]	@ (8000354 <toggleLED+0x24>)
 8000342:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000346:	619a      	str	r2, [r3, #24]
	delayUs(1);
 8000348:	2001      	movs	r0, #1
 800034a:	f7ff ff7b 	bl	8000244 <delayUs>
}
 800034e:	bf00      	nop
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	40020000 	.word	0x40020000

08000358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800035c:	bf00      	nop
 800035e:	e7fd      	b.n	800035c <NMI_Handler+0x4>

08000360 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000364:	bf00      	nop
 8000366:	e7fd      	b.n	8000364 <HardFault_Handler+0x4>

08000368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800036c:	bf00      	nop
 800036e:	e7fd      	b.n	800036c <MemManage_Handler+0x4>

08000370 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000374:	bf00      	nop
 8000376:	e7fd      	b.n	8000374 <BusFault_Handler+0x4>

08000378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800037c:	bf00      	nop
 800037e:	e7fd      	b.n	800037c <UsageFault_Handler+0x4>

08000380 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000384:	bf00      	nop
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr

0800038e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800038e:	b480      	push	{r7}
 8000390:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000392:	bf00      	nop
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr

0800039c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003a0:	bf00      	nop
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr

080003aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003aa:	b580      	push	{r7, lr}
 80003ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003ae:	f000 f83f 	bl	8000430 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
	...

080003b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003bc:	4b06      	ldr	r3, [pc, #24]	@ (80003d8 <SystemInit+0x20>)
 80003be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003c2:	4a05      	ldr	r2, [pc, #20]	@ (80003d8 <SystemInit+0x20>)
 80003c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80003c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003cc:	bf00      	nop
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	e000ed00 	.word	0xe000ed00

080003dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80003dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000414 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80003e0:	f7ff ffea 	bl	80003b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80003e4:	480c      	ldr	r0, [pc, #48]	@ (8000418 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80003e6:	490d      	ldr	r1, [pc, #52]	@ (800041c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80003e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000420 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80003ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003ec:	e002      	b.n	80003f4 <LoopCopyDataInit>

080003ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003f2:	3304      	adds	r3, #4

080003f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003f8:	d3f9      	bcc.n	80003ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000424 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80003fc:	4c0a      	ldr	r4, [pc, #40]	@ (8000428 <LoopFillZerobss+0x22>)
  movs r3, #0
 80003fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000400:	e001      	b.n	8000406 <LoopFillZerobss>

08000402 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000402:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000404:	3204      	adds	r2, #4

08000406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000406:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000408:	d3fb      	bcc.n	8000402 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800040a:	f000 f825 	bl	8000458 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800040e:	f7ff ff31 	bl	8000274 <main>
  bx  lr    
 8000412:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000414:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800041c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000420:	080004c0 	.word	0x080004c0
  ldr r2, =_sbss
 8000424:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000428:	20000024 	.word	0x20000024

0800042c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800042c:	e7fe      	b.n	800042c <ADC_IRQHandler>
	...

08000430 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000434:	4b06      	ldr	r3, [pc, #24]	@ (8000450 <HAL_IncTick+0x20>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	461a      	mov	r2, r3
 800043a:	4b06      	ldr	r3, [pc, #24]	@ (8000454 <HAL_IncTick+0x24>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4413      	add	r3, r2
 8000440:	4a04      	ldr	r2, [pc, #16]	@ (8000454 <HAL_IncTick+0x24>)
 8000442:	6013      	str	r3, [r2, #0]
}
 8000444:	bf00      	nop
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop
 8000450:	20000000 	.word	0x20000000
 8000454:	20000020 	.word	0x20000020

08000458 <__libc_init_array>:
 8000458:	b570      	push	{r4, r5, r6, lr}
 800045a:	4d0d      	ldr	r5, [pc, #52]	@ (8000490 <__libc_init_array+0x38>)
 800045c:	4c0d      	ldr	r4, [pc, #52]	@ (8000494 <__libc_init_array+0x3c>)
 800045e:	1b64      	subs	r4, r4, r5
 8000460:	10a4      	asrs	r4, r4, #2
 8000462:	2600      	movs	r6, #0
 8000464:	42a6      	cmp	r6, r4
 8000466:	d109      	bne.n	800047c <__libc_init_array+0x24>
 8000468:	4d0b      	ldr	r5, [pc, #44]	@ (8000498 <__libc_init_array+0x40>)
 800046a:	4c0c      	ldr	r4, [pc, #48]	@ (800049c <__libc_init_array+0x44>)
 800046c:	f000 f818 	bl	80004a0 <_init>
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	10a4      	asrs	r4, r4, #2
 8000474:	2600      	movs	r6, #0
 8000476:	42a6      	cmp	r6, r4
 8000478:	d105      	bne.n	8000486 <__libc_init_array+0x2e>
 800047a:	bd70      	pop	{r4, r5, r6, pc}
 800047c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000480:	4798      	blx	r3
 8000482:	3601      	adds	r6, #1
 8000484:	e7ee      	b.n	8000464 <__libc_init_array+0xc>
 8000486:	f855 3b04 	ldr.w	r3, [r5], #4
 800048a:	4798      	blx	r3
 800048c:	3601      	adds	r6, #1
 800048e:	e7f2      	b.n	8000476 <__libc_init_array+0x1e>
 8000490:	080004b8 	.word	0x080004b8
 8000494:	080004b8 	.word	0x080004b8
 8000498:	080004b8 	.word	0x080004b8
 800049c:	080004bc 	.word	0x080004bc

080004a0 <_init>:
 80004a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004a2:	bf00      	nop
 80004a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004a6:	bc08      	pop	{r3}
 80004a8:	469e      	mov	lr, r3
 80004aa:	4770      	bx	lr

080004ac <_fini>:
 80004ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ae:	bf00      	nop
 80004b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004b2:	bc08      	pop	{r3}
 80004b4:	469e      	mov	lr, r3
 80004b6:	4770      	bx	lr
